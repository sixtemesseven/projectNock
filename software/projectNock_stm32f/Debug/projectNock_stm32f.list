
projectNock_stm32f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f60  08003f60  00013f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000120  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000038c  20000070  080041a4  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003fc  080041a4  000203fc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016b51  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002bc8  00000000  00000000  00036bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000729e  00000000  00000000  000397b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  00040a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  000413c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000614a  00000000  00000000  00042188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004082  00000000  00000000  000482d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004c354  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001fb8  00000000  00000000  0004c3d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0004e388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f48 	.word	0x08003f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003f48 	.word	0x08003f48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f001 b8f6 	b.w	8001484 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <selfrel_offset31>:
 800058c:	6803      	ldr	r3, [r0, #0]
 800058e:	005a      	lsls	r2, r3, #1
 8000590:	bf4c      	ite	mi
 8000592:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000596:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800059a:	4418      	add	r0, r3
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <search_EIT_table>:
 80005a0:	b361      	cbz	r1, 80005fc <search_EIT_table+0x5c>
 80005a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a6:	f101 3aff 	add.w	sl, r1, #4294967295
 80005aa:	4690      	mov	r8, r2
 80005ac:	4606      	mov	r6, r0
 80005ae:	46d1      	mov	r9, sl
 80005b0:	2700      	movs	r7, #0
 80005b2:	eb07 0409 	add.w	r4, r7, r9
 80005b6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005ba:	1064      	asrs	r4, r4, #1
 80005bc:	00e5      	lsls	r5, r4, #3
 80005be:	1971      	adds	r1, r6, r5
 80005c0:	4608      	mov	r0, r1
 80005c2:	f7ff ffe3 	bl	800058c <selfrel_offset31>
 80005c6:	45a2      	cmp	sl, r4
 80005c8:	4683      	mov	fp, r0
 80005ca:	f105 0008 	add.w	r0, r5, #8
 80005ce:	4430      	add	r0, r6
 80005d0:	d009      	beq.n	80005e6 <search_EIT_table+0x46>
 80005d2:	f7ff ffdb 	bl	800058c <selfrel_offset31>
 80005d6:	45c3      	cmp	fp, r8
 80005d8:	f100 30ff 	add.w	r0, r0, #4294967295
 80005dc:	d805      	bhi.n	80005ea <search_EIT_table+0x4a>
 80005de:	4540      	cmp	r0, r8
 80005e0:	d209      	bcs.n	80005f6 <search_EIT_table+0x56>
 80005e2:	1c67      	adds	r7, r4, #1
 80005e4:	e7e5      	b.n	80005b2 <search_EIT_table+0x12>
 80005e6:	45c3      	cmp	fp, r8
 80005e8:	d905      	bls.n	80005f6 <search_EIT_table+0x56>
 80005ea:	42a7      	cmp	r7, r4
 80005ec:	d002      	beq.n	80005f4 <search_EIT_table+0x54>
 80005ee:	f104 39ff 	add.w	r9, r4, #4294967295
 80005f2:	e7de      	b.n	80005b2 <search_EIT_table+0x12>
 80005f4:	2100      	movs	r1, #0
 80005f6:	4608      	mov	r0, r1
 80005f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005fc:	4608      	mov	r0, r1
 80005fe:	4770      	bx	lr

08000600 <__gnu_unwind_get_pr_addr>:
 8000600:	2801      	cmp	r0, #1
 8000602:	d007      	beq.n	8000614 <__gnu_unwind_get_pr_addr+0x14>
 8000604:	2802      	cmp	r0, #2
 8000606:	d007      	beq.n	8000618 <__gnu_unwind_get_pr_addr+0x18>
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__gnu_unwind_get_pr_addr+0x1c>)
 800060a:	2800      	cmp	r0, #0
 800060c:	bf0c      	ite	eq
 800060e:	4618      	moveq	r0, r3
 8000610:	2000      	movne	r0, #0
 8000612:	4770      	bx	lr
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <__gnu_unwind_get_pr_addr+0x20>)
 8000616:	4770      	bx	lr
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <__gnu_unwind_get_pr_addr+0x24>)
 800061a:	4770      	bx	lr
 800061c:	08000d05 	.word	0x08000d05
 8000620:	08000d09 	.word	0x08000d09
 8000624:	08000d0d 	.word	0x08000d0d

08000628 <get_eit_entry>:
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <get_eit_entry+0x94>)
 800062c:	b083      	sub	sp, #12
 800062e:	4604      	mov	r4, r0
 8000630:	1e8d      	subs	r5, r1, #2
 8000632:	b37b      	cbz	r3, 8000694 <get_eit_entry+0x6c>
 8000634:	a901      	add	r1, sp, #4
 8000636:	4628      	mov	r0, r5
 8000638:	f3af 8000 	nop.w
 800063c:	b320      	cbz	r0, 8000688 <get_eit_entry+0x60>
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	462a      	mov	r2, r5
 8000642:	f7ff ffad 	bl	80005a0 <search_EIT_table>
 8000646:	4601      	mov	r1, r0
 8000648:	b1f0      	cbz	r0, 8000688 <get_eit_entry+0x60>
 800064a:	f7ff ff9f 	bl	800058c <selfrel_offset31>
 800064e:	684b      	ldr	r3, [r1, #4]
 8000650:	64a0      	str	r0, [r4, #72]	; 0x48
 8000652:	2b01      	cmp	r3, #1
 8000654:	d012      	beq.n	800067c <get_eit_entry+0x54>
 8000656:	2b00      	cmp	r3, #0
 8000658:	f101 0004 	add.w	r0, r1, #4
 800065c:	db20      	blt.n	80006a0 <get_eit_entry+0x78>
 800065e:	f7ff ff95 	bl	800058c <selfrel_offset31>
 8000662:	2300      	movs	r3, #0
 8000664:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000666:	6523      	str	r3, [r4, #80]	; 0x50
 8000668:	6803      	ldr	r3, [r0, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db1c      	blt.n	80006a8 <get_eit_entry+0x80>
 800066e:	f7ff ff8d 	bl	800058c <selfrel_offset31>
 8000672:	2300      	movs	r3, #0
 8000674:	6120      	str	r0, [r4, #16]
 8000676:	4618      	mov	r0, r3
 8000678:	b003      	add	sp, #12
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	2300      	movs	r3, #0
 800067e:	6123      	str	r3, [r4, #16]
 8000680:	2305      	movs	r3, #5
 8000682:	4618      	mov	r0, r3
 8000684:	b003      	add	sp, #12
 8000686:	bd30      	pop	{r4, r5, pc}
 8000688:	2300      	movs	r3, #0
 800068a:	6123      	str	r3, [r4, #16]
 800068c:	2309      	movs	r3, #9
 800068e:	4618      	mov	r0, r3
 8000690:	b003      	add	sp, #12
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	490a      	ldr	r1, [pc, #40]	; (80006c0 <get_eit_entry+0x98>)
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <get_eit_entry+0x9c>)
 8000698:	1a09      	subs	r1, r1, r0
 800069a:	10c9      	asrs	r1, r1, #3
 800069c:	9101      	str	r1, [sp, #4]
 800069e:	e7cf      	b.n	8000640 <get_eit_entry+0x18>
 80006a0:	2301      	movs	r3, #1
 80006a2:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006a4:	6523      	str	r3, [r4, #80]	; 0x50
 80006a6:	e7df      	b.n	8000668 <get_eit_entry+0x40>
 80006a8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006ac:	f7ff ffa8 	bl	8000600 <__gnu_unwind_get_pr_addr>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	6120      	str	r0, [r4, #16]
 80006b4:	bf14      	ite	ne
 80006b6:	2300      	movne	r3, #0
 80006b8:	2309      	moveq	r3, #9
 80006ba:	e7dc      	b.n	8000676 <get_eit_entry+0x4e>
 80006bc:	00000000 	.word	0x00000000
 80006c0:	0800412c 	.word	0x0800412c
 80006c4:	0800400c 	.word	0x0800400c

080006c8 <restore_non_core_regs>:
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	07da      	lsls	r2, r3, #31
 80006cc:	b510      	push	{r4, lr}
 80006ce:	4604      	mov	r4, r0
 80006d0:	d406      	bmi.n	80006e0 <restore_non_core_regs+0x18>
 80006d2:	079b      	lsls	r3, r3, #30
 80006d4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006d8:	d509      	bpl.n	80006ee <restore_non_core_regs+0x26>
 80006da:	f000 fc51 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D>
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	0759      	lsls	r1, r3, #29
 80006e2:	d509      	bpl.n	80006f8 <restore_non_core_regs+0x30>
 80006e4:	071a      	lsls	r2, r3, #28
 80006e6:	d50e      	bpl.n	8000706 <restore_non_core_regs+0x3e>
 80006e8:	06db      	lsls	r3, r3, #27
 80006ea:	d513      	bpl.n	8000714 <restore_non_core_regs+0x4c>
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	f000 fc3f 	bl	8000f70 <__gnu_Unwind_Restore_VFP>
 80006f2:	6823      	ldr	r3, [r4, #0]
 80006f4:	0759      	lsls	r1, r3, #29
 80006f6:	d4f5      	bmi.n	80006e4 <restore_non_core_regs+0x1c>
 80006f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006fc:	f000 fc48 	bl	8000f90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	071a      	lsls	r2, r3, #28
 8000704:	d4f0      	bmi.n	80006e8 <restore_non_core_regs+0x20>
 8000706:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800070a:	f000 fc49 	bl	8000fa0 <__gnu_Unwind_Restore_WMMXD>
 800070e:	6823      	ldr	r3, [r4, #0]
 8000710:	06db      	lsls	r3, r3, #27
 8000712:	d4eb      	bmi.n	80006ec <restore_non_core_regs+0x24>
 8000714:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071c:	f000 bc84 	b.w	8001028 <__gnu_Unwind_Restore_WMMXC>

08000720 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000720:	6803      	ldr	r3, [r0, #0]
 8000722:	b103      	cbz	r3, 8000726 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000724:	4403      	add	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <__gnu_unwind_24bit.isra.1>:
 800072c:	2009      	movs	r0, #9
 800072e:	4770      	bx	lr

08000730 <_Unwind_DebugHook>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <unwind_phase2>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	4604      	mov	r4, r0
 8000738:	460d      	mov	r5, r1
 800073a:	e008      	b.n	800074e <unwind_phase2+0x1a>
 800073c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800073e:	6163      	str	r3, [r4, #20]
 8000740:	462a      	mov	r2, r5
 8000742:	6923      	ldr	r3, [r4, #16]
 8000744:	4621      	mov	r1, r4
 8000746:	2001      	movs	r0, #1
 8000748:	4798      	blx	r3
 800074a:	2808      	cmp	r0, #8
 800074c:	d108      	bne.n	8000760 <unwind_phase2+0x2c>
 800074e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000750:	4620      	mov	r0, r4
 8000752:	f7ff ff69 	bl	8000628 <get_eit_entry>
 8000756:	4606      	mov	r6, r0
 8000758:	2800      	cmp	r0, #0
 800075a:	d0ef      	beq.n	800073c <unwind_phase2+0x8>
 800075c:	f003 fb89 	bl	8003e72 <abort>
 8000760:	2807      	cmp	r0, #7
 8000762:	d1fb      	bne.n	800075c <unwind_phase2+0x28>
 8000764:	4630      	mov	r0, r6
 8000766:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000768:	f7ff ffe2 	bl	8000730 <_Unwind_DebugHook>
 800076c:	1d28      	adds	r0, r5, #4
 800076e:	f000 fbf3 	bl	8000f58 <__restore_core_regs>
 8000772:	bf00      	nop

08000774 <unwind_phase2_forced>:
 8000774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000778:	1d0c      	adds	r4, r1, #4
 800077a:	4605      	mov	r5, r0
 800077c:	4692      	mov	sl, r2
 800077e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000780:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000784:	ae03      	add	r6, sp, #12
 8000786:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800078c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000794:	ac02      	add	r4, sp, #8
 8000796:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800079a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800079e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80007a2:	2300      	movs	r3, #0
 80007a4:	4628      	mov	r0, r5
 80007a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007a8:	6023      	str	r3, [r4, #0]
 80007aa:	f7ff ff3d 	bl	8000628 <get_eit_entry>
 80007ae:	f1ba 0f00 	cmp.w	sl, #0
 80007b2:	4607      	mov	r7, r0
 80007b4:	bf14      	ite	ne
 80007b6:	260a      	movne	r6, #10
 80007b8:	2609      	moveq	r6, #9
 80007ba:	b17f      	cbz	r7, 80007dc <unwind_phase2_forced+0x68>
 80007bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007be:	f046 0110 	orr.w	r1, r6, #16
 80007c2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007c6:	462a      	mov	r2, r5
 80007c8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ca:	2001      	movs	r0, #1
 80007cc:	462b      	mov	r3, r5
 80007ce:	47c0      	blx	r8
 80007d0:	bb78      	cbnz	r0, 8000832 <unwind_phase2_forced+0xbe>
 80007d2:	4638      	mov	r0, r7
 80007d4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007de:	616b      	str	r3, [r5, #20]
 80007e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007e4:	4621      	mov	r1, r4
 80007e6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007e8:	f003 fa30 	bl	8003c4c <memcpy>
 80007ec:	692b      	ldr	r3, [r5, #16]
 80007ee:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007f0:	4629      	mov	r1, r5
 80007f2:	4630      	mov	r0, r6
 80007f4:	4798      	blx	r3
 80007f6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007f8:	4682      	mov	sl, r0
 80007fa:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007fe:	4631      	mov	r1, r6
 8000800:	6463      	str	r3, [r4, #68]	; 0x44
 8000802:	462a      	mov	r2, r5
 8000804:	462b      	mov	r3, r5
 8000806:	2001      	movs	r0, #1
 8000808:	47c0      	blx	r8
 800080a:	b990      	cbnz	r0, 8000832 <unwind_phase2_forced+0xbe>
 800080c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000810:	a97a      	add	r1, sp, #488	; 0x1e8
 8000812:	4620      	mov	r0, r4
 8000814:	f003 fa1a 	bl	8003c4c <memcpy>
 8000818:	f1ba 0f08 	cmp.w	sl, #8
 800081c:	d106      	bne.n	800082c <unwind_phase2_forced+0xb8>
 800081e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000820:	4628      	mov	r0, r5
 8000822:	f7ff ff01 	bl	8000628 <get_eit_entry>
 8000826:	2609      	movs	r6, #9
 8000828:	4607      	mov	r7, r0
 800082a:	e7c6      	b.n	80007ba <unwind_phase2_forced+0x46>
 800082c:	f1ba 0f07 	cmp.w	sl, #7
 8000830:	d005      	beq.n	800083e <unwind_phase2_forced+0xca>
 8000832:	2709      	movs	r7, #9
 8000834:	4638      	mov	r0, r7
 8000836:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800083a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800083e:	4638      	mov	r0, r7
 8000840:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000842:	f7ff ff75 	bl	8000730 <_Unwind_DebugHook>
 8000846:	a803      	add	r0, sp, #12
 8000848:	f000 fb86 	bl	8000f58 <__restore_core_regs>

0800084c <_Unwind_GetCFA>:
 800084c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800084e:	4770      	bx	lr

08000850 <__gnu_Unwind_RaiseException>:
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000854:	640b      	str	r3, [r1, #64]	; 0x40
 8000856:	1d0e      	adds	r6, r1, #4
 8000858:	460f      	mov	r7, r1
 800085a:	4604      	mov	r4, r0
 800085c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085e:	b0f9      	sub	sp, #484	; 0x1e4
 8000860:	ad01      	add	r5, sp, #4
 8000862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000864:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000870:	f04f 36ff 	mov.w	r6, #4294967295
 8000874:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000878:	9600      	str	r6, [sp, #0]
 800087a:	e006      	b.n	800088a <__gnu_Unwind_RaiseException+0x3a>
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	466a      	mov	r2, sp
 8000880:	4621      	mov	r1, r4
 8000882:	4798      	blx	r3
 8000884:	2808      	cmp	r0, #8
 8000886:	4605      	mov	r5, r0
 8000888:	d108      	bne.n	800089c <__gnu_Unwind_RaiseException+0x4c>
 800088a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800088c:	4620      	mov	r0, r4
 800088e:	f7ff fecb 	bl	8000628 <get_eit_entry>
 8000892:	2800      	cmp	r0, #0
 8000894:	d0f2      	beq.n	800087c <__gnu_Unwind_RaiseException+0x2c>
 8000896:	2009      	movs	r0, #9
 8000898:	b079      	add	sp, #484	; 0x1e4
 800089a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800089c:	4668      	mov	r0, sp
 800089e:	f7ff ff13 	bl	80006c8 <restore_non_core_regs>
 80008a2:	2d06      	cmp	r5, #6
 80008a4:	d1f7      	bne.n	8000896 <__gnu_Unwind_RaiseException+0x46>
 80008a6:	4639      	mov	r1, r7
 80008a8:	4620      	mov	r0, r4
 80008aa:	f7ff ff43 	bl	8000734 <unwind_phase2>
 80008ae:	bf00      	nop

080008b0 <__gnu_Unwind_ForcedUnwind>:
 80008b0:	b430      	push	{r4, r5}
 80008b2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008b4:	60c1      	str	r1, [r0, #12]
 80008b6:	6182      	str	r2, [r0, #24]
 80008b8:	4619      	mov	r1, r3
 80008ba:	641d      	str	r5, [r3, #64]	; 0x40
 80008bc:	2200      	movs	r2, #0
 80008be:	bc30      	pop	{r4, r5}
 80008c0:	e758      	b.n	8000774 <unwind_phase2_forced>
 80008c2:	bf00      	nop

080008c4 <__gnu_Unwind_Resume>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	68c6      	ldr	r6, [r0, #12]
 80008c8:	6943      	ldr	r3, [r0, #20]
 80008ca:	640b      	str	r3, [r1, #64]	; 0x40
 80008cc:	b126      	cbz	r6, 80008d8 <__gnu_Unwind_Resume+0x14>
 80008ce:	2201      	movs	r2, #1
 80008d0:	f7ff ff50 	bl	8000774 <unwind_phase2_forced>
 80008d4:	f003 facd 	bl	8003e72 <abort>
 80008d8:	6903      	ldr	r3, [r0, #16]
 80008da:	460a      	mov	r2, r1
 80008dc:	4604      	mov	r4, r0
 80008de:	460d      	mov	r5, r1
 80008e0:	4601      	mov	r1, r0
 80008e2:	2002      	movs	r0, #2
 80008e4:	4798      	blx	r3
 80008e6:	2807      	cmp	r0, #7
 80008e8:	d007      	beq.n	80008fa <__gnu_Unwind_Resume+0x36>
 80008ea:	2808      	cmp	r0, #8
 80008ec:	d103      	bne.n	80008f6 <__gnu_Unwind_Resume+0x32>
 80008ee:	4629      	mov	r1, r5
 80008f0:	4620      	mov	r0, r4
 80008f2:	f7ff ff1f 	bl	8000734 <unwind_phase2>
 80008f6:	f003 fabc 	bl	8003e72 <abort>
 80008fa:	4630      	mov	r0, r6
 80008fc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008fe:	f7ff ff17 	bl	8000730 <_Unwind_DebugHook>
 8000902:	1d28      	adds	r0, r5, #4
 8000904:	f000 fb28 	bl	8000f58 <__restore_core_regs>

08000908 <__gnu_Unwind_Resume_or_Rethrow>:
 8000908:	68c2      	ldr	r2, [r0, #12]
 800090a:	b11a      	cbz	r2, 8000914 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800090c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800090e:	640a      	str	r2, [r1, #64]	; 0x40
 8000910:	2200      	movs	r2, #0
 8000912:	e72f      	b.n	8000774 <unwind_phase2_forced>
 8000914:	e79c      	b.n	8000850 <__gnu_Unwind_RaiseException>
 8000916:	bf00      	nop

08000918 <_Unwind_Complete>:
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <_Unwind_DeleteException>:
 800091c:	6883      	ldr	r3, [r0, #8]
 800091e:	b113      	cbz	r3, 8000926 <_Unwind_DeleteException+0xa>
 8000920:	4601      	mov	r1, r0
 8000922:	2001      	movs	r0, #1
 8000924:	4718      	bx	r3
 8000926:	4770      	bx	lr

08000928 <_Unwind_VRS_Get>:
 8000928:	b500      	push	{lr}
 800092a:	2904      	cmp	r1, #4
 800092c:	d807      	bhi.n	800093e <_Unwind_VRS_Get+0x16>
 800092e:	e8df f001 	tbb	[pc, r1]
 8000932:	0903      	.short	0x0903
 8000934:	0906      	.short	0x0906
 8000936:	09          	.byte	0x09
 8000937:	00          	.byte	0x00
 8000938:	b90b      	cbnz	r3, 800093e <_Unwind_VRS_Get+0x16>
 800093a:	2a0f      	cmp	r2, #15
 800093c:	d905      	bls.n	800094a <_Unwind_VRS_Get+0x22>
 800093e:	2002      	movs	r0, #2
 8000940:	f85d fb04 	ldr.w	pc, [sp], #4
 8000944:	2001      	movs	r0, #1
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
 800094a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800094e:	4618      	mov	r0, r3
 8000950:	6853      	ldr	r3, [r2, #4]
 8000952:	9a01      	ldr	r2, [sp, #4]
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	f85d fb04 	ldr.w	pc, [sp], #4
 800095a:	bf00      	nop

0800095c <_Unwind_GetGR>:
 800095c:	b510      	push	{r4, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	2300      	movs	r3, #0
 8000962:	ac03      	add	r4, sp, #12
 8000964:	460a      	mov	r2, r1
 8000966:	9400      	str	r4, [sp, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f7ff ffdd 	bl	8000928 <_Unwind_VRS_Get>
 800096e:	9803      	ldr	r0, [sp, #12]
 8000970:	b004      	add	sp, #16
 8000972:	bd10      	pop	{r4, pc}

08000974 <_Unwind_VRS_Set>:
 8000974:	b500      	push	{lr}
 8000976:	2904      	cmp	r1, #4
 8000978:	d807      	bhi.n	800098a <_Unwind_VRS_Set+0x16>
 800097a:	e8df f001 	tbb	[pc, r1]
 800097e:	0903      	.short	0x0903
 8000980:	0906      	.short	0x0906
 8000982:	09          	.byte	0x09
 8000983:	00          	.byte	0x00
 8000984:	b90b      	cbnz	r3, 800098a <_Unwind_VRS_Set+0x16>
 8000986:	2a0f      	cmp	r2, #15
 8000988:	d905      	bls.n	8000996 <_Unwind_VRS_Set+0x22>
 800098a:	2002      	movs	r0, #2
 800098c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000990:	2001      	movs	r0, #1
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	9901      	ldr	r1, [sp, #4]
 8000998:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800099c:	6809      	ldr	r1, [r1, #0]
 800099e:	6051      	str	r1, [r2, #4]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009a6:	bf00      	nop

080009a8 <_Unwind_SetGR>:
 80009a8:	b510      	push	{r4, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	ac04      	add	r4, sp, #16
 80009ae:	2300      	movs	r3, #0
 80009b0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009b4:	460a      	mov	r2, r1
 80009b6:	9400      	str	r4, [sp, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff ffdb 	bl	8000974 <_Unwind_VRS_Set>
 80009be:	b004      	add	sp, #16
 80009c0:	bd10      	pop	{r4, pc}
 80009c2:	bf00      	nop

080009c4 <__gnu_Unwind_Backtrace>:
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009c6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	1d15      	adds	r5, r2, #4
 80009cc:	4607      	mov	r7, r0
 80009ce:	460e      	mov	r6, r1
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009d6:	ac17      	add	r4, sp, #92	; 0x5c
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009e6:	f04f 35ff 	mov.w	r5, #4294967295
 80009ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009ee:	9516      	str	r5, [sp, #88]	; 0x58
 80009f0:	e010      	b.n	8000a14 <__gnu_Unwind_Backtrace+0x50>
 80009f2:	a816      	add	r0, sp, #88	; 0x58
 80009f4:	f7ff ffd8 	bl	80009a8 <_Unwind_SetGR>
 80009f8:	4631      	mov	r1, r6
 80009fa:	a816      	add	r0, sp, #88	; 0x58
 80009fc:	47b8      	blx	r7
 80009fe:	aa16      	add	r2, sp, #88	; 0x58
 8000a00:	4669      	mov	r1, sp
 8000a02:	b978      	cbnz	r0, 8000a24 <__gnu_Unwind_Backtrace+0x60>
 8000a04:	9b04      	ldr	r3, [sp, #16]
 8000a06:	2008      	movs	r0, #8
 8000a08:	4798      	blx	r3
 8000a0a:	2805      	cmp	r0, #5
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	d00a      	beq.n	8000a26 <__gnu_Unwind_Backtrace+0x62>
 8000a10:	2809      	cmp	r0, #9
 8000a12:	d007      	beq.n	8000a24 <__gnu_Unwind_Backtrace+0x60>
 8000a14:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a16:	4668      	mov	r0, sp
 8000a18:	f7ff fe06 	bl	8000628 <get_eit_entry>
 8000a1c:	466a      	mov	r2, sp
 8000a1e:	210c      	movs	r1, #12
 8000a20:	2800      	cmp	r0, #0
 8000a22:	d0e6      	beq.n	80009f2 <__gnu_Unwind_Backtrace+0x2e>
 8000a24:	2409      	movs	r4, #9
 8000a26:	a816      	add	r0, sp, #88	; 0x58
 8000a28:	f7ff fe4e 	bl	80006c8 <restore_non_core_regs>
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a34 <__gnu_unwind_pr_common>:
 8000a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a38:	460d      	mov	r5, r1
 8000a3a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a3c:	b08b      	sub	sp, #44	; 0x2c
 8000a3e:	1d0c      	adds	r4, r1, #4
 8000a40:	6809      	ldr	r1, [r1, #0]
 8000a42:	9107      	str	r1, [sp, #28]
 8000a44:	4691      	mov	r9, r2
 8000a46:	9408      	str	r4, [sp, #32]
 8000a48:	f000 0b03 	and.w	fp, r0, #3
 8000a4c:	461e      	mov	r6, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d160      	bne.n	8000b14 <__gnu_unwind_pr_common+0xe0>
 8000a52:	0209      	lsls	r1, r1, #8
 8000a54:	2303      	movs	r3, #3
 8000a56:	9107      	str	r1, [sp, #28]
 8000a58:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a62:	f1bb 0f02 	cmp.w	fp, #2
 8000a66:	bf08      	it	eq
 8000a68:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a6a:	f013 0301 	ands.w	r3, r3, #1
 8000a6e:	d140      	bne.n	8000af2 <__gnu_unwind_pr_common+0xbe>
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f000 0308 	and.w	r3, r0, #8
 8000a76:	9303      	str	r3, [sp, #12]
 8000a78:	f8d4 8000 	ldr.w	r8, [r4]
 8000a7c:	f1b8 0f00 	cmp.w	r8, #0
 8000a80:	d039      	beq.n	8000af6 <__gnu_unwind_pr_common+0xc2>
 8000a82:	2e02      	cmp	r6, #2
 8000a84:	d043      	beq.n	8000b0e <__gnu_unwind_pr_common+0xda>
 8000a86:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a8a:	8867      	ldrh	r7, [r4, #2]
 8000a8c:	3404      	adds	r4, #4
 8000a8e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a90:	f027 0a01 	bic.w	sl, r7, #1
 8000a94:	210f      	movs	r1, #15
 8000a96:	4648      	mov	r0, r9
 8000a98:	449a      	add	sl, r3
 8000a9a:	f7ff ff5f 	bl	800095c <_Unwind_GetGR>
 8000a9e:	4582      	cmp	sl, r0
 8000aa0:	d833      	bhi.n	8000b0a <__gnu_unwind_pr_common+0xd6>
 8000aa2:	f028 0301 	bic.w	r3, r8, #1
 8000aa6:	449a      	add	sl, r3
 8000aa8:	4550      	cmp	r0, sl
 8000aaa:	bf2c      	ite	cs
 8000aac:	2000      	movcs	r0, #0
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	007f      	lsls	r7, r7, #1
 8000ab2:	f007 0702 	and.w	r7, r7, #2
 8000ab6:	f008 0801 	and.w	r8, r8, #1
 8000aba:	ea47 0708 	orr.w	r7, r7, r8
 8000abe:	2f01      	cmp	r7, #1
 8000ac0:	d03e      	beq.n	8000b40 <__gnu_unwind_pr_common+0x10c>
 8000ac2:	d335      	bcc.n	8000b30 <__gnu_unwind_pr_common+0xfc>
 8000ac4:	2f02      	cmp	r7, #2
 8000ac6:	d11c      	bne.n	8000b02 <__gnu_unwind_pr_common+0xce>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ace:	9202      	str	r2, [sp, #8]
 8000ad0:	f1bb 0f00 	cmp.w	fp, #0
 8000ad4:	d176      	bne.n	8000bc4 <__gnu_unwind_pr_common+0x190>
 8000ad6:	b128      	cbz	r0, 8000ae4 <__gnu_unwind_pr_common+0xb0>
 8000ad8:	9903      	ldr	r1, [sp, #12]
 8000ada:	2900      	cmp	r1, #0
 8000adc:	d07e      	beq.n	8000bdc <__gnu_unwind_pr_common+0x1a8>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	f000 80a6 	beq.w	8000c30 <__gnu_unwind_pr_common+0x1fc>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db77      	blt.n	8000bd8 <__gnu_unwind_pr_common+0x1a4>
 8000ae8:	9b02      	ldr	r3, [sp, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000af0:	e7c2      	b.n	8000a78 <__gnu_unwind_pr_common+0x44>
 8000af2:	2300      	movs	r3, #0
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	2e02      	cmp	r6, #2
 8000af8:	dd3e      	ble.n	8000b78 <__gnu_unwind_pr_common+0x144>
 8000afa:	f7ff fe17 	bl	800072c <__gnu_unwind_24bit.isra.1>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d040      	beq.n	8000b84 <__gnu_unwind_pr_common+0x150>
 8000b02:	2009      	movs	r0, #9
 8000b04:	b00b      	add	sp, #44	; 0x2c
 8000b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e7d0      	b.n	8000ab0 <__gnu_unwind_pr_common+0x7c>
 8000b0e:	6867      	ldr	r7, [r4, #4]
 8000b10:	3408      	adds	r4, #8
 8000b12:	e7bc      	b.n	8000a8e <__gnu_unwind_pr_common+0x5a>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	dca3      	bgt.n	8000a60 <__gnu_unwind_pr_common+0x2c>
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	0409      	lsls	r1, r1, #16
 8000b1e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b22:	2302      	movs	r3, #2
 8000b24:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b28:	9107      	str	r1, [sp, #28]
 8000b2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b2e:	e797      	b.n	8000a60 <__gnu_unwind_pr_common+0x2c>
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d002      	beq.n	8000b3c <__gnu_unwind_pr_common+0x108>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	f040 80bd 	bne.w	8000cb6 <__gnu_unwind_pr_common+0x282>
 8000b3c:	3404      	adds	r4, #4
 8000b3e:	e79b      	b.n	8000a78 <__gnu_unwind_pr_common+0x44>
 8000b40:	f1bb 0f00 	cmp.w	fp, #0
 8000b44:	d125      	bne.n	8000b92 <__gnu_unwind_pr_common+0x15e>
 8000b46:	b1a8      	cbz	r0, 8000b74 <__gnu_unwind_pr_common+0x140>
 8000b48:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b4c:	1c99      	adds	r1, r3, #2
 8000b4e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b52:	d0d6      	beq.n	8000b02 <__gnu_unwind_pr_common+0xce>
 8000b54:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b58:	3301      	adds	r3, #1
 8000b5a:	9106      	str	r1, [sp, #24]
 8000b5c:	f000 80a3 	beq.w	8000ca6 <__gnu_unwind_pr_common+0x272>
 8000b60:	1d20      	adds	r0, r4, #4
 8000b62:	f7ff fddd 	bl	8000720 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b66:	ab06      	add	r3, sp, #24
 8000b68:	4601      	mov	r1, r0
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f3af 8000 	nop.w
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d177      	bne.n	8000c64 <__gnu_unwind_pr_common+0x230>
 8000b74:	3408      	adds	r4, #8
 8000b76:	e77f      	b.n	8000a78 <__gnu_unwind_pr_common+0x44>
 8000b78:	a907      	add	r1, sp, #28
 8000b7a:	4648      	mov	r0, r9
 8000b7c:	f000 faee 	bl	800115c <__gnu_unwind_execute>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1be      	bne.n	8000b02 <__gnu_unwind_pr_common+0xce>
 8000b84:	9b01      	ldr	r3, [sp, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d15c      	bne.n	8000c44 <__gnu_unwind_pr_common+0x210>
 8000b8a:	2008      	movs	r0, #8
 8000b8c:	b00b      	add	sp, #44	; 0x2c
 8000b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b92:	210d      	movs	r1, #13
 8000b94:	4648      	mov	r0, r9
 8000b96:	6a2f      	ldr	r7, [r5, #32]
 8000b98:	f7ff fee0 	bl	800095c <_Unwind_GetGR>
 8000b9c:	4287      	cmp	r7, r0
 8000b9e:	d1e9      	bne.n	8000b74 <__gnu_unwind_pr_common+0x140>
 8000ba0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	d1e6      	bne.n	8000b74 <__gnu_unwind_pr_common+0x140>
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f7ff fcf0 	bl	800058c <selfrel_offset31>
 8000bac:	210f      	movs	r1, #15
 8000bae:	4602      	mov	r2, r0
 8000bb0:	4648      	mov	r0, r9
 8000bb2:	f7ff fef9 	bl	80009a8 <_Unwind_SetGR>
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	462a      	mov	r2, r5
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f7ff fef4 	bl	80009a8 <_Unwind_SetGR>
 8000bc0:	2007      	movs	r0, #7
 8000bc2:	e79f      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000bc4:	210d      	movs	r1, #13
 8000bc6:	4648      	mov	r0, r9
 8000bc8:	6a2f      	ldr	r7, [r5, #32]
 8000bca:	f7ff fec7 	bl	800095c <_Unwind_GetGR>
 8000bce:	4287      	cmp	r7, r0
 8000bd0:	d058      	beq.n	8000c84 <__gnu_unwind_pr_common+0x250>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da87      	bge.n	8000ae8 <__gnu_unwind_pr_common+0xb4>
 8000bd8:	3404      	adds	r4, #4
 8000bda:	e785      	b.n	8000ae8 <__gnu_unwind_pr_common+0xb4>
 8000bdc:	9b02      	ldr	r3, [sp, #8]
 8000bde:	b33b      	cbz	r3, 8000c30 <__gnu_unwind_pr_common+0x1fc>
 8000be0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000be4:	1d27      	adds	r7, r4, #4
 8000be6:	f8cd b010 	str.w	fp, [sp, #16]
 8000bea:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bee:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000bf2:	9605      	str	r6, [sp, #20]
 8000bf4:	46a3      	mov	fp, r4
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	e002      	b.n	8000c00 <__gnu_unwind_pr_common+0x1cc>
 8000bfa:	45b2      	cmp	sl, r6
 8000bfc:	46b0      	mov	r8, r6
 8000bfe:	d016      	beq.n	8000c2e <__gnu_unwind_pr_common+0x1fa>
 8000c00:	4638      	mov	r0, r7
 8000c02:	9406      	str	r4, [sp, #24]
 8000c04:	f7ff fd8c 	bl	8000720 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c08:	ab06      	add	r3, sp, #24
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f3af 8000 	nop.w
 8000c14:	f108 0601 	add.w	r6, r8, #1
 8000c18:	3704      	adds	r7, #4
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	d0ed      	beq.n	8000bfa <__gnu_unwind_pr_common+0x1c6>
 8000c1e:	9b02      	ldr	r3, [sp, #8]
 8000c20:	9e05      	ldr	r6, [sp, #20]
 8000c22:	4543      	cmp	r3, r8
 8000c24:	465c      	mov	r4, fp
 8000c26:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c2a:	d1d2      	bne.n	8000bd2 <__gnu_unwind_pr_common+0x19e>
 8000c2c:	e000      	b.n	8000c30 <__gnu_unwind_pr_common+0x1fc>
 8000c2e:	465c      	mov	r4, fp
 8000c30:	4648      	mov	r0, r9
 8000c32:	210d      	movs	r1, #13
 8000c34:	f7ff fe92 	bl	800095c <_Unwind_GetGR>
 8000c38:	9b06      	ldr	r3, [sp, #24]
 8000c3a:	6228      	str	r0, [r5, #32]
 8000c3c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c3e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c40:	2006      	movs	r0, #6
 8000c42:	e75f      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000c44:	210f      	movs	r1, #15
 8000c46:	4648      	mov	r0, r9
 8000c48:	f7ff fe88 	bl	800095c <_Unwind_GetGR>
 8000c4c:	210e      	movs	r1, #14
 8000c4e:	4602      	mov	r2, r0
 8000c50:	4648      	mov	r0, r9
 8000c52:	f7ff fea9 	bl	80009a8 <_Unwind_SetGR>
 8000c56:	4648      	mov	r0, r9
 8000c58:	4a29      	ldr	r2, [pc, #164]	; (8000d00 <__gnu_unwind_pr_common+0x2cc>)
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f7ff fea4 	bl	80009a8 <_Unwind_SetGR>
 8000c60:	2007      	movs	r0, #7
 8000c62:	e74f      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000c64:	4607      	mov	r7, r0
 8000c66:	210d      	movs	r1, #13
 8000c68:	4648      	mov	r0, r9
 8000c6a:	f7ff fe77 	bl	800095c <_Unwind_GetGR>
 8000c6e:	2f02      	cmp	r7, #2
 8000c70:	6228      	str	r0, [r5, #32]
 8000c72:	d11d      	bne.n	8000cb0 <__gnu_unwind_pr_common+0x27c>
 8000c74:	462b      	mov	r3, r5
 8000c76:	9a06      	ldr	r2, [sp, #24]
 8000c78:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c7c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c7e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c80:	2006      	movs	r0, #6
 8000c82:	e73f      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000c84:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c86:	429c      	cmp	r4, r3
 8000c88:	d1a3      	bne.n	8000bd2 <__gnu_unwind_pr_common+0x19e>
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	18a3      	adds	r3, r4, r2
 8000c90:	9902      	ldr	r1, [sp, #8]
 8000c92:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c94:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c96:	632a      	str	r2, [r5, #48]	; 0x30
 8000c98:	636b      	str	r3, [r5, #52]	; 0x34
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	42bb      	cmp	r3, r7
 8000c9e:	db1d      	blt.n	8000cdc <__gnu_unwind_pr_common+0x2a8>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	e720      	b.n	8000ae8 <__gnu_unwind_pr_common+0xb4>
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	210d      	movs	r1, #13
 8000caa:	f7ff fe57 	bl	800095c <_Unwind_GetGR>
 8000cae:	6228      	str	r0, [r5, #32]
 8000cb0:	9b06      	ldr	r3, [sp, #24]
 8000cb2:	626b      	str	r3, [r5, #36]	; 0x24
 8000cb4:	e7e3      	b.n	8000c7e <__gnu_unwind_pr_common+0x24a>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f7ff fc68 	bl	800058c <selfrel_offset31>
 8000cbc:	3404      	adds	r4, #4
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	f43f af1a 	beq.w	8000b02 <__gnu_unwind_pr_common+0xce>
 8000cce:	4648      	mov	r0, r9
 8000cd0:	4632      	mov	r2, r6
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f7ff fe68 	bl	80009a8 <_Unwind_SetGR>
 8000cd8:	2007      	movs	r0, #7
 8000cda:	e713      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	3001      	adds	r0, #1
 8000ce0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ce4:	f7ff fc52 	bl	800058c <selfrel_offset31>
 8000ce8:	210f      	movs	r1, #15
 8000cea:	4602      	mov	r2, r0
 8000cec:	4648      	mov	r0, r9
 8000cee:	f7ff fe5b 	bl	80009a8 <_Unwind_SetGR>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	462a      	mov	r2, r5
 8000cf6:	4639      	mov	r1, r7
 8000cf8:	f7ff fe56 	bl	80009a8 <_Unwind_SetGR>
 8000cfc:	2007      	movs	r0, #7
 8000cfe:	e701      	b.n	8000b04 <__gnu_unwind_pr_common+0xd0>
 8000d00:	00000000 	.word	0x00000000

08000d04 <__aeabi_unwind_cpp_pr0>:
 8000d04:	2300      	movs	r3, #0
 8000d06:	e695      	b.n	8000a34 <__gnu_unwind_pr_common>

08000d08 <__aeabi_unwind_cpp_pr1>:
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e693      	b.n	8000a34 <__gnu_unwind_pr_common>

08000d0c <__aeabi_unwind_cpp_pr2>:
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e691      	b.n	8000a34 <__gnu_unwind_pr_common>

08000d10 <_Unwind_VRS_Pop>:
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	4604      	mov	r4, r0
 8000d14:	b0c5      	sub	sp, #276	; 0x114
 8000d16:	2904      	cmp	r1, #4
 8000d18:	d80d      	bhi.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000d1a:	e8df f001 	tbb	[pc, r1]
 8000d1e:	0353      	.short	0x0353
 8000d20:	310c      	.short	0x310c
 8000d22:	0f          	.byte	0x0f
 8000d23:	00          	.byte	0x00
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d2a:	b295      	uxth	r5, r2
 8000d2c:	d162      	bne.n	8000df4 <_Unwind_VRS_Pop+0xe4>
 8000d2e:	1972      	adds	r2, r6, r5
 8000d30:	2a10      	cmp	r2, #16
 8000d32:	f240 809b 	bls.w	8000e6c <_Unwind_VRS_Pop+0x15c>
 8000d36:	2002      	movs	r0, #2
 8000d38:	b045      	add	sp, #276	; 0x114
 8000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1fa      	bne.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000d40:	2a10      	cmp	r2, #16
 8000d42:	d8f8      	bhi.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	06d8      	lsls	r0, r3, #27
 8000d48:	f100 80c6 	bmi.w	8000ed8 <_Unwind_VRS_Pop+0x1c8>
 8000d4c:	ae22      	add	r6, sp, #136	; 0x88
 8000d4e:	4630      	mov	r0, r6
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	f000 f973 	bl	800103c <__gnu_Unwind_Save_WMMXC>
 8000d56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d58:	9a01      	ldr	r2, [sp, #4]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2501      	movs	r5, #1
 8000d5e:	fa05 f103 	lsl.w	r1, r5, r3
 8000d62:	4211      	tst	r1, r2
 8000d64:	d003      	beq.n	8000d6e <_Unwind_VRS_Pop+0x5e>
 8000d66:	6801      	ldr	r1, [r0, #0]
 8000d68:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d6c:	3004      	adds	r0, #4
 8000d6e:	3301      	adds	r3, #1
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d1f4      	bne.n	8000d5e <_Unwind_VRS_Pop+0x4e>
 8000d74:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d76:	4630      	mov	r0, r6
 8000d78:	f000 f956 	bl	8001028 <__gnu_Unwind_Restore_WMMXC>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7db      	b.n	8000d38 <_Unwind_VRS_Pop+0x28>
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d1d8      	bne.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000d84:	0c15      	lsrs	r5, r2, #16
 8000d86:	b297      	uxth	r7, r2
 8000d88:	19eb      	adds	r3, r5, r7
 8000d8a:	2b10      	cmp	r3, #16
 8000d8c:	d8d3      	bhi.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	071e      	lsls	r6, r3, #28
 8000d92:	f100 80b5 	bmi.w	8000f00 <_Unwind_VRS_Pop+0x1f0>
 8000d96:	ae22      	add	r6, sp, #136	; 0x88
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f000 f923 	bl	8000fe4 <__gnu_Unwind_Save_WMMXD>
 8000d9e:	00ed      	lsls	r5, r5, #3
 8000da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000da2:	b14f      	cbz	r7, 8000db8 <_Unwind_VRS_Pop+0xa8>
 8000da4:	3d04      	subs	r5, #4
 8000da6:	1971      	adds	r1, r6, r5
 8000da8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8000db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8000db4:	4283      	cmp	r3, r0
 8000db6:	d1f9      	bne.n	8000dac <_Unwind_VRS_Pop+0x9c>
 8000db8:	4630      	mov	r0, r6
 8000dba:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dbc:	f000 f8f0 	bl	8000fa0 <__gnu_Unwind_Restore_WMMXD>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e7b9      	b.n	8000d38 <_Unwind_VRS_Pop+0x28>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1b6      	bne.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000dc8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dca:	b297      	uxth	r7, r2
 8000dcc:	1d20      	adds	r0, r4, #4
 8000dce:	2601      	movs	r6, #1
 8000dd0:	fa06 f103 	lsl.w	r1, r6, r3
 8000dd4:	4239      	tst	r1, r7
 8000dd6:	f103 0301 	add.w	r3, r3, #1
 8000dda:	d002      	beq.n	8000de2 <_Unwind_VRS_Pop+0xd2>
 8000ddc:	6829      	ldr	r1, [r5, #0]
 8000dde:	6001      	str	r1, [r0, #0]
 8000de0:	3504      	adds	r5, #4
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	f100 0004 	add.w	r0, r0, #4
 8000de8:	d1f2      	bne.n	8000dd0 <_Unwind_VRS_Pop+0xc0>
 8000dea:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000dee:	d13b      	bne.n	8000e68 <_Unwind_VRS_Pop+0x158>
 8000df0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000df2:	e7a1      	b.n	8000d38 <_Unwind_VRS_Pop+0x28>
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	d19e      	bne.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000df8:	1977      	adds	r7, r6, r5
 8000dfa:	2f20      	cmp	r7, #32
 8000dfc:	d89b      	bhi.n	8000d36 <_Unwind_VRS_Pop+0x26>
 8000dfe:	2e0f      	cmp	r6, #15
 8000e00:	d966      	bls.n	8000ed0 <_Unwind_VRS_Pop+0x1c0>
 8000e02:	462f      	mov	r7, r5
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d13a      	bne.n	8000e7e <_Unwind_VRS_Pop+0x16e>
 8000e08:	462a      	mov	r2, r5
 8000e0a:	2700      	movs	r7, #0
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e10:	dd72      	ble.n	8000ef8 <_Unwind_VRS_Pop+0x1e8>
 8000e12:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e16:	4601      	mov	r1, r0
 8000e18:	a844      	add	r0, sp, #272	; 0x110
 8000e1a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e1e:	388c      	subs	r0, #140	; 0x8c
 8000e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e24:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d1f9      	bne.n	8000e20 <_Unwind_VRS_Pop+0x110>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	b197      	cbz	r7, 8000e56 <_Unwind_VRS_Pop+0x146>
 8000e30:	2e10      	cmp	r6, #16
 8000e32:	4632      	mov	r2, r6
 8000e34:	a944      	add	r1, sp, #272	; 0x110
 8000e36:	bf38      	it	cc
 8000e38:	2210      	movcc	r2, #16
 8000e3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e3e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e42:	0079      	lsls	r1, r7, #1
 8000e44:	3a04      	subs	r2, #4
 8000e46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e4a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e4e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e52:	4288      	cmp	r0, r1
 8000e54:	d1f9      	bne.n	8000e4a <_Unwind_VRS_Pop+0x13a>
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d048      	beq.n	8000eec <_Unwind_VRS_Pop+0x1dc>
 8000e5a:	2e0f      	cmp	r6, #15
 8000e5c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e5e:	d933      	bls.n	8000ec8 <_Unwind_VRS_Pop+0x1b8>
 8000e60:	b117      	cbz	r7, 8000e68 <_Unwind_VRS_Pop+0x158>
 8000e62:	a802      	add	r0, sp, #8
 8000e64:	f000 f894 	bl	8000f90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	e765      	b.n	8000d38 <_Unwind_VRS_Pop+0x28>
 8000e6c:	2e0f      	cmp	r6, #15
 8000e6e:	f63f af62 	bhi.w	8000d36 <_Unwind_VRS_Pop+0x26>
 8000e72:	2700      	movs	r7, #0
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	07d1      	lsls	r1, r2, #31
 8000e78:	d417      	bmi.n	8000eaa <_Unwind_VRS_Pop+0x19a>
 8000e7a:	2f00      	cmp	r7, #0
 8000e7c:	d060      	beq.n	8000f40 <_Unwind_VRS_Pop+0x230>
 8000e7e:	6822      	ldr	r2, [r4, #0]
 8000e80:	0751      	lsls	r1, r2, #29
 8000e82:	d445      	bmi.n	8000f10 <_Unwind_VRS_Pop+0x200>
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d04d      	beq.n	8000f24 <_Unwind_VRS_Pop+0x214>
 8000e88:	2e0f      	cmp	r6, #15
 8000e8a:	d806      	bhi.n	8000e9a <_Unwind_VRS_Pop+0x18a>
 8000e8c:	a822      	add	r0, sp, #136	; 0x88
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f000 f87a 	bl	8000f88 <__gnu_Unwind_Save_VFP_D>
 8000e94:	9b01      	ldr	r3, [sp, #4]
 8000e96:	2f00      	cmp	r7, #0
 8000e98:	d0b6      	beq.n	8000e08 <_Unwind_VRS_Pop+0xf8>
 8000e9a:	a802      	add	r0, sp, #8
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	f000 f87b 	bl	8000f98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea2:	9b01      	ldr	r3, [sp, #4]
 8000ea4:	f1c6 0210 	rsb	r2, r6, #16
 8000ea8:	e7b0      	b.n	8000e0c <_Unwind_VRS_Pop+0xfc>
 8000eaa:	f022 0101 	bic.w	r1, r2, #1
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	6021      	str	r1, [r4, #0]
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	d03b      	beq.n	8000f30 <_Unwind_VRS_Pop+0x220>
 8000eb8:	f022 0203 	bic.w	r2, r2, #3
 8000ebc:	f840 2b48 	str.w	r2, [r0], #72
 8000ec0:	f000 f85a 	bl	8000f78 <__gnu_Unwind_Save_VFP>
 8000ec4:	9b01      	ldr	r3, [sp, #4]
 8000ec6:	e7d8      	b.n	8000e7a <_Unwind_VRS_Pop+0x16a>
 8000ec8:	a822      	add	r0, sp, #136	; 0x88
 8000eca:	f000 f859 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D>
 8000ece:	e7c7      	b.n	8000e60 <_Unwind_VRS_Pop+0x150>
 8000ed0:	2f10      	cmp	r7, #16
 8000ed2:	d9ce      	bls.n	8000e72 <_Unwind_VRS_Pop+0x162>
 8000ed4:	3f10      	subs	r7, #16
 8000ed6:	e7cd      	b.n	8000e74 <_Unwind_VRS_Pop+0x164>
 8000ed8:	f023 0310 	bic.w	r3, r3, #16
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	f000 f8aa 	bl	800103c <__gnu_Unwind_Save_WMMXC>
 8000ee8:	9a01      	ldr	r2, [sp, #4]
 8000eea:	e72f      	b.n	8000d4c <_Unwind_VRS_Pop+0x3c>
 8000eec:	3104      	adds	r1, #4
 8000eee:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ef0:	a822      	add	r0, sp, #136	; 0x88
 8000ef2:	f000 f83d 	bl	8000f70 <__gnu_Unwind_Restore_VFP>
 8000ef6:	e7b7      	b.n	8000e68 <_Unwind_VRS_Pop+0x158>
 8000ef8:	2f00      	cmp	r7, #0
 8000efa:	d199      	bne.n	8000e30 <_Unwind_VRS_Pop+0x120>
 8000efc:	4601      	mov	r1, r0
 8000efe:	e7aa      	b.n	8000e56 <_Unwind_VRS_Pop+0x146>
 8000f00:	f023 0308 	bic.w	r3, r3, #8
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f0a:	f000 f86b 	bl	8000fe4 <__gnu_Unwind_Save_WMMXD>
 8000f0e:	e742      	b.n	8000d96 <_Unwind_VRS_Pop+0x86>
 8000f10:	4620      	mov	r0, r4
 8000f12:	f022 0204 	bic.w	r2, r2, #4
 8000f16:	f840 2bd0 	str.w	r2, [r0], #208
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	f000 f83c 	bl	8000f98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f20:	9b01      	ldr	r3, [sp, #4]
 8000f22:	e7af      	b.n	8000e84 <_Unwind_VRS_Pop+0x174>
 8000f24:	a822      	add	r0, sp, #136	; 0x88
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	f000 f826 	bl	8000f78 <__gnu_Unwind_Save_VFP>
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	e7b9      	b.n	8000ea4 <_Unwind_VRS_Pop+0x194>
 8000f30:	f041 0102 	orr.w	r1, r1, #2
 8000f34:	f840 1b48 	str.w	r1, [r0], #72
 8000f38:	f000 f826 	bl	8000f88 <__gnu_Unwind_Save_VFP_D>
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	e79c      	b.n	8000e7a <_Unwind_VRS_Pop+0x16a>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d003      	beq.n	8000f4c <_Unwind_VRS_Pop+0x23c>
 8000f44:	2e0f      	cmp	r6, #15
 8000f46:	f63f af5f 	bhi.w	8000e08 <_Unwind_VRS_Pop+0xf8>
 8000f4a:	e79f      	b.n	8000e8c <_Unwind_VRS_Pop+0x17c>
 8000f4c:	a822      	add	r0, sp, #136	; 0x88
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f000 f812 	bl	8000f78 <__gnu_Unwind_Save_VFP>
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	e757      	b.n	8000e08 <_Unwind_VRS_Pop+0xf8>

08000f58 <__restore_core_regs>:
 8000f58:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f5c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f60:	469c      	mov	ip, r3
 8000f62:	46a6      	mov	lr, r4
 8000f64:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f68:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f6c:	46e5      	mov	sp, ip
 8000f6e:	bd00      	pop	{pc}

08000f70 <__gnu_Unwind_Restore_VFP>:
 8000f70:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_VFP>:
 8000f78:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gnu_Unwind_Restore_VFP_D>:
 8000f80:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__gnu_Unwind_Save_VFP_D>:
 8000f88:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f90:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f98:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <__gnu_Unwind_Restore_WMMXD>:
 8000fa0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fa4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000fa8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000fac:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fb0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fb4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fb8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fbc:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fc0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fc4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fc8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fcc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fd0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fd4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fd8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fdc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__gnu_Unwind_Save_WMMXD>:
 8000fe4:	ece0 0102 	stfe	f0, [r0], #8
 8000fe8:	ece0 1102 	stfe	f1, [r0], #8
 8000fec:	ece0 2102 	stfe	f2, [r0], #8
 8000ff0:	ece0 3102 	stfe	f3, [r0], #8
 8000ff4:	ece0 4102 	stfe	f4, [r0], #8
 8000ff8:	ece0 5102 	stfe	f5, [r0], #8
 8000ffc:	ece0 6102 	stfe	f6, [r0], #8
 8001000:	ece0 7102 	stfe	f7, [r0], #8
 8001004:	ece0 8102 	stfp	f0, [r0], #8
 8001008:	ece0 9102 	stfp	f1, [r0], #8
 800100c:	ece0 a102 	stfp	f2, [r0], #8
 8001010:	ece0 b102 	stfp	f3, [r0], #8
 8001014:	ece0 c102 	stfp	f4, [r0], #8
 8001018:	ece0 d102 	stfp	f5, [r0], #8
 800101c:	ece0 e102 	stfp	f6, [r0], #8
 8001020:	ece0 f102 	stfp	f7, [r0], #8
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__gnu_Unwind_Restore_WMMXC>:
 8001028:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800102c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001030:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001034:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__gnu_Unwind_Save_WMMXC>:
 800103c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001040:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001044:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001048:	fca0 b101 	stc2	1, cr11, [r0], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_Unwind_RaiseException>:
 8001050:	46ec      	mov	ip, sp
 8001052:	b500      	push	{lr}
 8001054:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001058:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001064:	a901      	add	r1, sp, #4
 8001066:	f7ff fbf3 	bl	8000850 <__gnu_Unwind_RaiseException>
 800106a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800106e:	b012      	add	sp, #72	; 0x48
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <_Unwind_Resume>:
 8001074:	46ec      	mov	ip, sp
 8001076:	b500      	push	{lr}
 8001078:	e92d 5000 	stmdb	sp!, {ip, lr}
 800107c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001088:	a901      	add	r1, sp, #4
 800108a:	f7ff fc1b 	bl	80008c4 <__gnu_Unwind_Resume>
 800108e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001092:	b012      	add	sp, #72	; 0x48
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <_Unwind_Resume_or_Rethrow>:
 8001098:	46ec      	mov	ip, sp
 800109a:	b500      	push	{lr}
 800109c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	f7ff fc2b 	bl	8000908 <__gnu_Unwind_Resume_or_Rethrow>
 80010b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010b6:	b012      	add	sp, #72	; 0x48
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <_Unwind_ForcedUnwind>:
 80010bc:	46ec      	mov	ip, sp
 80010be:	b500      	push	{lr}
 80010c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d0:	ab01      	add	r3, sp, #4
 80010d2:	f7ff fbed 	bl	80008b0 <__gnu_Unwind_ForcedUnwind>
 80010d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010da:	b012      	add	sp, #72	; 0x48
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <_Unwind_Backtrace>:
 80010e0:	46ec      	mov	ip, sp
 80010e2:	b500      	push	{lr}
 80010e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010f4:	aa01      	add	r2, sp, #4
 80010f6:	f7ff fc65 	bl	80009c4 <__gnu_Unwind_Backtrace>
 80010fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010fe:	b012      	add	sp, #72	; 0x48
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <next_unwind_byte>:
 8001104:	7a02      	ldrb	r2, [r0, #8]
 8001106:	b91a      	cbnz	r2, 8001110 <next_unwind_byte+0xc>
 8001108:	7a43      	ldrb	r3, [r0, #9]
 800110a:	b943      	cbnz	r3, 800111e <next_unwind_byte+0x1a>
 800110c:	20b0      	movs	r0, #176	; 0xb0
 800110e:	4770      	bx	lr
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	3a01      	subs	r2, #1
 8001114:	7202      	strb	r2, [r0, #8]
 8001116:	021a      	lsls	r2, r3, #8
 8001118:	6002      	str	r2, [r0, #0]
 800111a:	0e18      	lsrs	r0, r3, #24
 800111c:	4770      	bx	lr
 800111e:	6842      	ldr	r2, [r0, #4]
 8001120:	3b01      	subs	r3, #1
 8001122:	b410      	push	{r4}
 8001124:	7243      	strb	r3, [r0, #9]
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	2103      	movs	r1, #3
 800112a:	1d14      	adds	r4, r2, #4
 800112c:	7201      	strb	r1, [r0, #8]
 800112e:	021a      	lsls	r2, r3, #8
 8001130:	6044      	str	r4, [r0, #4]
 8001132:	6002      	str	r2, [r0, #0]
 8001134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001138:	0e18      	lsrs	r0, r3, #24
 800113a:	4770      	bx	lr

0800113c <_Unwind_GetGR.constprop.0>:
 800113c:	b500      	push	{lr}
 800113e:	b085      	sub	sp, #20
 8001140:	aa03      	add	r2, sp, #12
 8001142:	2300      	movs	r3, #0
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	220c      	movs	r2, #12
 800114a:	f7ff fbed 	bl	8000928 <_Unwind_VRS_Get>
 800114e:	9803      	ldr	r0, [sp, #12]
 8001150:	b005      	add	sp, #20
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop

08001158 <unwind_UCB_from_context>:
 8001158:	e7f0      	b.n	800113c <_Unwind_GetGR.constprop.0>
 800115a:	bf00      	nop

0800115c <__gnu_unwind_execute>:
 800115c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001160:	4606      	mov	r6, r0
 8001162:	b085      	sub	sp, #20
 8001164:	460f      	mov	r7, r1
 8001166:	f04f 0800 	mov.w	r8, #0
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff ffca 	bl	8001104 <next_unwind_byte>
 8001170:	28b0      	cmp	r0, #176	; 0xb0
 8001172:	4604      	mov	r4, r0
 8001174:	d023      	beq.n	80011be <__gnu_unwind_execute+0x62>
 8001176:	0605      	lsls	r5, r0, #24
 8001178:	d427      	bmi.n	80011ca <__gnu_unwind_execute+0x6e>
 800117a:	2300      	movs	r3, #0
 800117c:	f10d 090c 	add.w	r9, sp, #12
 8001180:	4619      	mov	r1, r3
 8001182:	0085      	lsls	r5, r0, #2
 8001184:	220d      	movs	r2, #13
 8001186:	f8cd 9000 	str.w	r9, [sp]
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff fbcc 	bl	8000928 <_Unwind_VRS_Get>
 8001190:	b2ed      	uxtb	r5, r5
 8001192:	9b03      	ldr	r3, [sp, #12]
 8001194:	f8cd 9000 	str.w	r9, [sp]
 8001198:	0660      	lsls	r0, r4, #25
 800119a:	f105 0504 	add.w	r5, r5, #4
 800119e:	bf4c      	ite	mi
 80011a0:	1b5d      	submi	r5, r3, r5
 80011a2:	18ed      	addpl	r5, r5, r3
 80011a4:	2300      	movs	r3, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	220d      	movs	r2, #13
 80011aa:	4630      	mov	r0, r6
 80011ac:	9503      	str	r5, [sp, #12]
 80011ae:	f7ff fbe1 	bl	8000974 <_Unwind_VRS_Set>
 80011b2:	4638      	mov	r0, r7
 80011b4:	f7ff ffa6 	bl	8001104 <next_unwind_byte>
 80011b8:	28b0      	cmp	r0, #176	; 0xb0
 80011ba:	4604      	mov	r4, r0
 80011bc:	d1db      	bne.n	8001176 <__gnu_unwind_execute+0x1a>
 80011be:	f1b8 0f00 	cmp.w	r8, #0
 80011c2:	f000 8095 	beq.w	80012f0 <__gnu_unwind_execute+0x194>
 80011c6:	2000      	movs	r0, #0
 80011c8:	e01c      	b.n	8001204 <__gnu_unwind_execute+0xa8>
 80011ca:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011ce:	2b80      	cmp	r3, #128	; 0x80
 80011d0:	d05d      	beq.n	800128e <__gnu_unwind_execute+0x132>
 80011d2:	2b90      	cmp	r3, #144	; 0x90
 80011d4:	d019      	beq.n	800120a <__gnu_unwind_execute+0xae>
 80011d6:	2ba0      	cmp	r3, #160	; 0xa0
 80011d8:	d02c      	beq.n	8001234 <__gnu_unwind_execute+0xd8>
 80011da:	2bb0      	cmp	r3, #176	; 0xb0
 80011dc:	d03f      	beq.n	800125e <__gnu_unwind_execute+0x102>
 80011de:	2bc0      	cmp	r3, #192	; 0xc0
 80011e0:	d06c      	beq.n	80012bc <__gnu_unwind_execute+0x160>
 80011e2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011e6:	2bd0      	cmp	r3, #208	; 0xd0
 80011e8:	d10b      	bne.n	8001202 <__gnu_unwind_execute+0xa6>
 80011ea:	f000 0207 	and.w	r2, r0, #7
 80011ee:	3201      	adds	r2, #1
 80011f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011f4:	2305      	movs	r3, #5
 80011f6:	2101      	movs	r1, #1
 80011f8:	4630      	mov	r0, r6
 80011fa:	f7ff fd89 	bl	8000d10 <_Unwind_VRS_Pop>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0b3      	beq.n	800116a <__gnu_unwind_execute+0xe>
 8001202:	2009      	movs	r0, #9
 8001204:	b005      	add	sp, #20
 8001206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120a:	f000 030d 	and.w	r3, r0, #13
 800120e:	2b0d      	cmp	r3, #13
 8001210:	d0f7      	beq.n	8001202 <__gnu_unwind_execute+0xa6>
 8001212:	ad03      	add	r5, sp, #12
 8001214:	2300      	movs	r3, #0
 8001216:	f000 020f 	and.w	r2, r0, #15
 800121a:	4619      	mov	r1, r3
 800121c:	9500      	str	r5, [sp, #0]
 800121e:	4630      	mov	r0, r6
 8001220:	f7ff fb82 	bl	8000928 <_Unwind_VRS_Get>
 8001224:	2300      	movs	r3, #0
 8001226:	9500      	str	r5, [sp, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	220d      	movs	r2, #13
 800122c:	4630      	mov	r0, r6
 800122e:	f7ff fba1 	bl	8000974 <_Unwind_VRS_Set>
 8001232:	e79a      	b.n	800116a <__gnu_unwind_execute+0xe>
 8001234:	43c2      	mvns	r2, r0
 8001236:	f002 0307 	and.w	r3, r2, #7
 800123a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800123e:	411a      	asrs	r2, r3
 8001240:	0701      	lsls	r1, r0, #28
 8001242:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	bf48      	it	mi
 800124c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001250:	4619      	mov	r1, r3
 8001252:	4630      	mov	r0, r6
 8001254:	f7ff fd5c 	bl	8000d10 <_Unwind_VRS_Pop>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1d2      	bne.n	8001202 <__gnu_unwind_execute+0xa6>
 800125c:	e785      	b.n	800116a <__gnu_unwind_execute+0xe>
 800125e:	28b1      	cmp	r0, #177	; 0xb1
 8001260:	d057      	beq.n	8001312 <__gnu_unwind_execute+0x1b6>
 8001262:	28b2      	cmp	r0, #178	; 0xb2
 8001264:	d068      	beq.n	8001338 <__gnu_unwind_execute+0x1dc>
 8001266:	28b3      	cmp	r0, #179	; 0xb3
 8001268:	f000 8095 	beq.w	8001396 <__gnu_unwind_execute+0x23a>
 800126c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001270:	2bb4      	cmp	r3, #180	; 0xb4
 8001272:	d0c6      	beq.n	8001202 <__gnu_unwind_execute+0xa6>
 8001274:	f000 0207 	and.w	r2, r0, #7
 8001278:	3201      	adds	r2, #1
 800127a:	2301      	movs	r3, #1
 800127c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001280:	4619      	mov	r1, r3
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fd44 	bl	8000d10 <_Unwind_VRS_Pop>
 8001288:	2800      	cmp	r0, #0
 800128a:	d1ba      	bne.n	8001202 <__gnu_unwind_execute+0xa6>
 800128c:	e76d      	b.n	800116a <__gnu_unwind_execute+0xe>
 800128e:	4638      	mov	r0, r7
 8001290:	f7ff ff38 	bl	8001104 <next_unwind_byte>
 8001294:	0224      	lsls	r4, r4, #8
 8001296:	4304      	orrs	r4, r0
 8001298:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800129c:	d0b1      	beq.n	8001202 <__gnu_unwind_execute+0xa6>
 800129e:	0124      	lsls	r4, r4, #4
 80012a0:	2300      	movs	r3, #0
 80012a2:	b2a2      	uxth	r2, r4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4630      	mov	r0, r6
 80012a8:	f7ff fd32 	bl	8000d10 <_Unwind_VRS_Pop>
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d1a8      	bne.n	8001202 <__gnu_unwind_execute+0xa6>
 80012b0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012b4:	bf18      	it	ne
 80012b6:	f04f 0801 	movne.w	r8, #1
 80012ba:	e756      	b.n	800116a <__gnu_unwind_execute+0xe>
 80012bc:	28c6      	cmp	r0, #198	; 0xc6
 80012be:	d07d      	beq.n	80013bc <__gnu_unwind_execute+0x260>
 80012c0:	28c7      	cmp	r0, #199	; 0xc7
 80012c2:	f000 8086 	beq.w	80013d2 <__gnu_unwind_execute+0x276>
 80012c6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ca:	2bc0      	cmp	r3, #192	; 0xc0
 80012cc:	f000 8094 	beq.w	80013f8 <__gnu_unwind_execute+0x29c>
 80012d0:	28c8      	cmp	r0, #200	; 0xc8
 80012d2:	f000 809f 	beq.w	8001414 <__gnu_unwind_execute+0x2b8>
 80012d6:	28c9      	cmp	r0, #201	; 0xc9
 80012d8:	d193      	bne.n	8001202 <__gnu_unwind_execute+0xa6>
 80012da:	4638      	mov	r0, r7
 80012dc:	f7ff ff12 	bl	8001104 <next_unwind_byte>
 80012e0:	0302      	lsls	r2, r0, #12
 80012e2:	f000 000f 	and.w	r0, r0, #15
 80012e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012ea:	3001      	adds	r0, #1
 80012ec:	4302      	orrs	r2, r0
 80012ee:	e781      	b.n	80011f4 <__gnu_unwind_execute+0x98>
 80012f0:	ac03      	add	r4, sp, #12
 80012f2:	4643      	mov	r3, r8
 80012f4:	220e      	movs	r2, #14
 80012f6:	4641      	mov	r1, r8
 80012f8:	9400      	str	r4, [sp, #0]
 80012fa:	4630      	mov	r0, r6
 80012fc:	f7ff fb14 	bl	8000928 <_Unwind_VRS_Get>
 8001300:	9400      	str	r4, [sp, #0]
 8001302:	4630      	mov	r0, r6
 8001304:	4643      	mov	r3, r8
 8001306:	220f      	movs	r2, #15
 8001308:	4641      	mov	r1, r8
 800130a:	f7ff fb33 	bl	8000974 <_Unwind_VRS_Set>
 800130e:	4640      	mov	r0, r8
 8001310:	e778      	b.n	8001204 <__gnu_unwind_execute+0xa8>
 8001312:	4638      	mov	r0, r7
 8001314:	f7ff fef6 	bl	8001104 <next_unwind_byte>
 8001318:	2800      	cmp	r0, #0
 800131a:	f43f af72 	beq.w	8001202 <__gnu_unwind_execute+0xa6>
 800131e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001322:	f47f af6e 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 8001326:	4602      	mov	r2, r0
 8001328:	4619      	mov	r1, r3
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff fcf0 	bl	8000d10 <_Unwind_VRS_Pop>
 8001330:	2800      	cmp	r0, #0
 8001332:	f47f af66 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 8001336:	e718      	b.n	800116a <__gnu_unwind_execute+0xe>
 8001338:	2300      	movs	r3, #0
 800133a:	f10d 090c 	add.w	r9, sp, #12
 800133e:	220d      	movs	r2, #13
 8001340:	4619      	mov	r1, r3
 8001342:	f8cd 9000 	str.w	r9, [sp]
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff faee 	bl	8000928 <_Unwind_VRS_Get>
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff fed9 	bl	8001104 <next_unwind_byte>
 8001352:	0602      	lsls	r2, r0, #24
 8001354:	f04f 0402 	mov.w	r4, #2
 8001358:	d50c      	bpl.n	8001374 <__gnu_unwind_execute+0x218>
 800135a:	9b03      	ldr	r3, [sp, #12]
 800135c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001360:	40a0      	lsls	r0, r4
 8001362:	4403      	add	r3, r0
 8001364:	4638      	mov	r0, r7
 8001366:	9303      	str	r3, [sp, #12]
 8001368:	f7ff fecc 	bl	8001104 <next_unwind_byte>
 800136c:	0603      	lsls	r3, r0, #24
 800136e:	f104 0407 	add.w	r4, r4, #7
 8001372:	d4f2      	bmi.n	800135a <__gnu_unwind_execute+0x1fe>
 8001374:	9b03      	ldr	r3, [sp, #12]
 8001376:	f8cd 9000 	str.w	r9, [sp]
 800137a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800137e:	40a2      	lsls	r2, r4
 8001380:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001384:	2300      	movs	r3, #0
 8001386:	4414      	add	r4, r2
 8001388:	4619      	mov	r1, r3
 800138a:	220d      	movs	r2, #13
 800138c:	4630      	mov	r0, r6
 800138e:	9403      	str	r4, [sp, #12]
 8001390:	f7ff faf0 	bl	8000974 <_Unwind_VRS_Set>
 8001394:	e6e9      	b.n	800116a <__gnu_unwind_execute+0xe>
 8001396:	4638      	mov	r0, r7
 8001398:	f7ff feb4 	bl	8001104 <next_unwind_byte>
 800139c:	0301      	lsls	r1, r0, #12
 800139e:	f000 000f 	and.w	r0, r0, #15
 80013a2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013a6:	1c42      	adds	r2, r0, #1
 80013a8:	2301      	movs	r3, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	4630      	mov	r0, r6
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fcae 	bl	8000d10 <_Unwind_VRS_Pop>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	f47f af24 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 80013ba:	e6d6      	b.n	800116a <__gnu_unwind_execute+0xe>
 80013bc:	4638      	mov	r0, r7
 80013be:	f7ff fea1 	bl	8001104 <next_unwind_byte>
 80013c2:	0301      	lsls	r1, r0, #12
 80013c4:	f000 000f 	and.w	r0, r0, #15
 80013c8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013cc:	1c42      	adds	r2, r0, #1
 80013ce:	2303      	movs	r3, #3
 80013d0:	e7eb      	b.n	80013aa <__gnu_unwind_execute+0x24e>
 80013d2:	4638      	mov	r0, r7
 80013d4:	f7ff fe96 	bl	8001104 <next_unwind_byte>
 80013d8:	2800      	cmp	r0, #0
 80013da:	f43f af12 	beq.w	8001202 <__gnu_unwind_execute+0xa6>
 80013de:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013e2:	f47f af0e 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 80013e6:	4602      	mov	r2, r0
 80013e8:	2104      	movs	r1, #4
 80013ea:	4630      	mov	r0, r6
 80013ec:	f7ff fc90 	bl	8000d10 <_Unwind_VRS_Pop>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	f47f af06 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 80013f6:	e6b8      	b.n	800116a <__gnu_unwind_execute+0xe>
 80013f8:	f000 020f 	and.w	r2, r0, #15
 80013fc:	3201      	adds	r2, #1
 80013fe:	2303      	movs	r3, #3
 8001400:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001404:	4619      	mov	r1, r3
 8001406:	4630      	mov	r0, r6
 8001408:	f7ff fc82 	bl	8000d10 <_Unwind_VRS_Pop>
 800140c:	2800      	cmp	r0, #0
 800140e:	f47f aef8 	bne.w	8001202 <__gnu_unwind_execute+0xa6>
 8001412:	e6aa      	b.n	800116a <__gnu_unwind_execute+0xe>
 8001414:	4638      	mov	r0, r7
 8001416:	f7ff fe75 	bl	8001104 <next_unwind_byte>
 800141a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800141e:	f000 030f 	and.w	r3, r0, #15
 8001422:	3210      	adds	r2, #16
 8001424:	3301      	adds	r3, #1
 8001426:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800142a:	e6e3      	b.n	80011f4 <__gnu_unwind_execute+0x98>

0800142c <__gnu_unwind_frame>:
 800142c:	b510      	push	{r4, lr}
 800142e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001430:	b084      	sub	sp, #16
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2003      	movs	r0, #3
 8001436:	f88d 000c 	strb.w	r0, [sp, #12]
 800143a:	79dc      	ldrb	r4, [r3, #7]
 800143c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001440:	0212      	lsls	r2, r2, #8
 8001442:	3308      	adds	r3, #8
 8001444:	4608      	mov	r0, r1
 8001446:	a901      	add	r1, sp, #4
 8001448:	9201      	str	r2, [sp, #4]
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	f7ff fe86 	bl	800115c <__gnu_unwind_execute>
 8001450:	b004      	add	sp, #16
 8001452:	bd10      	pop	{r4, pc}

08001454 <_Unwind_GetRegionStart>:
 8001454:	b508      	push	{r3, lr}
 8001456:	f7ff fe7f 	bl	8001158 <unwind_UCB_from_context>
 800145a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800145c:	bd08      	pop	{r3, pc}
 800145e:	bf00      	nop

08001460 <_Unwind_GetLanguageSpecificData>:
 8001460:	b508      	push	{r3, lr}
 8001462:	f7ff fe79 	bl	8001158 <unwind_UCB_from_context>
 8001466:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001468:	79c3      	ldrb	r3, [r0, #7]
 800146a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800146e:	3008      	adds	r0, #8
 8001470:	bd08      	pop	{r3, pc}
 8001472:	bf00      	nop

08001474 <_Unwind_GetTextRelBase>:
 8001474:	b508      	push	{r3, lr}
 8001476:	f002 fcfc 	bl	8003e72 <abort>
 800147a:	bf00      	nop

0800147c <_Unwind_GetDataRelBase>:
 800147c:	b508      	push	{r3, lr}
 800147e:	f7ff fff9 	bl	8001474 <_Unwind_GetTextRelBase>
 8001482:	bf00      	nop

08001484 <__aeabi_idiv0>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_InitTick+0x3c>)
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_InitTick+0x40>)
{
 800148e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	7818      	ldrb	r0, [r3, #0]
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f0 	udiv	r3, r3, r0
 800149a:	6810      	ldr	r0, [r2, #0]
 800149c:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a0:	f000 f89a 	bl	80015d8 <HAL_SYSTICK_Config>
 80014a4:	4604      	mov	r4, r0
 80014a6:	b958      	cbnz	r0, 80014c0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a8:	2d0f      	cmp	r5, #15
 80014aa:	d809      	bhi.n	80014c0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	4602      	mov	r2, r0
 80014ae:	4629      	mov	r1, r5
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f850 	bl	8001558 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_InitTick+0x44>)
 80014ba:	4620      	mov	r0, r4
 80014bc:	601d      	str	r5, [r3, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_Init>:
{
 80014d0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f82e 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff ffd5 	bl	8001488 <HAL_InitTick>
  HAL_MspInit();
 80014de:	f001 fe3b 	bl	8003158 <HAL_MspInit>
}
 80014e2:	2000      	movs	r0, #0
 80014e4:	bd08      	pop	{r3, pc}
	...

080014e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_IncTick+0x10>)
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_IncTick+0x14>)
 80014ec:	6811      	ldr	r1, [r2, #0]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200003f4 	.word	0x200003f4
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001500:	4b01      	ldr	r3, [pc, #4]	; (8001508 <HAL_GetTick+0x8>)
 8001502:	6818      	ldr	r0, [r3, #0]
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200003f4 	.word	0x200003f4

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff6 	bl	8001500 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001514:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	bf1c      	itt	ne
 8001518:	4b05      	ldrne	r3, [pc, #20]	; (8001530 <HAL_Delay+0x24>)
 800151a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800151c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800151e:	bf18      	it	ne
 8001520:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001522:	f7ff ffed 	bl	8001500 <HAL_GetTick>
 8001526:	1b40      	subs	r0, r0, r5
 8001528:	4284      	cmp	r4, r0
 800152a:	d8fa      	bhi.n	8001522 <HAL_Delay+0x16>
  {
  }
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001536:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001538:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	0c1b      	lsrs	r3, r3, #16
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001544:	0200      	lsls	r0, r0, #8
 8001546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800154e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001550:	60d3      	str	r3, [r2, #12]
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b530      	push	{r4, r5, lr}
 800155c:	68dc      	ldr	r4, [r3, #12]
 800155e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001562:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	2b04      	cmp	r3, #4
 800156a:	bf28      	it	cs
 800156c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 0501 	mov.w	r5, #1
 8001574:	fa05 f303 	lsl.w	r3, r5, r3
 8001578:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157c:	bf8c      	ite	hi
 800157e:	3c03      	subhi	r4, #3
 8001580:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001582:	4019      	ands	r1, r3
 8001584:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001586:	fa05 f404 	lsl.w	r4, r5, r4
 800158a:	3c01      	subs	r4, #1
 800158c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800158e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	ea42 0201 	orr.w	r2, r2, r1
 8001594:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	bfaf      	iteee	ge
 800159a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	f000 000f 	andlt.w	r0, r0, #15
 80015a2:	4b06      	ldrlt	r3, [pc, #24]	; (80015bc <HAL_NVIC_SetPriority+0x64>)
 80015a4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	bfa5      	ittet	ge
 80015a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015ac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015b4:	bd30      	pop	{r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00
 80015bc:	e000ed14 	.word	0xe000ed14

080015c0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015c0:	0942      	lsrs	r2, r0, #5
 80015c2:	2301      	movs	r3, #1
 80015c4:	f000 001f 	and.w	r0, r0, #31
 80015c8:	fa03 f000 	lsl.w	r0, r3, r0
 80015cc:	4b01      	ldr	r3, [pc, #4]	; (80015d4 <HAL_NVIC_EnableIRQ+0x14>)
 80015ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	3801      	subs	r0, #1
 80015da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015de:	d20a      	bcs.n	80015f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	21f0      	movs	r1, #240	; 0xf0
 80015e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001606:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001608:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800160a:	bf0c      	ite	eq
 800160c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001610:	f022 0204 	bicne.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4770      	bx	lr
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800161c:	4770      	bx	lr

0800161e <HAL_SYSTICK_IRQHandler>:
{
 800161e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001620:	f7ff fffc 	bl	800161c <HAL_SYSTICK_Callback>
 8001624:	bd08      	pop	{r3, pc}
	...

08001628 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001628:	6803      	ldr	r3, [r0, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001630:	f023 0303 	bic.w	r3, r3, #3
 8001634:	2118      	movs	r1, #24
 8001636:	3a10      	subs	r2, #16
 8001638:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800163c:	4904      	ldr	r1, [pc, #16]	; (8001650 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800163e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001640:	bf88      	it	hi
 8001642:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001644:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001646:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001648:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800164a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	08003f60 	.word	0x08003f60

08001654 <HAL_DMA_Init>:
{
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ff52 	bl	8001500 <HAL_GetTick>
 800165c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800165e:	2c00      	cmp	r4, #0
 8001660:	d071      	beq.n	8001746 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001662:	2300      	movs	r3, #0
 8001664:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001668:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800166a:	2302      	movs	r3, #2
 800166c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001670:	6813      	ldr	r3, [r2, #0]
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001678:	6821      	ldr	r1, [r4, #0]
 800167a:	680b      	ldr	r3, [r1, #0]
 800167c:	07d8      	lsls	r0, r3, #31
 800167e:	d43c      	bmi.n	80016fa <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001680:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001682:	4d32      	ldr	r5, [pc, #200]	; (800174c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001684:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001688:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168a:	68a3      	ldr	r3, [r4, #8]
 800168c:	4313      	orrs	r3, r2
 800168e:	68e2      	ldr	r2, [r4, #12]
 8001690:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	6922      	ldr	r2, [r4, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	6962      	ldr	r2, [r4, #20]
 8001698:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	69e2      	ldr	r2, [r4, #28]
 800169c:	4303      	orrs	r3, r0
 800169e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a0:	6a22      	ldr	r2, [r4, #32]
 80016a2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016a6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016ac:	bf01      	itttt	eq
 80016ae:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80016b0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80016b2:	4335      	orreq	r5, r6
 80016b4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80016b6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80016b8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ba:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016bc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80016c0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016c4:	d10b      	bne.n	80016de <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80016c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80016ca:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016cc:	b13d      	cbz	r5, 80016de <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ce:	b9f8      	cbnz	r0, 8001710 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80016d0:	2a01      	cmp	r2, #1
 80016d2:	d02d      	beq.n	8001730 <HAL_DMA_Init+0xdc>
 80016d4:	d301      	bcc.n	80016da <HAL_DMA_Init+0x86>
 80016d6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016d8:	d101      	bne.n	80016de <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016da:	01ea      	lsls	r2, r5, #7
 80016dc:	d42b      	bmi.n	8001736 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80016de:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff ffa1 	bl	8001628 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016e8:	233f      	movs	r3, #63	; 0x3f
 80016ea:	4093      	lsls	r3, r2
 80016ec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ee:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80016f0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80016f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016fa:	f7ff ff01 	bl	8001500 <HAL_GetTick>
 80016fe:	1b40      	subs	r0, r0, r5
 8001700:	2805      	cmp	r0, #5
 8001702:	d9b9      	bls.n	8001678 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001704:	2320      	movs	r3, #32
 8001706:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001708:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800170a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800170e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001710:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001714:	d113      	bne.n	800173e <HAL_DMA_Init+0xea>
    switch (tmp)
 8001716:	2a03      	cmp	r2, #3
 8001718:	d8e1      	bhi.n	80016de <HAL_DMA_Init+0x8a>
 800171a:	a001      	add	r0, pc, #4	; (adr r0, 8001720 <HAL_DMA_Init+0xcc>)
 800171c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001720:	08001737 	.word	0x08001737
 8001724:	080016db 	.word	0x080016db
 8001728:	08001737 	.word	0x08001737
 800172c:	08001731 	.word	0x08001731
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001730:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001734:	d1d3      	bne.n	80016de <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800173a:	2001      	movs	r0, #1
 800173c:	e7e5      	b.n	800170a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800173e:	2a02      	cmp	r2, #2
 8001740:	d9f9      	bls.n	8001736 <HAL_DMA_Init+0xe2>
 8001742:	2a03      	cmp	r2, #3
 8001744:	e7c8      	b.n	80016d8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
 8001748:	bd70      	pop	{r4, r5, r6, pc}
 800174a:	bf00      	nop
 800174c:	f010803f 	.word	0xf010803f

08001750 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001750:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001754:	2b02      	cmp	r3, #2
 8001756:	d003      	beq.n	8001760 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001760:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001762:	2305      	movs	r3, #5
 8001764:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001768:	6813      	ldr	r3, [r2, #0]
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001770:	2000      	movs	r0, #0
}
 8001772:	4770      	bx	lr

08001774 <HAL_DMA_IRQHandler>:
{
 8001774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177a:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800177e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001780:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001782:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001784:	2208      	movs	r2, #8
 8001786:	409a      	lsls	r2, r3
 8001788:	4216      	tst	r6, r2
{
 800178a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178c:	d00c      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800178e:	6801      	ldr	r1, [r0, #0]
 8001790:	6808      	ldr	r0, [r1, #0]
 8001792:	0740      	lsls	r0, r0, #29
 8001794:	d508      	bpl.n	80017a8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001796:	6808      	ldr	r0, [r1, #0]
 8001798:	f020 0004 	bic.w	r0, r0, #4
 800179c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	2201      	movs	r2, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	4216      	tst	r6, r2
 80017ae:	d008      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b0:	6821      	ldr	r1, [r4, #0]
 80017b2:	6949      	ldr	r1, [r1, #20]
 80017b4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017b6:	bf41      	itttt	mi
 80017b8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017ba:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80017bc:	f042 0202 	orrmi.w	r2, r2, #2
 80017c0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	4216      	tst	r6, r2
 80017c8:	d008      	beq.n	80017dc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017ca:	6821      	ldr	r1, [r4, #0]
 80017cc:	6809      	ldr	r1, [r1, #0]
 80017ce:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017d0:	bf41      	itttt	mi
 80017d2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017d4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80017d6:	f042 0204 	orrmi.w	r2, r2, #4
 80017da:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	2210      	movs	r2, #16
 80017de:	409a      	lsls	r2, r3
 80017e0:	4216      	tst	r6, r2
 80017e2:	d010      	beq.n	8001806 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	0709      	lsls	r1, r1, #28
 80017ea:	d50c      	bpl.n	8001806 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ec:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	0350      	lsls	r0, r2, #13
 80017f2:	d535      	bpl.n	8001860 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0319      	lsls	r1, r3, #12
 80017f8:	d401      	bmi.n	80017fe <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017fc:	e000      	b.n	8001800 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001800:	b10b      	cbz	r3, 8001806 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001802:	4620      	mov	r0, r4
 8001804:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001808:	2220      	movs	r2, #32
 800180a:	408a      	lsls	r2, r1
 800180c:	4216      	tst	r6, r2
 800180e:	d038      	beq.n	8001882 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	06c6      	lsls	r6, r0, #27
 8001816:	d534      	bpl.n	8001882 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001818:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800181a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800181e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001820:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001822:	d125      	bne.n	8001870 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001824:	f022 0216 	bic.w	r2, r2, #22
 8001828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001830:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001832:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001834:	b90a      	cbnz	r2, 800183a <HAL_DMA_IRQHandler+0xc6>
 8001836:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001838:	b11a      	cbz	r2, 8001842 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f022 0208 	bic.w	r2, r2, #8
 8001840:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001842:	233f      	movs	r3, #63	; 0x3f
 8001844:	408b      	lsls	r3, r1
 8001846:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001848:	2300      	movs	r3, #0
 800184a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800184e:	2301      	movs	r3, #1
 8001850:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001854:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001856:	b10b      	cbz	r3, 800185c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001858:	4620      	mov	r0, r4
 800185a:	4798      	blx	r3
}
 800185c:	b003      	add	sp, #12
 800185e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001864:	bf5e      	ittt	pl
 8001866:	681a      	ldrpl	r2, [r3, #0]
 8001868:	f022 0208 	bicpl.w	r2, r2, #8
 800186c:	601a      	strpl	r2, [r3, #0]
 800186e:	e7c4      	b.n	80017fa <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001870:	0350      	lsls	r0, r2, #13
 8001872:	d528      	bpl.n	80018c6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0319      	lsls	r1, r3, #12
 8001878:	d432      	bmi.n	80018e0 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800187a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800187c:	b10b      	cbz	r3, 8001882 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800187e:	4620      	mov	r0, r4
 8001880:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0e9      	beq.n	800185c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001888:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800188a:	07da      	lsls	r2, r3, #31
 800188c:	d519      	bpl.n	80018c2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800188e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001890:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001892:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800189e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80018a2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80018a6:	9b01      	ldr	r3, [sp, #4]
 80018a8:	3301      	adds	r3, #1
 80018aa:	429f      	cmp	r7, r3
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	d302      	bcc.n	80018b6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d4f7      	bmi.n	80018a6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80018b6:	2300      	movs	r3, #0
 80018b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80018bc:	2301      	movs	r3, #1
 80018be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80018c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018c4:	e7c7      	b.n	8001856 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80018cc:	d108      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	f021 0110 	bic.w	r1, r1, #16
 80018d4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80018d6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80018d8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80018dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80018e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018e2:	e7cb      	b.n	800187c <HAL_DMA_IRQHandler+0x108>
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ec:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001a90 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4a64      	ldr	r2, [pc, #400]	; (8001a88 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80018f8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fc:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001900:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001904:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001908:	42b7      	cmp	r7, r6
 800190a:	f040 80ad 	bne.w	8001a68 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190e:	684c      	ldr	r4, [r1, #4]
 8001910:	f024 0a10 	bic.w	sl, r4, #16
 8001914:	f1ba 0f02 	cmp.w	sl, #2
 8001918:	d116      	bne.n	8001948 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800191a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800191e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001922:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001926:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800192e:	f04f 0e0f 	mov.w	lr, #15
 8001932:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001936:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193a:	690d      	ldr	r5, [r1, #16]
 800193c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001940:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001944:	f8cc 5020 	str.w	r5, [ip, #32]
 8001948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800194e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	fa05 f50c 	lsl.w	r5, r5, ip
 8001956:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001964:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001968:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800196c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001970:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001972:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001976:	d815      	bhi.n	80019a4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001978:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	68cd      	ldr	r5, [r1, #12]
 8001982:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001986:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800198a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800198e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001992:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001996:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800199a:	fa0e fe03 	lsl.w	lr, lr, r3
 800199e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80019a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80019a4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a6:	9d00      	ldr	r5, [sp, #0]
 80019a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019aa:	688f      	ldr	r7, [r1, #8]
 80019ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80019b0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80019b2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b4:	00e5      	lsls	r5, r4, #3
 80019b6:	d557      	bpl.n	8001a68 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	f04f 0b00 	mov.w	fp, #0
 80019bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80019c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c4:	4d31      	ldr	r5, [pc, #196]	; (8001a8c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80019ca:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80019ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80019d2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80019d6:	9703      	str	r7, [sp, #12]
 80019d8:	9f03      	ldr	r7, [sp, #12]
 80019da:	f023 0703 	bic.w	r7, r3, #3
 80019de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80019e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80019f2:	f04f 0e0f 	mov.w	lr, #15
 80019f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019fc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a00:	d039      	beq.n	8001a76 <HAL_GPIO_Init+0x18e>
 8001a02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a06:	42a8      	cmp	r0, r5
 8001a08:	d037      	beq.n	8001a7a <HAL_GPIO_Init+0x192>
 8001a0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a0e:	42a8      	cmp	r0, r5
 8001a10:	d035      	beq.n	8001a7e <HAL_GPIO_Init+0x196>
 8001a12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a16:	42a8      	cmp	r0, r5
 8001a18:	d033      	beq.n	8001a82 <HAL_GPIO_Init+0x19a>
 8001a1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a1e:	42a8      	cmp	r0, r5
 8001a20:	bf14      	ite	ne
 8001a22:	2507      	movne	r5, #7
 8001a24:	2504      	moveq	r5, #4
 8001a26:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a2a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a2e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001a30:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001a38:	bf0c      	ite	eq
 8001a3a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a3c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001a3e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001a40:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a42:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001a46:	bf0c      	ite	eq
 8001a48:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a4a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001a4c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a54:	bf0c      	ite	eq
 8001a56:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a58:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001a5a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001a5c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001a60:	bf54      	ite	pl
 8001a62:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001a64:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001a66:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a68:	3301      	adds	r3, #1
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	f47f af47 	bne.w	80018fe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001a70:	b005      	add	sp, #20
 8001a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	465d      	mov	r5, fp
 8001a78:	e7d5      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a7a:	2501      	movs	r5, #1
 8001a7c:	e7d3      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a7e:	2502      	movs	r5, #2
 8001a80:	e7d1      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a82:	2503      	movs	r5, #3
 8001a84:	e7cf      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a86:	bf00      	nop
 8001a88:	40013c00 	.word	0x40013c00
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	b10a      	cbz	r2, 8001a9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a96:	6181      	str	r1, [r0, #24]
 8001a98:	4770      	bx	lr
 8001a9a:	0409      	lsls	r1, r1, #16
 8001a9c:	e7fb      	b.n	8001a96 <HAL_GPIO_WritePin+0x2>
	...

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d062      	beq.n	8001b6e <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001aa8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ab0:	b91b      	cbnz	r3, 8001aba <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ab6:	f001 fb97 	bl	80031e8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aba:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001abc:	4e2d      	ldr	r6, [pc, #180]	; (8001b74 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001abe:	4d2e      	ldr	r5, [pc, #184]	; (8001b78 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	2324      	movs	r3, #36	; 0x24
 8001ac2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ace:	f000 faa5 	bl	800201c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ad2:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001ad4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ad6:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ada:	42b3      	cmp	r3, r6
 8001adc:	bf84      	itt	hi
 8001ade:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001ae2:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001ae4:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ae6:	bf91      	iteee	ls
 8001ae8:	1c69      	addls	r1, r5, #1
 8001aea:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001aee:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001af2:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001af4:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001af6:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001af8:	d821      	bhi.n	8001b3e <HAL_I2C_Init+0x9e>
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b00:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	bf98      	it	ls
 8001b08:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b0a:	6a21      	ldr	r1, [r4, #32]
 8001b0c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b0e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001b14:	68e1      	ldr	r1, [r4, #12]
 8001b16:	6923      	ldr	r3, [r4, #16]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001b1c:	69a1      	ldr	r1, [r4, #24]
 8001b1e:	6963      	ldr	r3, [r4, #20]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	6813      	ldr	r3, [r2, #0]
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b3e:	68a1      	ldr	r1, [r4, #8]
 8001b40:	b949      	cbnz	r1, 8001b56 <HAL_I2C_Init+0xb6>
 8001b42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b4a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b4e:	b163      	cbz	r3, 8001b6a <HAL_I2C_Init+0xca>
 8001b50:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001b54:	e7d9      	b.n	8001b0a <HAL_I2C_Init+0x6a>
 8001b56:	2119      	movs	r1, #25
 8001b58:	434b      	muls	r3, r1
 8001b5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b5e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b62:	b113      	cbz	r3, 8001b6a <HAL_I2C_Init+0xca>
 8001b64:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001b68:	e7cf      	b.n	8001b0a <HAL_I2C_Init+0x6a>
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	e7cd      	b.n	8001b0a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
 8001b72:	bf00      	nop
 8001b74:	000186a0 	.word	0x000186a0
 8001b78:	000f4240 	.word	0x000f4240

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	4604      	mov	r4, r0
 8001b82:	b918      	cbnz	r0, 8001b8c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b86:	b002      	add	sp, #8
 8001b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8c:	6803      	ldr	r3, [r0, #0]
 8001b8e:	07dd      	lsls	r5, r3, #31
 8001b90:	d410      	bmi.n	8001bb4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	0798      	lsls	r0, r3, #30
 8001b96:	d458      	bmi.n	8001c4a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	071a      	lsls	r2, r3, #28
 8001b9c:	f100 809a 	bmi.w	8001cd4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	075b      	lsls	r3, r3, #29
 8001ba4:	f100 80b8 	bmi.w	8001d18 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	69a2      	ldr	r2, [r4, #24]
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	f040 8119 	bne.w	8001de2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e7e8      	b.n	8001b86 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb4:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	f002 020c 	and.w	r2, r2, #12
 8001bbc:	2a04      	cmp	r2, #4
 8001bbe:	d007      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc6:	2a08      	cmp	r2, #8
 8001bc8:	d10a      	bne.n	8001be0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0259      	lsls	r1, r3, #9
 8001bce:	d507      	bpl.n	8001be0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	4b9f      	ldr	r3, [pc, #636]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	039a      	lsls	r2, r3, #14
 8001bd6:	d5dc      	bpl.n	8001b92 <HAL_RCC_OscConfig+0x16>
 8001bd8:	6863      	ldr	r3, [r4, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1d9      	bne.n	8001b92 <HAL_RCC_OscConfig+0x16>
 8001bde:	e7d1      	b.n	8001b84 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	4d9b      	ldr	r5, [pc, #620]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d111      	bne.n	8001c0e <HAL_RCC_OscConfig+0x92>
 8001bea:	682b      	ldr	r3, [r5, #0]
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fc85 	bl	8001500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4d96      	ldr	r5, [pc, #600]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001bf8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	682b      	ldr	r3, [r5, #0]
 8001bfc:	039b      	lsls	r3, r3, #14
 8001bfe:	d4c8      	bmi.n	8001b92 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fc7e 	bl	8001500 <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2864      	cmp	r0, #100	; 0x64
 8001c08:	d9f7      	bls.n	8001bfa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	e7bb      	b.n	8001b86 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c12:	d104      	bne.n	8001c1e <HAL_RCC_OscConfig+0xa2>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1a:	602b      	str	r3, [r5, #0]
 8001c1c:	e7e5      	b.n	8001bea <HAL_RCC_OscConfig+0x6e>
 8001c1e:	682a      	ldr	r2, [r5, #0]
 8001c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c24:	602a      	str	r2, [r5, #0]
 8001c26:	682a      	ldr	r2, [r5, #0]
 8001c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c2c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1df      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001c32:	f7ff fc65 	bl	8001500 <HAL_GetTick>
 8001c36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	039f      	lsls	r7, r3, #14
 8001c3c:	d5a9      	bpl.n	8001b92 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fc5f 	bl	8001500 <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	2864      	cmp	r0, #100	; 0x64
 8001c46:	d9f7      	bls.n	8001c38 <HAL_RCC_OscConfig+0xbc>
 8001c48:	e7df      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4a:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	f012 0f0c 	tst.w	r2, #12
 8001c52:	d007      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5a:	2a08      	cmp	r2, #8
 8001c5c:	d111      	bne.n	8001c82 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	025e      	lsls	r6, r3, #9
 8001c62:	d40e      	bmi.n	8001c82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c64:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	0795      	lsls	r5, r2, #30
 8001c6a:	d502      	bpl.n	8001c72 <HAL_RCC_OscConfig+0xf6>
 8001c6c:	68e2      	ldr	r2, [r4, #12]
 8001c6e:	2a01      	cmp	r2, #1
 8001c70:	d188      	bne.n	8001b84 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	6921      	ldr	r1, [r4, #16]
 8001c76:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001c7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001c7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c80:	e78a      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c82:	68e2      	ldr	r2, [r4, #12]
 8001c84:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x2d8>)
 8001c86:	b1b2      	cbz	r2, 8001cb6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fc38 	bl	8001500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4d6f      	ldr	r5, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001c92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	0798      	lsls	r0, r3, #30
 8001c98:	d507      	bpl.n	8001caa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	682b      	ldr	r3, [r5, #0]
 8001c9c:	6922      	ldr	r2, [r4, #16]
 8001c9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ca2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	e776      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc29 	bl	8001500 <HAL_GetTick>
 8001cae:	1b80      	subs	r0, r0, r6
 8001cb0:	2802      	cmp	r0, #2
 8001cb2:	d9ef      	bls.n	8001c94 <HAL_RCC_OscConfig+0x118>
 8001cb4:	e7a9      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc22 	bl	8001500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbc:	4d64      	ldr	r5, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001cbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	0799      	lsls	r1, r3, #30
 8001cc4:	f57f af68 	bpl.w	8001b98 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc1a 	bl	8001500 <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f6      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x144>
 8001cd2:	e79a      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd4:	6962      	ldr	r2, [r4, #20]
 8001cd6:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <HAL_RCC_OscConfig+0x2dc>)
 8001cd8:	b17a      	cbz	r2, 8001cfa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cde:	f7ff fc0f 	bl	8001500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4d5b      	ldr	r5, [pc, #364]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ce4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ce8:	079f      	lsls	r7, r3, #30
 8001cea:	f53f af59 	bmi.w	8001ba0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fc07 	bl	8001500 <HAL_GetTick>
 8001cf2:	1b80      	subs	r0, r0, r6
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d9f6      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x16a>
 8001cf8:	e787      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc00 	bl	8001500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4d53      	ldr	r5, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d06:	0798      	lsls	r0, r3, #30
 8001d08:	f57f af4a 	bpl.w	8001ba0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fbf8 	bl	8001500 <HAL_GetTick>
 8001d10:	1b80      	subs	r0, r0, r6
 8001d12:	2802      	cmp	r0, #2
 8001d14:	d9f6      	bls.n	8001d04 <HAL_RCC_OscConfig+0x188>
 8001d16:	e778      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d18:	4b4d      	ldr	r3, [pc, #308]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d20:	d128      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	9201      	str	r2, [sp, #4]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d36:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4d48      	ldr	r5, [pc, #288]	; (8001e5c <HAL_RCC_OscConfig+0x2e0>)
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	05d9      	lsls	r1, r3, #23
 8001d3e:	d51b      	bpl.n	8001d78 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	68a3      	ldr	r3, [r4, #8]
 8001d42:	4d43      	ldr	r5, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d127      	bne.n	8001d98 <HAL_RCC_OscConfig+0x21c>
 8001d48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d50:	f7ff fbd6 	bl	8001500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4d3e      	ldr	r5, [pc, #248]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d56:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d5e:	079b      	lsls	r3, r3, #30
 8001d60:	d539      	bpl.n	8001dd6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001d62:	2e00      	cmp	r6, #0
 8001d64:	f43f af20 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4a39      	ldr	r2, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001d6a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	e719      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2600      	movs	r6, #0
 8001d76:	e7df      	b.n	8001d38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d80:	f7ff fbbe 	bl	8001500 <HAL_GetTick>
 8001d84:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	05da      	lsls	r2, r3, #23
 8001d8a:	d4d9      	bmi.n	8001d40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7ff fbb8 	bl	8001500 <HAL_GetTick>
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	2802      	cmp	r0, #2
 8001d94:	d9f7      	bls.n	8001d86 <HAL_RCC_OscConfig+0x20a>
 8001d96:	e738      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	2b05      	cmp	r3, #5
 8001d9a:	d104      	bne.n	8001da6 <HAL_RCC_OscConfig+0x22a>
 8001d9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	672b      	str	r3, [r5, #112]	; 0x70
 8001da4:	e7d0      	b.n	8001d48 <HAL_RCC_OscConfig+0x1cc>
 8001da6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	672a      	str	r2, [r5, #112]	; 0x70
 8001dae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001db0:	f022 0204 	bic.w	r2, r2, #4
 8001db4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ca      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001dba:	f7ff fba1 	bl	8001500 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dc2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dc6:	0798      	lsls	r0, r3, #30
 8001dc8:	d5cb      	bpl.n	8001d62 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff fb99 	bl	8001500 <HAL_GetTick>
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	4540      	cmp	r0, r8
 8001dd2:	d9f7      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x248>
 8001dd4:	e719      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fb93 	bl	8001500 <HAL_GetTick>
 8001dda:	1bc0      	subs	r0, r0, r7
 8001ddc:	4540      	cmp	r0, r8
 8001dde:	d9bd      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1e0>
 8001de0:	e713      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de2:	4d1b      	ldr	r5, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
 8001de4:	68ab      	ldr	r3, [r5, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	f43f aeca 	beq.w	8001b84 <HAL_RCC_OscConfig+0x8>
 8001df0:	4e1b      	ldr	r6, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x2e4>)
 8001df2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001df6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df8:	d134      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb81 	bl	8001500 <HAL_GetTick>
 8001dfe:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	0199      	lsls	r1, r3, #6
 8001e04:	d41e      	bmi.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e06:	6a22      	ldr	r2, [r4, #32]
 8001e08:	69e3      	ldr	r3, [r4, #28]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4c0d      	ldr	r4, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1c:	0852      	lsrs	r2, r2, #1
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e26:	2301      	movs	r3, #1
 8001e28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb69 	bl	8001500 <HAL_GetTick>
 8001e2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	019a      	lsls	r2, r3, #6
 8001e34:	f53f aebc 	bmi.w	8001bb0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fb62 	bl	8001500 <HAL_GetTick>
 8001e3c:	1b40      	subs	r0, r0, r5
 8001e3e:	2802      	cmp	r0, #2
 8001e40:	d9f6      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2b4>
 8001e42:	e6e2      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fb5c 	bl	8001500 <HAL_GetTick>
 8001e48:	1bc0      	subs	r0, r0, r7
 8001e4a:	2802      	cmp	r0, #2
 8001e4c:	d9d8      	bls.n	8001e00 <HAL_RCC_OscConfig+0x284>
 8001e4e:	e6dc      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	42470000 	.word	0x42470000
 8001e58:	42470e80 	.word	0x42470e80
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001e64:	f7ff fb4c 	bl	8001500 <HAL_GetTick>
 8001e68:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	682b      	ldr	r3, [r5, #0]
 8001e6c:	019b      	lsls	r3, r3, #6
 8001e6e:	f57f ae9f 	bpl.w	8001bb0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb45 	bl	8001500 <HAL_GetTick>
 8001e76:	1b00      	subs	r0, r0, r4
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	d9f6      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2ee>
 8001e7c:	e6c5      	b.n	8001c0a <HAL_RCC_OscConfig+0x8e>
 8001e7e:	bf00      	nop

08001e80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e80:	4913      	ldr	r1, [pc, #76]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001e82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e84:	688b      	ldr	r3, [r1, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x16>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e92:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e94:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e96:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001e98:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea4:	bf14      	ite	ne
 8001ea6:	480c      	ldrne	r0, [pc, #48]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea8:	480a      	ldreq	r0, [pc, #40]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eaa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001eae:	bf18      	it	ne
 8001eb0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	fba1 0100 	umull	r0, r1, r1, r0
 8001eba:	f7fe f9e1 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001eca:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_ClockConfig>:
{
 8001edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b910      	cbnz	r0, 8001eec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_RCC_ClockConfig+0x124>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f002 020f 	and.w	r2, r2, #15
 8001ef4:	428a      	cmp	r2, r1
 8001ef6:	d328      	bcc.n	8001f4a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	6821      	ldr	r1, [r4, #0]
 8001efa:	078f      	lsls	r7, r1, #30
 8001efc:	d42d      	bmi.n	8001f5a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	07c8      	lsls	r0, r1, #31
 8001f00:	d440      	bmi.n	8001f84 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_ClockConfig+0x124>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f002 020f 	and.w	r2, r2, #15
 8001f0a:	4295      	cmp	r5, r2
 8001f0c:	d366      	bcc.n	8001fdc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	6822      	ldr	r2, [r4, #0]
 8001f10:	0751      	lsls	r1, r2, #29
 8001f12:	d46c      	bmi.n	8001fee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	0713      	lsls	r3, r2, #28
 8001f16:	d507      	bpl.n	8001f28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f18:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
 8001f1a:	6921      	ldr	r1, [r4, #16]
 8001f1c:	6893      	ldr	r3, [r2, #8]
 8001f1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f28:	f7ff ffaa 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
 8001f2e:	4a36      	ldr	r2, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x12c>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	40d8      	lsrs	r0, r3
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_ClockConfig+0x130>)
 8001f3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff faa2 	bl	8001488 <HAL_InitTick>
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	4299      	cmp	r1, r3
 8001f56:	d1c6      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
 8001f58:	e7ce      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1c>
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	bf1e      	ittt	ne
 8001f62:	689a      	ldrne	r2, [r3, #8]
 8001f64:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001f68:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	bf42      	ittt	mi
 8001f6e:	689a      	ldrmi	r2, [r3, #8]
 8001f70:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001f74:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68a0      	ldr	r0, [r4, #8]
 8001f7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f7e:	4302      	orrs	r2, r0
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	e7bc      	b.n	8001efe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f84:	6862      	ldr	r2, [r4, #4]
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
 8001f88:	2a01      	cmp	r2, #1
 8001f8a:	d11d      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	d0a8      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f94:	4e1b      	ldr	r6, [pc, #108]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
 8001f96:	68b3      	ldr	r3, [r6, #8]
 8001f98:	f023 0303 	bic.w	r3, r3, #3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001fa0:	f7ff faae 	bl	8001500 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fa8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	68b3      	ldr	r3, [r6, #8]
 8001fac:	6862      	ldr	r2, [r4, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fb6:	d0a4      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff faa2 	bl	8001500 <HAL_GetTick>
 8001fbc:	1bc0      	subs	r0, r0, r7
 8001fbe:	4540      	cmp	r0, r8
 8001fc0:	d9f3      	bls.n	8001faa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001fc2:	2003      	movs	r0, #3
}
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc8:	1e91      	subs	r1, r2, #2
 8001fca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fcc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fce:	d802      	bhi.n	8001fd6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fd4:	e7dd      	b.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	f013 0f02 	tst.w	r3, #2
 8001fda:	e7da      	b.n	8001f92 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fdc:	b2ea      	uxtb	r2, r5
 8001fde:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	429d      	cmp	r5, r3
 8001fe8:	f47f af7d 	bne.w	8001ee6 <HAL_RCC_ClockConfig+0xa>
 8001fec:	e78f      	b.n	8001f0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fee:	4905      	ldr	r1, [pc, #20]	; (8002004 <HAL_RCC_ClockConfig+0x128>)
 8001ff0:	68e0      	ldr	r0, [r4, #12]
 8001ff2:	688b      	ldr	r3, [r1, #8]
 8001ff4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	608b      	str	r3, [r1, #8]
 8001ffc:	e78a      	b.n	8001f14 <HAL_RCC_ClockConfig+0x38>
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00
 8002004:	40023800 	.word	0x40023800
 8002008:	08003f9c 	.word	0x08003f9c
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002010:	4b01      	ldr	r3, [pc, #4]	; (8002018 <HAL_RCC_GetHCLKFreq+0x8>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x14>)
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	4a03      	ldr	r2, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800202a:	6810      	ldr	r0, [r2, #0]
}
 800202c:	40d8      	lsrs	r0, r3
 800202e:	4770      	bx	lr
 8002030:	40023800 	.word	0x40023800
 8002034:	08003fac 	.word	0x08003fac
 8002038:	20000008 	.word	0x20000008

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x14>)
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800204a:	6810      	ldr	r0, [r2, #0]
}
 800204c:	40d8      	lsrs	r0, r3
 800204e:	4770      	bx	lr
 8002050:	40023800 	.word	0x40023800
 8002054:	08003fac 	.word	0x08003fac
 8002058:	20000008 	.word	0x20000008

0800205c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	9e06      	ldr	r6, [sp, #24]
 8002062:	4604      	mov	r4, r0
 8002064:	4688      	mov	r8, r1
 8002066:	4617      	mov	r7, r2
 8002068:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	6893      	ldr	r3, [r2, #8]
 800206e:	ea38 0303 	bics.w	r3, r8, r3
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	429f      	cmp	r7, r3
 800207a:	d102      	bne.n	8002082 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800207c:	2000      	movs	r0, #0
}
 800207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002082:	1c6b      	adds	r3, r5, #1
 8002084:	d0f2      	beq.n	800206c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002086:	bb55      	cbnz	r5, 80020de <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002090:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002092:	6862      	ldr	r2, [r4, #4]
 8002094:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002098:	d10a      	bne.n	80020b0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800209a:	68a2      	ldr	r2, [r4, #8]
 800209c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020a0:	d002      	beq.n	80020a8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80020a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80020a6:	d103      	bne.n	80020b0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ae:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020b6:	d109      	bne.n	80020cc <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020be:	0412      	lsls	r2, r2, #16
 80020c0:	0c12      	lsrs	r2, r2, #16
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ca:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80020d2:	2300      	movs	r3, #0
 80020d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80020d8:	2003      	movs	r0, #3
 80020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80020de:	f7ff fa0f 	bl	8001500 <HAL_GetTick>
 80020e2:	1b80      	subs	r0, r0, r6
 80020e4:	4285      	cmp	r5, r0
 80020e6:	d8c0      	bhi.n	800206a <SPI_WaitFlagStateUntilTimeout+0xe>
 80020e8:	e7ce      	b.n	8002088 <SPI_WaitFlagStateUntilTimeout+0x2c>

080020ea <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020ea:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020ec:	460b      	mov	r3, r1
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	2200      	movs	r2, #0
{
 80020f4:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020f6:	f7ff ffb1 	bl	800205c <SPI_WaitFlagStateUntilTimeout>
 80020fa:	b120      	cbz	r0, 8002106 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002104:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8002106:	b002      	add	sp, #8
 8002108:	bd10      	pop	{r4, pc}

0800210a <HAL_SPI_Init>:
{
 800210a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800210c:	4604      	mov	r4, r0
 800210e:	2800      	cmp	r0, #0
 8002110:	d036      	beq.n	8002180 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8002116:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800211a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800211e:	b91b      	cbnz	r3, 8002128 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002120:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002124:	f001 f88a 	bl	800323c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002128:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800212a:	68a0      	ldr	r0, [r4, #8]
 800212c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002134:	680b      	ldr	r3, [r1, #0]
 8002136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800213c:	6863      	ldr	r3, [r4, #4]
 800213e:	4303      	orrs	r3, r0
 8002140:	68e0      	ldr	r0, [r4, #12]
 8002142:	4303      	orrs	r3, r0
 8002144:	6920      	ldr	r0, [r4, #16]
 8002146:	4303      	orrs	r3, r0
 8002148:	6960      	ldr	r0, [r4, #20]
 800214a:	4303      	orrs	r3, r0
 800214c:	69e0      	ldr	r0, [r4, #28]
 800214e:	4303      	orrs	r3, r0
 8002150:	6a20      	ldr	r0, [r4, #32]
 8002152:	4303      	orrs	r3, r0
 8002154:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002156:	4303      	orrs	r3, r0
 8002158:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800215c:	4303      	orrs	r3, r0
 800215e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002160:	0c12      	lsrs	r2, r2, #16
 8002162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002164:	f002 0204 	and.w	r2, r2, #4
 8002168:	431a      	orrs	r2, r3
 800216a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800216c:	69cb      	ldr	r3, [r1, #28]
 800216e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002172:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002174:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002176:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002178:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800217a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800217e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	bd10      	pop	{r4, pc}

08002184 <HAL_SPI_Transmit>:
{
 8002184:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002188:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800218a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800218e:	2b01      	cmp	r3, #1
{
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
 8002194:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002196:	f000 809c 	beq.w	80022d2 <HAL_SPI_Transmit+0x14e>
 800219a:	2301      	movs	r3, #1
 800219c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80021a0:	f7ff f9ae 	bl	8001500 <HAL_GetTick>
 80021a4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80021a6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80021aa:	b2c0      	uxtb	r0, r0
 80021ac:	2801      	cmp	r0, #1
 80021ae:	f040 808e 	bne.w	80022ce <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d04e      	beq.n	8002254 <HAL_SPI_Transmit+0xd0>
 80021b6:	f1b8 0f00 	cmp.w	r8, #0
 80021ba:	d04b      	beq.n	8002254 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021bc:	2303      	movs	r3, #3
 80021be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021c6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021c8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80021cc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021d0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021d2:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d4:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021d6:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021dc:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 80021de:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80021e2:	bf02      	ittt	eq
 80021e4:	681a      	ldreq	r2, [r3, #0]
 80021e6:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 80021ea:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80021f0:	bf5e      	ittt	pl
 80021f2:	681a      	ldrpl	r2, [r3, #0]
 80021f4:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80021f8:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021fa:	68e2      	ldr	r2, [r4, #12]
 80021fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	d138      	bne.n	8002276 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002204:	b11a      	cbz	r2, 800220e <HAL_SPI_Transmit+0x8a>
 8002206:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002208:	b292      	uxth	r2, r2
 800220a:	2a01      	cmp	r2, #1
 800220c:	d106      	bne.n	800221c <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 800220e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002212:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002214:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002216:	3b01      	subs	r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800221c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	b993      	cbnz	r3, 8002248 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002222:	9700      	str	r7, [sp, #0]
 8002224:	4633      	mov	r3, r6
 8002226:	2201      	movs	r2, #1
 8002228:	2102      	movs	r1, #2
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff ff16 	bl	800205c <SPI_WaitFlagStateUntilTimeout>
 8002230:	b978      	cbnz	r0, 8002252 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002232:	463a      	mov	r2, r7
 8002234:	4631      	mov	r1, r6
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff57 	bl	80020ea <SPI_CheckFlag_BSY>
 800223c:	2800      	cmp	r0, #0
 800223e:	d038      	beq.n	80022b2 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002240:	2320      	movs	r3, #32
 8002242:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002244:	2001      	movs	r0, #1
    goto error;
 8002246:	e005      	b.n	8002254 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	0790      	lsls	r0, r2, #30
 800224e:	d4de      	bmi.n	800220e <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002250:	b94e      	cbnz	r6, 8002266 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8002252:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002254:	2301      	movs	r3, #1
 8002256:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800225a:	2300      	movs	r3, #0
 800225c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002260:	b004      	add	sp, #16
 8002262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002266:	1c71      	adds	r1, r6, #1
 8002268:	d0d8      	beq.n	800221c <HAL_SPI_Transmit+0x98>
 800226a:	f7ff f949 	bl	8001500 <HAL_GetTick>
 800226e:	1bc0      	subs	r0, r0, r7
 8002270:	4286      	cmp	r6, r0
 8002272:	d8d3      	bhi.n	800221c <HAL_SPI_Transmit+0x98>
 8002274:	e7ed      	b.n	8002252 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002276:	b11a      	cbz	r2, 8002280 <HAL_SPI_Transmit+0xfc>
 8002278:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800227a:	b292      	uxth	r2, r2
 800227c:	2a01      	cmp	r2, #1
 800227e:	d106      	bne.n	800228e <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002280:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002284:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002286:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002288:	3b01      	subs	r3, #1
 800228a:	b29b      	uxth	r3, r3
 800228c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800228e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0c5      	beq.n	8002222 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	0792      	lsls	r2, r2, #30
 800229c:	d4f0      	bmi.n	8002280 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d0d7      	beq.n	8002252 <HAL_SPI_Transmit+0xce>
 80022a2:	1c73      	adds	r3, r6, #1
 80022a4:	d0f3      	beq.n	800228e <HAL_SPI_Transmit+0x10a>
 80022a6:	f7ff f92b 	bl	8001500 <HAL_GetTick>
 80022aa:	1bc0      	subs	r0, r0, r7
 80022ac:	4286      	cmp	r6, r0
 80022ae:	d8ee      	bhi.n	800228e <HAL_SPI_Transmit+0x10a>
 80022b0:	e7cf      	b.n	8002252 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022b2:	68a3      	ldr	r3, [r4, #8]
 80022b4:	b933      	cbnz	r3, 80022c4 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	9203      	str	r2, [sp, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	9303      	str	r3, [sp, #12]
 80022c2:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80022c6:	3000      	adds	r0, #0
 80022c8:	bf18      	it	ne
 80022ca:	2001      	movne	r0, #1
 80022cc:	e7c2      	b.n	8002254 <HAL_SPI_Transmit+0xd0>
 80022ce:	2002      	movs	r0, #2
 80022d0:	e7c0      	b.n	8002254 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 80022d2:	2002      	movs	r0, #2
 80022d4:	e7c4      	b.n	8002260 <HAL_SPI_Transmit+0xdc>

080022d6 <HAL_SPI_TransmitReceive>:
{
 80022d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022da:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80022dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80022e0:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80022e2:	2b01      	cmp	r3, #1
{
 80022e4:	4604      	mov	r4, r0
 80022e6:	460d      	mov	r5, r1
 80022e8:	4616      	mov	r6, r2
 80022ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80022ec:	f000 80ed 	beq.w	80024ca <HAL_SPI_TransmitReceive+0x1f4>
 80022f0:	2301      	movs	r3, #1
 80022f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80022f6:	f7ff f903 	bl	8001500 <HAL_GetTick>
  tmp  = hspi->State;
 80022fa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80022fe:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002300:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002302:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002304:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002306:	d00a      	beq.n	800231e <HAL_SPI_TransmitReceive+0x48>
 8002308:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800230c:	f040 80db 	bne.w	80024c6 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002310:	68a2      	ldr	r2, [r4, #8]
 8002312:	2a00      	cmp	r2, #0
 8002314:	f040 80d7 	bne.w	80024c6 <HAL_SPI_TransmitReceive+0x1f0>
 8002318:	2b04      	cmp	r3, #4
 800231a:	f040 80d4 	bne.w	80024c6 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800231e:	2d00      	cmp	r5, #0
 8002320:	d04e      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0xea>
 8002322:	2e00      	cmp	r6, #0
 8002324:	d04c      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0xea>
 8002326:	f1b9 0f00 	cmp.w	r9, #0
 800232a:	d049      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 800232c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002330:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8002332:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002334:	bf04      	itt	eq
 8002336:	2305      	moveq	r3, #5
 8002338:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233c:	2300      	movs	r3, #0
 800233e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002340:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002342:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002344:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002346:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800234a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800234e:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002350:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002354:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002356:	bf58      	it	pl
 8002358:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800235a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800235c:	bf58      	it	pl
 800235e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002362:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002366:	bf58      	it	pl
 8002368:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800236a:	68e2      	ldr	r2, [r4, #12]
 800236c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002370:	d15d      	bne.n	800242e <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002372:	b119      	cbz	r1, 800237c <HAL_SPI_TransmitReceive+0xa6>
 8002374:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002376:	b292      	uxth	r2, r2
 8002378:	2a01      	cmp	r2, #1
 800237a:	d106      	bne.n	800238a <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800237c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002380:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002382:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002384:	3b01      	subs	r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800238a:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002390:	b29b      	uxth	r3, r3
 8002392:	b9bb      	cbnz	r3, 80023c4 <HAL_SPI_TransmitReceive+0xee>
 8002394:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002396:	b29b      	uxth	r3, r3
 8002398:	b9a3      	cbnz	r3, 80023c4 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800239a:	f8cd 8000 	str.w	r8, [sp]
 800239e:	463b      	mov	r3, r7
 80023a0:	2201      	movs	r2, #1
 80023a2:	2102      	movs	r1, #2
 80023a4:	4620      	mov	r0, r4
 80023a6:	f7ff fe59 	bl	800205c <SPI_WaitFlagStateUntilTimeout>
 80023aa:	2800      	cmp	r0, #0
 80023ac:	d135      	bne.n	800241a <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80023ae:	4642      	mov	r2, r8
 80023b0:	4639      	mov	r1, r7
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fe99 	bl	80020ea <SPI_CheckFlag_BSY>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d079      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023bc:	2320      	movs	r3, #32
 80023be:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e02b      	b.n	800241c <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80023c4:	f1b9 0f00 	cmp.w	r9, #0
 80023c8:	d00f      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x114>
 80023ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b163      	cbz	r3, 80023ea <HAL_SPI_TransmitReceive+0x114>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	0791      	lsls	r1, r2, #30
 80023d6:	d508      	bpl.n	80023ea <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80023d8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80023dc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80023de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80023e6:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b163      	cbz	r3, 800240a <HAL_SPI_TransmitReceive+0x134>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	07d2      	lsls	r2, r2, #31
 80023f6:	d508      	bpl.n	800240a <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80023fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002400:	3b01      	subs	r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002406:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800240a:	1c78      	adds	r0, r7, #1
 800240c:	d0bf      	beq.n	800238e <HAL_SPI_TransmitReceive+0xb8>
 800240e:	f7ff f877 	bl	8001500 <HAL_GetTick>
 8002412:	eba0 0008 	sub.w	r0, r0, r8
 8002416:	4287      	cmp	r7, r0
 8002418:	d8b9      	bhi.n	800238e <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800241a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800241c:	2301      	movs	r3, #1
 800241e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002422:	2300      	movs	r3, #0
 8002424:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002428:	b005      	add	sp, #20
 800242a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800242e:	b119      	cbz	r1, 8002438 <HAL_SPI_TransmitReceive+0x162>
 8002430:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002432:	b292      	uxth	r2, r2
 8002434:	2a01      	cmp	r2, #1
 8002436:	d106      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002438:	f815 2b01 	ldrb.w	r2, [r5], #1
 800243c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800243e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002440:	3b01      	subs	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002446:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800244c:	b29b      	uxth	r3, r3
 800244e:	b91b      	cbnz	r3, 8002458 <HAL_SPI_TransmitReceive+0x182>
 8002450:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0a0      	beq.n	800239a <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002458:	f1b9 0f00 	cmp.w	r9, #0
 800245c:	d00f      	beq.n	800247e <HAL_SPI_TransmitReceive+0x1a8>
 800245e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002460:	b29b      	uxth	r3, r3
 8002462:	b163      	cbz	r3, 800247e <HAL_SPI_TransmitReceive+0x1a8>
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	0791      	lsls	r1, r2, #30
 800246a:	d508      	bpl.n	800247e <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800246c:	782a      	ldrb	r2, [r5, #0]
 800246e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002470:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002472:	3b01      	subs	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002478:	3501      	adds	r5, #1
        txallowed = 0U;
 800247a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800247e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	b163      	cbz	r3, 800249e <HAL_SPI_TransmitReceive+0x1c8>
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	07d2      	lsls	r2, r2, #31
 800248a:	d508      	bpl.n	800249e <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8002490:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002492:	3b01      	subs	r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002498:	3601      	adds	r6, #1
        txallowed = 1U;
 800249a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800249e:	1c7b      	adds	r3, r7, #1
 80024a0:	d0d3      	beq.n	800244a <HAL_SPI_TransmitReceive+0x174>
 80024a2:	f7ff f82d 	bl	8001500 <HAL_GetTick>
 80024a6:	eba0 0008 	sub.w	r0, r0, r8
 80024aa:	4287      	cmp	r7, r0
 80024ac:	d8cd      	bhi.n	800244a <HAL_SPI_TransmitReceive+0x174>
 80024ae:	e7b4      	b.n	800241a <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b0:	68a3      	ldr	r3, [r4, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1b2      	bne.n	800241c <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	9003      	str	r0, [sp, #12]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	9203      	str	r2, [sp, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	9b03      	ldr	r3, [sp, #12]
 80024c4:	e7aa      	b.n	800241c <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80024c6:	2002      	movs	r0, #2
 80024c8:	e7a8      	b.n	800241c <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80024ca:	2002      	movs	r0, #2
 80024cc:	e7ac      	b.n	8002428 <HAL_SPI_TransmitReceive+0x152>

080024ce <HAL_SPI_Receive>:
{
 80024ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024d2:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024d4:	6843      	ldr	r3, [r0, #4]
 80024d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80024da:	4604      	mov	r4, r0
 80024dc:	460d      	mov	r5, r1
 80024de:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024e0:	d10c      	bne.n	80024fc <HAL_SPI_Receive+0x2e>
 80024e2:	6883      	ldr	r3, [r0, #8]
 80024e4:	b953      	cbnz	r3, 80024fc <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024e6:	2304      	movs	r3, #4
 80024e8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 80024ec:	4613      	mov	r3, r2
 80024ee:	9600      	str	r6, [sp, #0]
 80024f0:	460a      	mov	r2, r1
 80024f2:	f7ff fef0 	bl	80022d6 <HAL_SPI_TransmitReceive>
}
 80024f6:	b002      	add	sp, #8
 80024f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80024fc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	f000 8081 	beq.w	8002608 <HAL_SPI_Receive+0x13a>
 8002506:	2301      	movs	r3, #1
 8002508:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800250c:	f7fe fff8 	bl	8001500 <HAL_GetTick>
 8002510:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002512:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002516:	b2c0      	uxtb	r0, r0
 8002518:	2801      	cmp	r0, #1
 800251a:	d173      	bne.n	8002604 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 800251c:	2d00      	cmp	r5, #0
 800251e:	d058      	beq.n	80025d2 <HAL_SPI_Receive+0x104>
 8002520:	f1b8 0f00 	cmp.w	r8, #0
 8002524:	d055      	beq.n	80025d2 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002526:	2304      	movs	r3, #4
 8002528:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252c:	2300      	movs	r3, #0
 800252e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002530:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002532:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002536:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002538:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800253a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800253c:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253e:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002540:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002546:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 8002548:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 800254c:	bf02      	ittt	eq
 800254e:	681a      	ldreq	r2, [r3, #0]
 8002550:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002554:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800255a:	bf5e      	ittt	pl
 800255c:	681a      	ldrpl	r2, [r3, #0]
 800255e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002562:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002564:	68e3      	ldr	r3, [r4, #12]
 8002566:	b1cb      	cbz	r3, 800259c <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8002568:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	b1d3      	cbz	r3, 80025a4 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	07d2      	lsls	r2, r2, #31
 8002574:	d53c      	bpl.n	80025f0 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 800257c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800257e:	3b01      	subs	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002584:	e7f0      	b.n	8002568 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	07d0      	lsls	r0, r2, #31
 800258c:	d51f      	bpl.n	80025ce <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 800258e:	7b1b      	ldrb	r3, [r3, #12]
 8002590:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 8002594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002596:	3b01      	subs	r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 800259c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025aa:	d10b      	bne.n	80025c4 <HAL_SPI_Receive+0xf6>
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_Receive+0xec>
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d104      	bne.n	80025c4 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c2:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80025c6:	3000      	adds	r0, #0
 80025c8:	bf18      	it	ne
 80025ca:	2001      	movne	r0, #1
 80025cc:	e001      	b.n	80025d2 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025ce:	b93e      	cbnz	r6, 80025e0 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 80025d0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80025de:	e78a      	b.n	80024f6 <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025e0:	1c71      	adds	r1, r6, #1
 80025e2:	d0db      	beq.n	800259c <HAL_SPI_Receive+0xce>
 80025e4:	f7fe ff8c 	bl	8001500 <HAL_GetTick>
 80025e8:	1bc0      	subs	r0, r0, r7
 80025ea:	4286      	cmp	r6, r0
 80025ec:	d8d6      	bhi.n	800259c <HAL_SPI_Receive+0xce>
 80025ee:	e7ef      	b.n	80025d0 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	d0ed      	beq.n	80025d0 <HAL_SPI_Receive+0x102>
 80025f4:	1c73      	adds	r3, r6, #1
 80025f6:	d0b7      	beq.n	8002568 <HAL_SPI_Receive+0x9a>
 80025f8:	f7fe ff82 	bl	8001500 <HAL_GetTick>
 80025fc:	1bc0      	subs	r0, r0, r7
 80025fe:	4286      	cmp	r6, r0
 8002600:	d8b2      	bhi.n	8002568 <HAL_SPI_Receive+0x9a>
 8002602:	e7e5      	b.n	80025d0 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8002604:	2002      	movs	r0, #2
 8002606:	e7e4      	b.n	80025d2 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 8002608:	2002      	movs	r0, #2
 800260a:	e774      	b.n	80024f6 <HAL_SPI_Receive+0x28>

0800260c <HAL_SPI_ErrorCallback>:
 800260c:	4770      	bx	lr
	...

08002610 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002610:	6803      	ldr	r3, [r0, #0]
{
 8002612:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002614:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002616:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002618:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800261c:	2d01      	cmp	r5, #1
{
 800261e:	b085      	sub	sp, #20
 8002620:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002622:	d105      	bne.n	8002630 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002624:	064d      	lsls	r5, r1, #25
 8002626:	d503      	bpl.n	8002630 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8002628:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800262a:	4798      	blx	r3
}
 800262c:	b005      	add	sp, #20
 800262e:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002630:	0795      	lsls	r5, r2, #30
 8002632:	d504      	bpl.n	800263e <HAL_SPI_IRQHandler+0x2e>
 8002634:	0608      	lsls	r0, r1, #24
 8002636:	d502      	bpl.n	800263e <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8002638:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800263a:	4620      	mov	r0, r4
 800263c:	e7f5      	b.n	800262a <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800263e:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8002642:	d0f3      	beq.n	800262c <HAL_SPI_IRQHandler+0x1c>
 8002644:	068d      	lsls	r5, r1, #26
 8002646:	d5f1      	bpl.n	800262c <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002648:	0650      	lsls	r0, r2, #25
 800264a:	d50f      	bpl.n	800266c <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800264c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002650:	2803      	cmp	r0, #3
 8002652:	f04f 0500 	mov.w	r5, #0
 8002656:	d041      	beq.n	80026dc <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800265a:	f040 0004 	orr.w	r0, r0, #4
 800265e:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002660:	9500      	str	r5, [sp, #0]
 8002662:	68d8      	ldr	r0, [r3, #12]
 8002664:	9000      	str	r0, [sp, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	9000      	str	r0, [sp, #0]
 800266a:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800266c:	0695      	lsls	r5, r2, #26
 800266e:	d50c      	bpl.n	800268a <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002672:	f040 0001 	orr.w	r0, r0, #1
 8002676:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002678:	2000      	movs	r0, #0
 800267a:	9002      	str	r0, [sp, #8]
 800267c:	6898      	ldr	r0, [r3, #8]
 800267e:	9002      	str	r0, [sp, #8]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002686:	6018      	str	r0, [r3, #0]
 8002688:	9802      	ldr	r0, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 800268a:	05d0      	lsls	r0, r2, #23
 800268c:	d508      	bpl.n	80026a0 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800268e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002690:	f042 0208 	orr.w	r2, r2, #8
 8002694:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002696:	2200      	movs	r2, #0
 8002698:	9203      	str	r2, [sp, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	9203      	str	r2, [sp, #12]
 800269e:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d0c2      	beq.n	800262c <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026ac:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80026ae:	2201      	movs	r2, #1
 80026b0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026b4:	078a      	lsls	r2, r1, #30
 80026b6:	d018      	beq.n	80026ea <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026b8:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80026ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026bc:	f022 0203 	bic.w	r2, r2, #3
 80026c0:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 80026c2:	b118      	cbz	r0, 80026cc <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_SPI_IRQHandler+0xe4>)
 80026c6:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80026c8:	f7ff f842 	bl	8001750 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80026cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0ac      	beq.n	800262c <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_SPI_IRQHandler+0xe4>)
 80026d4:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80026d6:	f7ff f83b 	bl	8001750 <HAL_DMA_Abort_IT>
 80026da:	e7a7      	b.n	800262c <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026dc:	9501      	str	r5, [sp, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	9201      	str	r2, [sp, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	9b01      	ldr	r3, [sp, #4]
        return;
 80026e8:	e7a0      	b.n	800262c <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff ff8e 	bl	800260c <HAL_SPI_ErrorCallback>
 80026f0:	e79c      	b.n	800262c <HAL_SPI_IRQHandler+0x1c>
 80026f2:	bf00      	nop
 80026f4:	080026f9 	.word	0x080026f9

080026f8 <SPI_DMAAbortOnError>:
{
 80026f8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002700:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002702:	f7ff ff83 	bl	800260c <HAL_SPI_ErrorCallback>
 8002706:	bd08      	pop	{r3, pc}

08002708 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800270c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800270e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002710:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002712:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002718:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800271a:	6133      	str	r3, [r6, #16]
{
 800271c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271e:	6883      	ldr	r3, [r0, #8]
 8002720:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002722:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002724:	4303      	orrs	r3, r0
 8002726:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002728:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800272c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800272e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002732:	430b      	orrs	r3, r1
 8002734:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002736:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002738:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800273a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800273c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002740:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002742:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002746:	6173      	str	r3, [r6, #20]
 8002748:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274a:	d17c      	bne.n	8002846 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	429e      	cmp	r6, r3
 800274e:	d003      	beq.n	8002758 <UART_SetConfig+0x50>
 8002750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002754:	429e      	cmp	r6, r3
 8002756:	d144      	bne.n	80027e2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002758:	f7ff fc70 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 800275c:	2519      	movs	r5, #25
 800275e:	fb05 f300 	mul.w	r3, r5, r0
 8002762:	6860      	ldr	r0, [r4, #4]
 8002764:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002768:	0040      	lsls	r0, r0, #1
 800276a:	fbb3 f3f0 	udiv	r3, r3, r0
 800276e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002772:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002776:	f7ff fc61 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	4368      	muls	r0, r5
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb0 f7f3 	udiv	r7, r0, r3
 8002784:	f7ff fc5a 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8002788:	6863      	ldr	r3, [r4, #4]
 800278a:	4368      	muls	r0, r5
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	fbb3 f3f9 	udiv	r3, r3, r9
 8002796:	fb09 7313 	mls	r3, r9, r3, r7
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	3332      	adds	r3, #50	; 0x32
 800279e:	fbb3 f3f9 	udiv	r3, r3, r9
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80027a8:	f7ff fc48 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 80027ac:	6862      	ldr	r2, [r4, #4]
 80027ae:	4368      	muls	r0, r5
 80027b0:	0052      	lsls	r2, r2, #1
 80027b2:	fbb0 faf2 	udiv	sl, r0, r2
 80027b6:	f7ff fc41 	bl	800203c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027ba:	6863      	ldr	r3, [r4, #4]
 80027bc:	4368      	muls	r0, r5
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80027c8:	fb09 a313 	mls	r3, r9, r3, sl
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027da:	443b      	add	r3, r7
 80027dc:	60b3      	str	r3, [r6, #8]
 80027de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027e2:	f7ff fc1b 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80027e6:	2519      	movs	r5, #25
 80027e8:	fb05 f300 	mul.w	r3, r5, r0
 80027ec:	6860      	ldr	r0, [r4, #4]
 80027ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027f2:	0040      	lsls	r0, r0, #1
 80027f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80027f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80027fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002800:	f7ff fc0c 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002804:	6863      	ldr	r3, [r4, #4]
 8002806:	4368      	muls	r0, r5
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb0 f7f3 	udiv	r7, r0, r3
 800280e:	f7ff fc05 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	4368      	muls	r0, r5
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002820:	fb09 7313 	mls	r3, r9, r3, r7
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	fbb3 f3f9 	udiv	r3, r3, r9
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002832:	f7ff fbf3 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002836:	6862      	ldr	r2, [r4, #4]
 8002838:	4368      	muls	r0, r5
 800283a:	0052      	lsls	r2, r2, #1
 800283c:	fbb0 faf2 	udiv	sl, r0, r2
 8002840:	f7ff fbec 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002844:	e7b9      	b.n	80027ba <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002846:	429e      	cmp	r6, r3
 8002848:	d002      	beq.n	8002850 <UART_SetConfig+0x148>
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <UART_SetConfig+0x230>)
 800284c:	429e      	cmp	r6, r3
 800284e:	d140      	bne.n	80028d2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002850:	f7ff fbf4 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8002854:	6867      	ldr	r7, [r4, #4]
 8002856:	2519      	movs	r5, #25
 8002858:	f04f 0964 	mov.w	r9, #100	; 0x64
 800285c:	fb05 f300 	mul.w	r3, r5, r0
 8002860:	00bf      	lsls	r7, r7, #2
 8002862:	fbb3 f3f7 	udiv	r3, r3, r7
 8002866:	fbb3 f3f9 	udiv	r3, r3, r9
 800286a:	011f      	lsls	r7, r3, #4
 800286c:	f7ff fbe6 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8002870:	6863      	ldr	r3, [r4, #4]
 8002872:	4368      	muls	r0, r5
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fbb0 f8f3 	udiv	r8, r0, r3
 800287a:	f7ff fbdf 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	4368      	muls	r0, r5
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	fbb3 f3f9 	udiv	r3, r3, r9
 800288c:	fb09 8313 	mls	r3, r9, r3, r8
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3332      	adds	r3, #50	; 0x32
 8002894:	fbb3 f3f9 	udiv	r3, r3, r9
 8002898:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800289c:	f7ff fbce 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 80028a0:	6862      	ldr	r2, [r4, #4]
 80028a2:	4368      	muls	r0, r5
 80028a4:	0092      	lsls	r2, r2, #2
 80028a6:	fbb0 faf2 	udiv	sl, r0, r2
 80028aa:	f7ff fbc7 	bl	800203c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028ae:	6863      	ldr	r3, [r4, #4]
 80028b0:	4368      	muls	r0, r5
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80028bc:	fb09 a313 	mls	r3, r9, r3, sl
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	ea43 0308 	orr.w	r3, r3, r8
 80028d0:	e783      	b.n	80027da <UART_SetConfig+0xd2>
 80028d2:	f7ff fba3 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80028d6:	6867      	ldr	r7, [r4, #4]
 80028d8:	2519      	movs	r5, #25
 80028da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80028de:	fb05 f300 	mul.w	r3, r5, r0
 80028e2:	00bf      	lsls	r7, r7, #2
 80028e4:	fbb3 f3f7 	udiv	r3, r3, r7
 80028e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80028ec:	011f      	lsls	r7, r3, #4
 80028ee:	f7ff fb95 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	4368      	muls	r0, r5
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fbb0 f8f3 	udiv	r8, r0, r3
 80028fc:	f7ff fb8e 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002900:	6863      	ldr	r3, [r4, #4]
 8002902:	4368      	muls	r0, r5
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	fbb3 f3f9 	udiv	r3, r3, r9
 800290e:	fb09 8313 	mls	r3, r9, r3, r8
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	3332      	adds	r3, #50	; 0x32
 8002916:	fbb3 f3f9 	udiv	r3, r3, r9
 800291a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800291e:	f7ff fb7d 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	4368      	muls	r0, r5
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	fbb0 faf2 	udiv	sl, r0, r2
 800292c:	f7ff fb76 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8002930:	e7bd      	b.n	80028ae <UART_SetConfig+0x1a6>
 8002932:	bf00      	nop
 8002934:	40011000 	.word	0x40011000
 8002938:	40011400 	.word	0x40011400

0800293c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	4604      	mov	r4, r0
 8002940:	460e      	mov	r6, r1
 8002942:	4617      	mov	r7, r2
 8002944:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	680b      	ldr	r3, [r1, #0]
 800294a:	ea36 0303 	bics.w	r3, r6, r3
 800294e:	d101      	bne.n	8002954 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002950:	2000      	movs	r0, #0
}
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002954:	1c6b      	adds	r3, r5, #1
 8002956:	d0f7      	beq.n	8002948 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002958:	b995      	cbnz	r5, 8002980 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002962:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800296c:	2320      	movs	r3, #32
 800296e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002972:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002976:	2300      	movs	r3, #0
 8002978:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800297c:	2003      	movs	r0, #3
 800297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002980:	f7fe fdbe 	bl	8001500 <HAL_GetTick>
 8002984:	1bc0      	subs	r0, r0, r7
 8002986:	4285      	cmp	r5, r0
 8002988:	d2dd      	bcs.n	8002946 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800298a:	e7e6      	b.n	800295a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800298c <HAL_UART_Init>:
{
 800298c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800298e:	4604      	mov	r4, r0
 8002990:	b340      	cbz	r0, 80029e4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002992:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002996:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800299a:	b91b      	cbnz	r3, 80029a4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800299c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029a0:	f000 fd5a 	bl	8003458 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029a4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029a6:	2324      	movs	r3, #36	; 0x24
 80029a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80029ac:	68d3      	ldr	r3, [r2, #12]
 80029ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029b2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff fea7 	bl	8002708 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80029d6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80029da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80029de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80029e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029e4:	2001      	movs	r0, #1
}
 80029e6:	bd10      	pop	{r4, pc}

080029e8 <HAL_UART_Transmit>:
{
 80029e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ec:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80029ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029f2:	2b20      	cmp	r3, #32
{
 80029f4:	4604      	mov	r4, r0
 80029f6:	460d      	mov	r5, r1
 80029f8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80029fa:	d14f      	bne.n	8002a9c <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d04a      	beq.n	8002a96 <HAL_UART_Transmit+0xae>
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d048      	beq.n	8002a96 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002a04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d047      	beq.n	8002a9c <HAL_UART_Transmit+0xb4>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a16:	2321      	movs	r3, #33	; 0x21
 8002a18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fd70 	bl	8001500 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002a20:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002a24:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002a26:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002a2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b96b      	cbnz	r3, 8002a4c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a30:	463b      	mov	r3, r7
 8002a32:	4632      	mov	r2, r6
 8002a34:	2140      	movs	r1, #64	; 0x40
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff ff80 	bl	800293c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a3c:	b9b0      	cbnz	r0, 8002a6c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002a4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a54:	68a3      	ldr	r3, [r4, #8]
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	4632      	mov	r2, r6
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002a62:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a64:	d10e      	bne.n	8002a84 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	f7ff ff69 	bl	800293c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a6a:	b110      	cbz	r0, 8002a72 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a72:	882b      	ldrh	r3, [r5, #0]
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a7c:	6923      	ldr	r3, [r4, #16]
 8002a7e:	b943      	cbnz	r3, 8002a92 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002a80:	3502      	adds	r5, #2
 8002a82:	e7d2      	b.n	8002a2a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a84:	f7ff ff5a 	bl	800293c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d1ef      	bne.n	8002a6c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	782a      	ldrb	r2, [r5, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	3501      	adds	r5, #1
 8002a94:	e7c9      	b.n	8002a2a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002a96:	2001      	movs	r0, #1
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002a9c:	2002      	movs	r0, #2
}
 8002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002aa2 <_ZN7ADXL3728regWriteEhh>:
 */

#include "adxl372.h"

void ADXL372::regWrite(uint8_t reg, uint8_t data)
{
 8002aa2:	b513      	push	{r0, r1, r4, lr}
 8002aa4:	4604      	mov	r4, r0
	uint8_t d[2] = { };
	d[0] = reg << 1; //shift left 1, add 0 (LSB is R/W Bit)
 8002aa6:	0049      	lsls	r1, r1, #1
 8002aa8:	f88d 1004 	strb.w	r1, [sp, #4]
	d[1] = data;
 8002aac:	f88d 2005 	strb.w	r2, [sp, #5]

	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_RESET); //TODO replace GPIO with sturct
 8002ab0:	8881      	ldrh	r1, [r0, #4]
 8002ab2:	6880      	ldr	r0, [r0, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f7fe ffed 	bl	8001a94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_HANDLER, d, 2, 1000);
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	a901      	add	r1, sp, #4
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	6820      	ldr	r0, [r4, #0]
 8002ac4:	f7ff fb5e 	bl	8002184 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	88a1      	ldrh	r1, [r4, #4]
 8002acc:	68a0      	ldr	r0, [r4, #8]
 8002ace:	f7fe ffe1 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd10      	pop	{r4, pc}

08002ad6 <_ZN7ADXL37210initializeEv>:
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
	return d[1];
}

void ADXL372::initialize()
{
 8002ad6:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
 8002ad8:	8881      	ldrh	r1, [r0, #4]
 8002ada:	6880      	ldr	r0, [r0, #8]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f7fe ffd9 	bl	8001a94 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002ae2:	200a      	movs	r0, #10
}
 8002ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(10);
 8002ae8:	f7fe bd10 	b.w	800150c <HAL_Delay>

08002aec <_ZN6BMI1608regWriteEhh>:

#include "bmi160.h"


void BMI160::regWrite(uint8_t reg, uint8_t data)
{
 8002aec:	b513      	push	{r0, r1, r4, lr}
 8002aee:	4604      	mov	r4, r0
	uint8_t d[2] = { };
	d[0] = reg;
 8002af0:	f88d 1004 	strb.w	r1, [sp, #4]
	d[1] = data;
 8002af4:	f88d 2005 	strb.w	r2, [sp, #5]

	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET); //TODO replace GPIO with sturct
 8002af8:	8881      	ldrh	r1, [r0, #4]
 8002afa:	6880      	ldr	r0, [r0, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f7fe ffc9 	bl	8001a94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(BMI160_SPI_HANDLER, d, 2, 1000);
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	a901      	add	r1, sp, #4
 8002b08:	2202      	movs	r2, #2
 8002b0a:	6820      	ldr	r0, [r4, #0]
 8002b0c:	f7ff fb3a 	bl	8002184 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET);
 8002b10:	2201      	movs	r2, #1
 8002b12:	88a1      	ldrh	r1, [r4, #4]
 8002b14:	68a0      	ldr	r0, [r4, #8]
 8002b16:	f7fe ffbd 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd10      	pop	{r4, pc}

08002b1e <_ZN6BMI1607regReadEh>:

uint8_t BMI160::regRead(uint8_t reg)
{
 8002b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d[2] = {};
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 8002b20:	ad02      	add	r5, sp, #8
	uint8_t d[2] = {};
 8002b22:	2200      	movs	r2, #0
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 8002b24:	3980      	subs	r1, #128	; 0x80
{
 8002b26:	4604      	mov	r4, r0
	uint8_t d[2] = {};
 8002b28:	f8ad 2004 	strh.w	r2, [sp, #4]
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 8002b2c:	f805 1d04 	strb.w	r1, [r5, #-4]!

	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET);
 8002b30:	8881      	ldrh	r1, [r0, #4]
 8002b32:	6880      	ldr	r0, [r0, #8]
 8002b34:	f7fe ffae 	bl	8001a94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(BMI160_SPI_HANDLER, &d[0], 1, 1000);
 8002b38:	4629      	mov	r1, r5
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	2201      	movs	r2, #1
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	f7ff fb1f 	bl	8002184 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe fce0 	bl	800150c <HAL_Delay>
	HAL_SPI_Receive(BMI160_SPI_HANDLER, &d[1], 1, 1000);
 8002b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b50:	f10d 0105 	add.w	r1, sp, #5
 8002b54:	2201      	movs	r2, #1
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	f7ff fcb9 	bl	80024ce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET);
 8002b5c:	68a0      	ldr	r0, [r4, #8]
 8002b5e:	88a1      	ldrh	r1, [r4, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f7fe ff97 	bl	8001a94 <HAL_GPIO_WritePin>
	return d[1];
}
 8002b66:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002b6a:	b003      	add	sp, #12
 8002b6c:	bd30      	pop	{r4, r5, pc}

08002b6e <_ZN6BMI16016initializeBMI160Ev>:

void BMI160::initializeBMI160()
{
 8002b6e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET); //Set css pin high to bring sensor into SPI mode. Consider using a physical pulldown resistor at css to make sure it is low at boot time of bmi160
 8002b70:	8881      	ldrh	r1, [r0, #4]
{
 8002b72:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET); //Set css pin high to bring sensor into SPI mode. Consider using a physical pulldown resistor at css to make sure it is low at boot time of bmi160
 8002b74:	2201      	movs	r2, #1
 8002b76:	6880      	ldr	r0, [r0, #8]
 8002b78:	f7fe ff8c 	bl	8001a94 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b7c:	2064      	movs	r0, #100	; 0x64
 8002b7e:	f7fe fcc5 	bl	800150c <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET); //Soft reset to get into known state
 8002b82:	22b6      	movs	r2, #182	; 0xb6
 8002b84:	217e      	movs	r1, #126	; 0x7e
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7ff ffb0 	bl	8002aec <_ZN6BMI1608regWriteEhh>
	HAL_Delay(10);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f7fe fcbd 	bl	800150c <HAL_Delay>
	regRead(0x0F); //dummy read bmi to force spi modes
 8002b92:	210f      	movs	r1, #15
 8002b94:	4620      	mov	r0, r4
 8002b96:	f7ff ffc2 	bl	8002b1e <_ZN6BMI1607regReadEh>
	HAL_Delay(10);
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	f7fe fcb6 	bl	800150c <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL); //start accelerometer
 8002ba0:	2211      	movs	r2, #17
 8002ba2:	217e      	movs	r1, #126	; 0x7e
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff ffa1 	bl	8002aec <_ZN6BMI1608regWriteEhh>
	HAL_Delay(2000); //TODO can be shorter but must be checked!!! Bitred...
 8002baa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bae:	f7fe fcad 	bl	800150c <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL); //start gyros
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	2215      	movs	r2, #21
 8002bb6:	217e      	movs	r1, #126	; 0x7e
 8002bb8:	f7ff ff98 	bl	8002aec <_ZN6BMI1608regWriteEhh>
	HAL_Delay(2000); //TODO can be shorter but must be checked!!!
 8002bbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8002bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(2000); //TODO can be shorter but must be checked!!!
 8002bc4:	f7fe bca2 	b.w	800150c <HAL_Delay>

08002bc8 <_ZN6BMI16015multiReadBMI160EhPhh>:
	//Testing device id of device
	return(regRead(0x00)==0x1D);
}

void BMI160::multiReadBMI160(uint8_t startReg, uint8_t* data, uint8_t nos)
{
 8002bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bca:	4604      	mov	r4, r0
 8002bcc:	4616      	mov	r6, r2
 8002bce:	460d      	mov	r5, r1
	//Send one byte specifing the register to read
	//Read nos bytes of data back
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	8881      	ldrh	r1, [r0, #4]
 8002bd4:	6880      	ldr	r0, [r0, #8]
{
 8002bd6:	461f      	mov	r7, r3
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET);
 8002bd8:	f7fe ff5c 	bl	8001a94 <HAL_GPIO_WritePin>
	uint8_t startRegOne = startReg + 0b10000000; //read access so plus 128
 8002bdc:	a902      	add	r1, sp, #8
 8002bde:	3d80      	subs	r5, #128	; 0x80
 8002be0:	f801 5d01 	strb.w	r5, [r1, #-1]!
	HAL_SPI_Transmit(BMI160_SPI_HANDLER, &startRegOne, 1, 1000);
 8002be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be8:	2201      	movs	r2, #1
 8002bea:	6820      	ldr	r0, [r4, #0]
 8002bec:	f7ff faca 	bl	8002184 <HAL_SPI_Transmit>
	HAL_SPI_Receive(BMI160_SPI_HANDLER, data, nos, 1000);
 8002bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf4:	463a      	mov	r2, r7
 8002bf6:	4631      	mov	r1, r6
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	f7ff fc68 	bl	80024ce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	88a1      	ldrh	r1, [r4, #4]
 8002c02:	68a0      	ldr	r0, [r4, #8]
 8002c04:	f7fe ff46 	bl	8001a94 <HAL_GPIO_WritePin>
}
 8002c08:	b003      	add	sp, #12
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c0c <_ZN6BMI16021getReadableDataBMI160EPl>:

void BMI160::getReadableDataBMI160(int32_t* data)
{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	b088      	sub	sp, #32
	//Read sensor bytes into buffer
	uint8_t buffer[15] = {0x00};
 8002c10:	ad04      	add	r5, sp, #16
{
 8002c12:	4606      	mov	r6, r0
	uint8_t buffer[15] = {0x00};
 8002c14:	220f      	movs	r2, #15
{
 8002c16:	460c      	mov	r4, r1
	uint8_t buffer[15] = {0x00};
 8002c18:	4628      	mov	r0, r5
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f000 fd04 	bl	8003628 <memset>
	uint16_t dataBuffer[7] = {0};
 8002c20:	220e      	movs	r2, #14
 8002c22:	2100      	movs	r1, #0
 8002c24:	4668      	mov	r0, sp
 8002c26:	f000 fcff 	bl	8003628 <memset>
	multiReadBMI160(0x0C, buffer, 15);
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	210c      	movs	r1, #12
 8002c30:	4630      	mov	r0, r6
 8002c32:	f7ff ffc9 	bl	8002bc8 <_ZN6BMI16015multiReadBMI160EhPhh>
 8002c36:	2300      	movs	r3, #0

	//Calculate Accel and Gyro values
	//k counts the position of buffer[]
	//i counts the position of data[]
	uint8_t k = 0;
	for(uint8_t i = 0; i < 6; i++)
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d008      	beq.n	8002c4e <_ZN6BMI16021getReadableDataBMI160EPl+0x42>
	{
		dataBuffer[i] = (uint16_t) buffer[k++]; 				//LSB
		dataBuffer[i] += ((uint16_t) buffer[k++]) << 8; 		//MSB
 8002c3c:	18ea      	adds	r2, r5, r3
 8002c3e:	7851      	ldrb	r1, [r2, #1]
		dataBuffer[i] = (uint16_t) buffer[k++]; 				//LSB
 8002c40:	5cea      	ldrb	r2, [r5, r3]
		dataBuffer[i] += ((uint16_t) buffer[k++]) << 8; 		//MSB
 8002c42:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8002c46:	f82d 2003 	strh.w	r2, [sp, r3]
 8002c4a:	3302      	adds	r3, #2
	for(uint8_t i = 0; i < 6; i++)
 8002c4c:	e7f4      	b.n	8002c38 <_ZN6BMI16021getReadableDataBMI160EPl+0x2c>
 8002c4e:	2300      	movs	r3, #0

	//Convert two's complement to signed integer
	//Bitflip and than chast...
	for(uint8_t k = 0; k < 6; k++)
	{
		if(dataBuffer[k] < 32768)
 8002c50:	f83d 2013 	ldrh.w	r2, [sp, r3, lsl #1]
 8002c54:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
		{
			data[k] = dataBuffer[k];
		}
		else
		{
			data[k] = -1 * (65536 - dataBuffer[k]);
 8002c58:	bfa8      	it	ge
 8002c5a:	f5a2 3280 	subge.w	r2, r2, #65536	; 0x10000
 8002c5e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8002c62:	3301      	adds	r3, #1
	for(uint8_t k = 0; k < 6; k++)
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d1f3      	bne.n	8002c50 <_ZN6BMI16021getReadableDataBMI160EPl+0x44>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f103 020c 	add.w	r2, r3, #12
	}

	//Calculate Sensor Time
	//k counts the position of buffer[]
	//j counts the bitshift position
	for(uint8_t j = 0; j < 3; j++)
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	d00b      	beq.n	8002c8c <_ZN6BMI16021getReadableDataBMI160EPl+0x80>
	{
		data[6] += (((uint32_t) buffer[k++]) << (8*j)); 				//sensor time lsb to msb
 8002c74:	a908      	add	r1, sp, #32
 8002c76:	440a      	add	r2, r1
 8002c78:	00d9      	lsls	r1, r3, #3
 8002c7a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002c7e:	fa02 f101 	lsl.w	r1, r2, r1
 8002c82:	69a2      	ldr	r2, [r4, #24]
 8002c84:	440a      	add	r2, r1
 8002c86:	61a2      	str	r2, [r4, #24]
 8002c88:	3301      	adds	r3, #1
	for(uint8_t j = 0; j < 3; j++)
 8002c8a:	e7ee      	b.n	8002c6a <_ZN6BMI16021getReadableDataBMI160EPl+0x5e>
	}
}
 8002c8c:	b008      	add	sp, #32
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}

08002c90 <_ZN6BMI16011setAccRangeE16BMI160AccelRange>:
	multiReadBMI160(0x0C, data, 15);
}

void BMI160::setAccRange(BMI160AccelRange range)
{
	regWrite(BMI160_RA_ACCEL_RANGE, range);
 8002c90:	460a      	mov	r2, r1
 8002c92:	2141      	movs	r1, #65	; 0x41
 8002c94:	f7ff bf2a 	b.w	8002aec <_ZN6BMI1608regWriteEhh>

08002c98 <_ZN6BMI16012setGyroRangeE15BMI160GyroRange>:
}

void BMI160::setGyroRange(BMI160GyroRange range)
{
	regWrite(BMI160_RA_GYRO_RANGE, range);
 8002c98:	460a      	mov	r2, r1
 8002c9a:	2143      	movs	r1, #67	; 0x43
 8002c9c:	f7ff bf26 	b.w	8002aec <_ZN6BMI1608regWriteEhh>

08002ca0 <_ZN6BMI1606getBitEhh>:
{

}

bool BMI160::getBit(uint8_t reg, uint8_t bitPos)
{
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4614      	mov	r4, r2
	uint8_t buf = regRead(reg);
 8002ca4:	f7ff ff3b 	bl	8002b1e <_ZN6BMI1607regReadEh>
	buf = buf << (8 - bitPos);
 8002ca8:	f1c4 0308 	rsb	r3, r4, #8
 8002cac:	4098      	lsls	r0, r3
	buf = buf >> bitPos;
 8002cae:	b2c0      	uxtb	r0, r0
 8002cb0:	4120      	asrs	r0, r4
	return(buf != 0);
 8002cb2:	b2c0      	uxtb	r0, r0

}
 8002cb4:	3000      	adds	r0, #0
 8002cb6:	bf18      	it	ne
 8002cb8:	2001      	movne	r0, #1
 8002cba:	bd10      	pop	{r4, pc}

08002cbc <_ZN6BMI1608writeBitEhhb>:

void BMI160::writeBit(uint8_t reg, uint8_t bitPos, bool bit)
{
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	461f      	mov	r7, r3
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	460d      	mov	r5, r1
 8002cc4:	4616      	mov	r6, r2
	if(getBit(reg, bitPos) != bit) //Check if bit is wrong
 8002cc6:	f7ff ffeb 	bl	8002ca0 <_ZN6BMI1606getBitEhh>
 8002cca:	42b8      	cmp	r0, r7
 8002ccc:	d00d      	beq.n	8002cea <_ZN6BMI1608writeBitEhhb+0x2e>
	{
		uint8_t buf = regRead(reg);
 8002cce:	4629      	mov	r1, r5
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff ff24 	bl	8002b1e <_ZN6BMI1607regReadEh>
		buf ^= 1UL << bitPos; //Toggle bit
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	40b2      	lsls	r2, r6
 8002cda:	4042      	eors	r2, r0
		regWrite(reg, buf);
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4620      	mov	r0, r4
 8002ce0:	b2d2      	uxtb	r2, r2
	}
}
 8002ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		regWrite(reg, buf);
 8002ce6:	f7ff bf01 	b.w	8002aec <_ZN6BMI1608regWriteEhh>
 8002cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cec:	b530      	push	{r4, r5, lr}
 8002cee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <_Z18SystemClock_Configv+0xa4>)
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cf8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002cfc:	6419      	str	r1, [r3, #64]	; 0x40
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d00:	4924      	ldr	r1, [pc, #144]	; (8002d94 <_Z18SystemClock_Configv+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0a:	9202      	str	r2, [sp, #8]
 8002d0c:	680b      	ldr	r3, [r1, #0]
 8002d0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d1a:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d24:	2301      	movs	r3, #1
 8002d26:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002d28:	2310      	movs	r3, #16
 8002d2a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d2c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d2e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d32:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d34:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d36:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d38:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d3a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d3c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d40:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d42:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d44:	f7fe ff1a 	bl	8001b7c <HAL_RCC_OscConfig>
 8002d48:	b100      	cbz	r0, 8002d4c <_Z18SystemClock_Configv+0x60>
 8002d4a:	e7fe      	b.n	8002d4a <_Z18SystemClock_Configv+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d4c:	230f      	movs	r3, #15
 8002d4e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d50:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d58:	4621      	mov	r1, r4
 8002d5a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d5c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d5e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d60:	f7ff f8bc 	bl	8001edc <HAL_RCC_ClockConfig>
 8002d64:	4604      	mov	r4, r0
 8002d66:	b100      	cbz	r0, 8002d6a <_Z18SystemClock_Configv+0x7e>
 8002d68:	e7fe      	b.n	8002d68 <_Z18SystemClock_Configv+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002d6a:	f7ff f951 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d72:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d76:	f7fe fc2f 	bl	80015d8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7fe fc42 	bl	8001604 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d80:	4622      	mov	r2, r4
 8002d82:	4621      	mov	r1, r4
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7fe fbe6 	bl	8001558 <HAL_NVIC_SetPriority>
}
 8002d8c:	b015      	add	sp, #84	; 0x54
 8002d8e:	bd30      	pop	{r4, r5, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000

08002d98 <main>:
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b099      	sub	sp, #100	; 0x64
 8002d9e:	af06      	add	r7, sp, #24
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da0:	2500      	movs	r5, #0
 8002da2:	4c9f      	ldr	r4, [pc, #636]	; (8003020 <main+0x288>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002da4:	4e9f      	ldr	r6, [pc, #636]	; (8003024 <main+0x28c>)
  HAL_Init();
 8002da6:	f7fe fb93 	bl	80014d0 <HAL_Init>
  SystemClock_Config();
 8002daa:	f7ff ff9f 	bl	8002cec <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	60bd      	str	r5, [r7, #8]
 8002db0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6323      	str	r3, [r4, #48]	; 0x30
 8002db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	60fd      	str	r5, [r7, #12]
 8002dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6323      	str	r3, [r4, #48]	; 0x30
 8002dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	613d      	str	r5, [r7, #16]
 8002dd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	6323      	str	r3, [r4, #48]	; 0x30
 8002de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002de6:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002dea:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8002dee:	4630      	mov	r0, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	693b      	ldr	r3, [r7, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002df2:	f7fe fe4f 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002df6:	462a      	mov	r2, r5
 8002df8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002dfc:	488a      	ldr	r0, [pc, #552]	; (8003028 <main+0x290>)
 8002dfe:	f7fe fe49 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e08:	f107 012c 	add.w	r1, r7, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e0c:	4b87      	ldr	r3, [pc, #540]	; (800302c <main+0x294>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e0e:	4886      	ldr	r0, [pc, #536]	; (8003028 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	637d      	str	r5, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e14:	f7fe fd68 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI3_CSS_Pin SPI2_CSS_Pin SPI1_CSS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin;
 8002e18:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e22:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002e28:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	637d      	str	r5, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2e:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f7fe fd59 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002e3e:	487c      	ldr	r0, [pc, #496]	; (8003030 <main+0x298>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e42:	633d      	str	r5, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	637d      	str	r5, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e46:	f7fe fd4f 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e4a:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002e50:	4875      	ldr	r0, [pc, #468]	; (8003028 <main+0x290>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e54:	633d      	str	r5, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	637d      	str	r5, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e58:	f7fe fd46 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e60:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002e64:	4870      	ldr	r0, [pc, #448]	; (8003028 <main+0x290>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	637d      	str	r5, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	63bd      	str	r5, [r7, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e70:	f7fe fd3a 	bl	80018e8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e74:	603d      	str	r5, [r7, #0]
 8002e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e7c:	6323      	str	r3, [r4, #48]	; 0x30
 8002e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e88:	607d      	str	r5, [r7, #4]
 8002e8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e90:	6323      	str	r3, [r4, #48]	; 0x30
 8002e92:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hspi1.Instance = SPI1;
 8002e94:	4c67      	ldr	r4, [pc, #412]	; (8003034 <main+0x29c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002e9a:	462a      	mov	r2, r5
 8002e9c:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e9e:	607b      	str	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002ea0:	200e      	movs	r0, #14
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ea2:	687b      	ldr	r3, [r7, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002ea4:	f7fe fb58 	bl	8001558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002ea8:	200e      	movs	r0, #14
 8002eaa:	f7fe fb89 	bl	80015c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002eae:	462a      	mov	r2, r5
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	200f      	movs	r0, #15
 8002eb4:	f7fe fb50 	bl	8001558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002eb8:	200f      	movs	r0, #15
 8002eba:	f7fe fb81 	bl	80015c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	2038      	movs	r0, #56	; 0x38
 8002ec4:	f7fe fb48 	bl	8001558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ec8:	2038      	movs	r0, #56	; 0x38
 8002eca:	f7fe fb79 	bl	80015c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	203b      	movs	r0, #59	; 0x3b
 8002ed4:	f7fe fb40 	bl	8001558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002ed8:	203b      	movs	r0, #59	; 0x3b
 8002eda:	f7fe fb71 	bl	80015c0 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <main+0x2a0>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee0:	60a5      	str	r5, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ee2:	f44f 7a82 	mov.w	sl, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee6:	60e5      	str	r5, [r4, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eea:	6165      	str	r5, [r4, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eec:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ef0:	f04f 0b18 	mov.w	fp, #24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef4:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef6:	6265      	str	r5, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002efa:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 10;
 8002efc:	250a      	movs	r5, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002efe:	e884 0408 	stmia.w	r4, {r3, sl}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f02:	f8c4 8018 	str.w	r8, [r4, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f06:	f8c4 b01c 	str.w	fp, [r4, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002f0a:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f0c:	f7ff f8fd 	bl	800210a <HAL_SPI_Init>
 8002f10:	b100      	cbz	r0, 8002f14 <main+0x17c>
 8002f12:	e7fe      	b.n	8002f12 <main+0x17a>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f14:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f18:	f104 0b58 	add.w	fp, r4, #88	; 0x58
  hspi2.Instance = SPI2;
 8002f1c:	4b47      	ldr	r3, [pc, #284]	; (800303c <main+0x2a4>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f1e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f20:	6660      	str	r0, [r4, #100]	; 0x64
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f22:	66a0      	str	r0, [r4, #104]	; 0x68
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f24:	66e0      	str	r0, [r4, #108]	; 0x6c
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f26:	67a0      	str	r0, [r4, #120]	; 0x78
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f28:	67e0      	str	r0, [r4, #124]	; 0x7c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f2a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f2e:	4658      	mov	r0, fp
  hspi2.Instance = SPI2;
 8002f30:	65a3      	str	r3, [r4, #88]	; 0x58
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f32:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f36:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
  hspi2.Init.CRCPolynomial = 10;
 8002f3a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f3e:	f7ff f8e4 	bl	800210a <HAL_SPI_Init>
 8002f42:	b100      	cbz	r0, 8002f46 <main+0x1ae>
 8002f44:	e7fe      	b.n	8002f44 <main+0x1ac>
  hspi3.Instance = SPI3;
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <main+0x2a8>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f48:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f4c:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f54:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f58:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f5c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f60:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f68:	4836      	ldr	r0, [pc, #216]	; (8003044 <main+0x2ac>)
  hspi3.Instance = SPI3;
 8002f6a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f6e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f72:	f8c4 80c8 	str.w	r8, [r4, #200]	; 0xc8
  hspi3.Init.CRCPolynomial = 10;
 8002f76:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f7a:	f7ff f8c6 	bl	800210a <HAL_SPI_Init>
 8002f7e:	b100      	cbz	r0, 8002f82 <main+0x1ea>
 8002f80:	e7fe      	b.n	8002f80 <main+0x1e8>
  hi2c1.Instance = I2C1;
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <main+0x2b0>)
 8002f84:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  hi2c1.Init.ClockSpeed = 100000;
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <main+0x2b4>)
 8002f8a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f8e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  hi2c1.Init.OwnAddress1 = 0;
 8002f92:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f9a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
  hi2c1.Init.OwnAddress2 = 0;
 8002f9e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fa6:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002faa:	f504 7084 	add.w	r0, r4, #264	; 0x108
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fae:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb2:	f7fe fd75 	bl	8001aa0 <HAL_I2C_Init>
 8002fb6:	b100      	cbz	r0, 8002fba <main+0x222>
 8002fb8:	e7fe      	b.n	8002fb8 <main+0x220>
  huart2.Instance = USART2;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <main+0x2b8>)
  huart2.Init.BaudRate = 500000;
 8002fbc:	4d25      	ldr	r5, [pc, #148]	; (8003054 <main+0x2bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fc2:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fc6:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fca:	f04f 0a0c 	mov.w	sl, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd2:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd6:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
  huart2.Instance = USART2;
 8002fda:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
  huart2.Init.BaudRate = 500000;
 8002fde:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fe2:	f8c4 a170 	str.w	sl, [r4, #368]	; 0x170
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fe6:	f7ff fcd1 	bl	800298c <HAL_UART_Init>
 8002fea:	b100      	cbz	r0, 8002fee <main+0x256>
 8002fec:	e7fe      	b.n	8002fec <main+0x254>
  huart6.Instance = USART6;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <main+0x2c0>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff0:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ff8:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffc:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003004:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
  huart6.Init.BaudRate = 500000;
 8003008:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
  huart6.Instance = USART6;
 800300c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003010:	f8c4 a1b0 	str.w	sl, [r4, #432]	; 0x1b0
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003014:	f7ff fcba 	bl	800298c <HAL_UART_Init>
 8003018:	4605      	mov	r5, r0
 800301a:	b1f8      	cbz	r0, 800305c <main+0x2c4>
 800301c:	e7fe      	b.n	800301c <main+0x284>
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020800 	.word	0x40020800
 800302c:	10210000 	.word	0x10210000
 8003030:	40020400 	.word	0x40020400
 8003034:	2000008c 	.word	0x2000008c
 8003038:	40013000 	.word	0x40013000
 800303c:	40003800 	.word	0x40003800
 8003040:	40003c00 	.word	0x40003c00
 8003044:	2000013c 	.word	0x2000013c
 8003048:	40005400 	.word	0x40005400
 800304c:	000186a0 	.word	0x000186a0
 8003050:	40004400 	.word	0x40004400
 8003054:	0007a120 	.word	0x0007a120
 8003058:	40011400 	.word	0x40011400
  IMU.initializeBMI160();
 800305c:	f107 0014 	add.w	r0, r7, #20
class BMI160
{
	public:
		BMI160(SPI_HandleTypeDef* bmiSPI, uint16_t bmiGPIO, GPIO_TypeDef* bmiBANK)
		{
			BMI160_SPI_HANDLER = bmiSPI;
 8003060:	f8c7 b014 	str.w	fp, [r7, #20]
			BMI160_CSS_PIN = bmiGPIO;
 8003064:	f8a7 8018 	strh.w	r8, [r7, #24]
			BMI160_PIN_BANK = bmiBANK;
 8003068:	61fe      	str	r6, [r7, #28]
 800306a:	f7ff fd80 	bl	8002b6e <_ZN6BMI16016initializeBMI160Ev>
  IMU.setAccRange(BMI160_ACCEL_RANGE_16G);
 800306e:	4651      	mov	r1, sl
 8003070:	f107 0014 	add.w	r0, r7, #20
 8003074:	f7ff fe0c 	bl	8002c90 <_ZN6BMI16011setAccRangeE16BMI160AccelRange>
  IMU.setGyroRange(BMI160_GYRO_RANGE_2000);
 8003078:	4629      	mov	r1, r5
 800307a:	f107 0014 	add.w	r0, r7, #20
 800307e:	f7ff fe0b 	bl	8002c98 <_ZN6BMI16012setGyroRangeE15BMI160GyroRange>
  IMU.writeBit(BMI160_RA_INT_STATUS_0, BMI160_DRDY_EN_BIT, true); // Set Interupt 0 to data ready output
 8003082:	2204      	movs	r2, #4
 8003084:	211c      	movs	r1, #28
 8003086:	464b      	mov	r3, r9
 8003088:	f107 0014 	add.w	r0, r7, #20
 800308c:	f7ff fe16 	bl	8002cbc <_ZN6BMI1608writeBitEhhb>
class ADXL372
{
	public:
			ADXL372(SPI_HandleTypeDef* bmiSPI, uint16_t bmiGPIO, GPIO_TypeDef* bmiBANK)
			{
				SPI_HANDLER = bmiSPI;
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <main+0x3b4>)
 8003092:	623b      	str	r3, [r7, #32]
  ACCEL.initialize();
 8003094:	f107 0020 	add.w	r0, r7, #32
				CSS_PIN = bmiGPIO;
 8003098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309c:	84bb      	strh	r3, [r7, #36]	; 0x24
				PIN_BANK = bmiBANK;
 800309e:	62be      	str	r6, [r7, #40]	; 0x28
 80030a0:	f7ff fd19 	bl	8002ad6 <_ZN7ADXL37210initializeEv>
  ACCEL.regWrite(0x3f, 0b00011111); //POWER_CTL
 80030a4:	221f      	movs	r2, #31
 80030a6:	213f      	movs	r1, #63	; 0x3f
 80030a8:	f107 0020 	add.w	r0, r7, #32
 80030ac:	f7ff fcf9 	bl	8002aa2 <_ZN7ADXL3728regWriteEhh>
	  sprintf(buffer, "%d,%d,%d,%d,%d,%d,%08d\n\r", sen32[0], sen32[1], sen32[2], sen32[3], sen32[4], sen32[5], sen32[6]);
 80030b0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8003150 <main+0x3b8>
	  HAL_UART_Transmit(&huart6, buf, bulen, 1000);
 80030b4:	f504 74ce 	add.w	r4, r4, #412	; 0x19c
	  int32_t sen32[7] = {0};
 80030b8:	221c      	movs	r2, #28
 80030ba:	2100      	movs	r1, #0
 80030bc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80030c0:	f000 fab2 	bl	8003628 <memset>
	  IMU.getReadableDataBMI160(sen32);
 80030c4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80030c8:	f107 0014 	add.w	r0, r7, #20
 80030cc:	f7ff fd9e 	bl	8002c0c <_ZN6BMI16021getReadableDataBMI160EPl>
  }
 80030d0:	46e9      	mov	r9, sp
	  char buffer[bulen] = {0};
 80030d2:	b08e      	sub	sp, #56	; 0x38
 80030d4:	ae06      	add	r6, sp, #24
 80030d6:	f88d 5018 	strb.w	r5, [sp, #24]
 80030da:	f10d 0319 	add.w	r3, sp, #25
 80030de:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
 80030e2:	f803 5b01 	strb.w	r5, [r3], #1
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d1fb      	bne.n	80030e2 <main+0x34a>
	  uint8_t buf[bulen] = {0};
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	f10d 0818 	add.w	r8, sp, #24
 80030f0:	f88d 5018 	strb.w	r5, [sp, #24]
 80030f4:	f10d 0319 	add.w	r3, sp, #25
 80030f8:	f10d 024a 	add.w	r2, sp, #74	; 0x4a
 80030fc:	f803 5b01 	strb.w	r5, [r3], #1
 8003100:	429a      	cmp	r2, r3
 8003102:	d1fb      	bne.n	80030fc <main+0x364>
	  sprintf(buffer, "%d,%d,%d,%d,%d,%d,%08d\n\r", sen32[0], sen32[1], sen32[2], sen32[3], sen32[4], sen32[5], sen32[6]);
 8003104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003106:	9304      	str	r3, [sp, #16]
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	9303      	str	r3, [sp, #12]
 800310c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311c:	4630      	mov	r0, r6
 800311e:	4651      	mov	r1, sl
 8003120:	f000 fa8a 	bl	8003638 <siprintf>
 8003124:	1e73      	subs	r3, r6, #1
 8003126:	f108 32ff 	add.w	r2, r8, #4294967295
 800312a:	3631      	adds	r6, #49	; 0x31
		  buf[i] = buffer[i];
 800312c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003130:	f802 1f01 	strb.w	r1, [r2, #1]!
	  for(int i = 0; i < bulen; i++)
 8003134:	42b3      	cmp	r3, r6
 8003136:	d1f9      	bne.n	800312c <main+0x394>
	  HAL_UART_Transmit(&huart6, buf, bulen, 1000);
 8003138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313c:	2232      	movs	r2, #50	; 0x32
 800313e:	4641      	mov	r1, r8
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fc51 	bl	80029e8 <HAL_UART_Transmit>
 8003146:	46cd      	mov	sp, r9
  }
 8003148:	e7b6      	b.n	80030b8 <main+0x320>
 800314a:	bf00      	nop
 800314c:	2000013c 	.word	0x2000013c
 8003150:	08003f68 	.word	0x08003f68

08003154 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003154:	e7fe      	b.n	8003154 <_Error_Handler>
	...

08003158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003158:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_MspInit+0x8c>)
 800315c:	2400      	movs	r4, #0
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
 8003168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800316e:	9200      	str	r2, [sp, #0]
 8003170:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	9401      	str	r4, [sp, #4]
 8003174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003176:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003184:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003188:	f7fe f9d4 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800318c:	4622      	mov	r2, r4
 800318e:	4621      	mov	r1, r4
 8003190:	f06f 000b 	mvn.w	r0, #11
 8003194:	f7fe f9e0 	bl	8001558 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003198:	4622      	mov	r2, r4
 800319a:	4621      	mov	r1, r4
 800319c:	f06f 000a 	mvn.w	r0, #10
 80031a0:	f7fe f9da 	bl	8001558 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80031a4:	4622      	mov	r2, r4
 80031a6:	4621      	mov	r1, r4
 80031a8:	f06f 0009 	mvn.w	r0, #9
 80031ac:	f7fe f9d4 	bl	8001558 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80031b0:	4622      	mov	r2, r4
 80031b2:	4621      	mov	r1, r4
 80031b4:	f06f 0004 	mvn.w	r0, #4
 80031b8:	f7fe f9ce 	bl	8001558 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80031bc:	4622      	mov	r2, r4
 80031be:	4621      	mov	r1, r4
 80031c0:	f06f 0003 	mvn.w	r0, #3
 80031c4:	f7fe f9c8 	bl	8001558 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80031c8:	4622      	mov	r2, r4
 80031ca:	4621      	mov	r1, r4
 80031cc:	f06f 0001 	mvn.w	r0, #1
 80031d0:	f7fe f9c2 	bl	8001558 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80031d4:	4622      	mov	r2, r4
 80031d6:	4621      	mov	r1, r4
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f7fe f9bc 	bl	8001558 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e0:	b002      	add	sp, #8
 80031e2:	bd10      	pop	{r4, pc}
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80031ea:	6802      	ldr	r2, [r0, #0]
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_I2C_MspInit+0x48>)
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d11a      	bne.n	8003228 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f6:	2312      	movs	r3, #18
 80031f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031fa:	2301      	movs	r3, #1
 80031fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fe:	2303      	movs	r3, #3
 8003200:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003202:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003204:	eb0d 0103 	add.w	r1, sp, r3
 8003208:	480a      	ldr	r0, [pc, #40]	; (8003234 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800320a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320c:	f7fe fb6c 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_I2C_MspInit+0x50>)
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003218:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003228:	b007      	add	sp, #28
 800322a:	f85d fb04 	ldr.w	pc, [sp], #4
 800322e:	bf00      	nop
 8003230:	40005400 	.word	0x40005400
 8003234:	40020400 	.word	0x40020400
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800323c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003240:	6803      	ldr	r3, [r0, #0]
 8003242:	4a75      	ldr	r2, [pc, #468]	; (8003418 <HAL_SPI_MspInit+0x1dc>)
 8003244:	4293      	cmp	r3, r2
{
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	4605      	mov	r5, r0
  if(hspi->Instance==SPI1)
 800324a:	d15e      	bne.n	800330a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800324c:	2600      	movs	r6, #0
 800324e:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_SPI_MspInit+0x1e0>)
 8003250:	9600      	str	r6, [sp, #0]
 8003252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003254:	4872      	ldr	r0, [pc, #456]	; (8003420 <HAL_SPI_MspInit+0x1e4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003266:	2405      	movs	r4, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003268:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800326a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800326c:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003272:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003276:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f7fe fb33 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003282:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	4867      	ldr	r0, [pc, #412]	; (8003424 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003286:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800328a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	f8cd 8010 	str.w	r8, [sp, #16]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003290:	4c65      	ldr	r4, [pc, #404]	; (8003428 <HAL_SPI_MspInit+0x1ec>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f7fe fb27 	bl	80018e8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800329a:	4b64      	ldr	r3, [pc, #400]	; (800342c <HAL_SPI_MspInit+0x1f0>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329c:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800329e:	f04f 69c0 	mov.w	r9, #100663296	; 0x6000000
 80032a2:	e884 0208 	stmia.w	r4, {r3, r9}
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80032a6:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ac:	60e6      	str	r6, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ae:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b0:	6166      	str	r6, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b2:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80032b4:	61e6      	str	r6, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032b6:	6226      	str	r6, [r4, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b8:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80032ba:	f7fe f9cb 	bl	8001654 <HAL_DMA_Init>
 80032be:	b118      	cbz	r0, 80032c8 <HAL_SPI_MspInit+0x8c>
    {
      _Error_Handler(__FILE__, __LINE__);
 80032c0:	21bb      	movs	r1, #187	; 0xbb
 80032c2:	485b      	ldr	r0, [pc, #364]	; (8003430 <HAL_SPI_MspInit+0x1f4>)
 80032c4:	f7ff ff46 	bl	8003154 <_Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032c8:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <HAL_SPI_MspInit+0x1f8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80032ca:	64ec      	str	r4, [r5, #76]	; 0x4c
 80032cc:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80032ce:	4c5a      	ldr	r4, [pc, #360]	; (8003438 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d0:	f04f 68c0 	mov.w	r8, #100663296	; 0x6000000
 80032d4:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80032d8:	e884 1108 	stmia.w	r4, {r3, r8, ip}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e0:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032e2:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e4:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e6:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032e8:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ea:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80032ec:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ee:	6223      	str	r3, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032f2:	f7fe f9af 	bl	8001654 <HAL_DMA_Init>
 80032f6:	b118      	cbz	r0, 8003300 <HAL_SPI_MspInit+0xc4>
    {
      _Error_Handler(__FILE__, __LINE__);
 80032f8:	21cd      	movs	r1, #205	; 0xcd
 80032fa:	484d      	ldr	r0, [pc, #308]	; (8003430 <HAL_SPI_MspInit+0x1f4>)
 80032fc:	f7ff ff2a 	bl	8003154 <_Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003300:	64ac      	str	r4, [r5, #72]	; 0x48
 8003302:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003304:	b009      	add	sp, #36	; 0x24
 8003306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hspi->Instance==SPI2)
 800330a:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_SPI_MspInit+0x200>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d164      	bne.n	80033da <HAL_SPI_MspInit+0x19e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003310:	2600      	movs	r6, #0
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_SPI_MspInit+0x1e0>)
 8003314:	9601      	str	r6, [sp, #4]
 8003316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003318:	4849      	ldr	r0, [pc, #292]	; (8003440 <HAL_SPI_MspInit+0x204>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800331a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800332c:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003332:	2405      	movs	r4, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800333c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800333e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003340:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334c:	f7fe facc 	bl	80018e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003350:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	4834      	ldr	r0, [pc, #208]	; (8003424 <HAL_SPI_MspInit+0x1e8>)
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003354:	4c3b      	ldr	r4, [pc, #236]	; (8003444 <HAL_SPI_MspInit+0x208>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003356:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003360:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	f7fe fac0 	bl	80018e8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_SPI_MspInit+0x20c>)
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800336a:	60a6      	str	r6, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800336c:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800336e:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003372:	60e6      	str	r6, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	6127      	str	r7, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003376:	6166      	str	r6, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003378:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800337a:	61e6      	str	r6, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800337c:	6226      	str	r6, [r4, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800337e:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003380:	f7fe f968 	bl	8001654 <HAL_DMA_Init>
 8003384:	b118      	cbz	r0, 800338e <HAL_SPI_MspInit+0x152>
      _Error_Handler(__FILE__, __LINE__);
 8003386:	21ff      	movs	r1, #255	; 0xff
 8003388:	4829      	ldr	r0, [pc, #164]	; (8003430 <HAL_SPI_MspInit+0x1f4>)
 800338a:	f7ff fee3 	bl	8003154 <_Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800338e:	64ec      	str	r4, [r5, #76]	; 0x4c
 8003390:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003392:	4c2e      	ldr	r4, [pc, #184]	; (800344c <HAL_SPI_MspInit+0x210>)
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_SPI_MspInit+0x214>)
 8003396:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003398:	2240      	movs	r2, #64	; 0x40
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800339a:	2300      	movs	r3, #0
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800339c:	60a2      	str	r2, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800339e:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80033a4:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a6:	60e3      	str	r3, [r4, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a8:	6122      	str	r2, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033aa:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ac:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80033ae:	61e3      	str	r3, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b0:	6223      	str	r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b2:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80033b4:	f7fe f94e 	bl	8001654 <HAL_DMA_Init>
 80033b8:	b120      	cbz	r0, 80033c4 <HAL_SPI_MspInit+0x188>
      _Error_Handler(__FILE__, __LINE__);
 80033ba:	f240 1111 	movw	r1, #273	; 0x111
 80033be:	481c      	ldr	r0, [pc, #112]	; (8003430 <HAL_SPI_MspInit+0x1f4>)
 80033c0:	f7ff fec8 	bl	8003154 <_Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80033c4:	2200      	movs	r2, #0
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80033c6:	64ac      	str	r4, [r5, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80033c8:	4611      	mov	r1, r2
 80033ca:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80033cc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80033ce:	f7fe f8c3 	bl	8001558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80033d2:	2024      	movs	r0, #36	; 0x24
 80033d4:	f7fe f8f4 	bl	80015c0 <HAL_NVIC_EnableIRQ>
 80033d8:	e794      	b.n	8003304 <HAL_SPI_MspInit+0xc8>
  else if(hspi->Instance==SPI3)
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <HAL_SPI_MspInit+0x218>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d191      	bne.n	8003304 <HAL_SPI_MspInit+0xc8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033e0:	2100      	movs	r1, #0
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_SPI_MspInit+0x1e0>)
 80033e4:	9102      	str	r1, [sp, #8]
 80033e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e8:	4815      	ldr	r0, [pc, #84]	; (8003440 <HAL_SPI_MspInit+0x204>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	9105      	str	r1, [sp, #20]
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80033fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003400:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800340c:	2306      	movs	r3, #6
 800340e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003410:	f7fe fa6a 	bl	80018e8 <HAL_GPIO_Init>
}
 8003414:	e776      	b.n	8003304 <HAL_SPI_MspInit+0xc8>
 8003416:	bf00      	nop
 8003418:	40013000 	.word	0x40013000
 800341c:	40023800 	.word	0x40023800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020400 	.word	0x40020400
 8003428:	20000388 	.word	0x20000388
 800342c:	40026410 	.word	0x40026410
 8003430:	08003f81 	.word	0x08003f81
 8003434:	40026458 	.word	0x40026458
 8003438:	20000328 	.word	0x20000328
 800343c:	40003800 	.word	0x40003800
 8003440:	40020800 	.word	0x40020800
 8003444:	200002c8 	.word	0x200002c8
 8003448:	40026058 	.word	0x40026058
 800344c:	20000268 	.word	0x20000268
 8003450:	40026070 	.word	0x40026070
 8003454:	40003c00 	.word	0x40003c00

08003458 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003458:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_UART_MspInit+0x7c>)
 800345e:	4293      	cmp	r3, r2
{
 8003460:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART2)
 8003462:	d11c      	bne.n	800349e <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_UART_MspInit+0x80>)
 800346a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	9b01      	ldr	r3, [sp, #4]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800347c:	230c      	movs	r3, #12
 800347e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003484:	2301      	movs	r3, #1
 8003486:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348e:	a903      	add	r1, sp, #12
 8003490:	4812      	ldr	r0, [pc, #72]	; (80034dc <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003492:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f7fe fa28 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003498:	b009      	add	sp, #36	; 0x24
 800349a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART6)
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_UART_MspInit+0x88>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d1f9      	bne.n	8003498 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	9302      	str	r3, [sp, #8]
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_UART_MspInit+0x80>)
 80034aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	9302      	str	r3, [sp, #8]
 80034ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034ce:	2308      	movs	r3, #8
 80034d0:	e7dd      	b.n	800348e <HAL_UART_MspInit+0x36>
 80034d2:	bf00      	nop
 80034d4:	40004400 	.word	0x40004400
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020000 	.word	0x40020000
 80034e0:	40011400 	.word	0x40011400

080034e4 <NMI_Handler>:
 80034e4:	4770      	bx	lr

080034e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80034e6:	e7fe      	b.n	80034e6 <HardFault_Handler>

080034e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80034e8:	e7fe      	b.n	80034e8 <MemManage_Handler>

080034ea <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80034ea:	e7fe      	b.n	80034ea <BusFault_Handler>

080034ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80034ec:	e7fe      	b.n	80034ec <UsageFault_Handler>

080034ee <SVC_Handler>:
 80034ee:	4770      	bx	lr

080034f0 <DebugMon_Handler>:
 80034f0:	4770      	bx	lr

080034f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f6:	f7fd fff7 	bl	80014e8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80034fe:	f7fe b88e 	b.w	800161e <HAL_SYSTICK_IRQHandler>
	...

08003504 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003504:	4801      	ldr	r0, [pc, #4]	; (800350c <DMA1_Stream3_IRQHandler+0x8>)
 8003506:	f7fe b935 	b.w	8001774 <HAL_DMA_IRQHandler>
 800350a:	bf00      	nop
 800350c:	200002c8 	.word	0x200002c8

08003510 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003510:	4801      	ldr	r0, [pc, #4]	; (8003518 <DMA1_Stream4_IRQHandler+0x8>)
 8003512:	f7fe b92f 	b.w	8001774 <HAL_DMA_IRQHandler>
 8003516:	bf00      	nop
 8003518:	20000268 	.word	0x20000268

0800351c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <SPI2_IRQHandler+0x8>)
 800351e:	f7ff b877 	b.w	8002610 <HAL_SPI_IRQHandler>
 8003522:	bf00      	nop
 8003524:	200000e4 	.word	0x200000e4

08003528 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <DMA2_Stream0_IRQHandler+0x8>)
 800352a:	f7fe b923 	b.w	8001774 <HAL_DMA_IRQHandler>
 800352e:	bf00      	nop
 8003530:	20000388 	.word	0x20000388

08003534 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <DMA2_Stream3_IRQHandler+0x8>)
 8003536:	f7fe b91d 	b.w	8001774 <HAL_DMA_IRQHandler>
 800353a:	bf00      	nop
 800353c:	20000328 	.word	0x20000328

08003540 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003540:	490f      	ldr	r1, [pc, #60]	; (8003580 <SystemInit+0x40>)
 8003542:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <SystemInit+0x44>)
 8003550:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003552:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800355a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003562:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003566:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <SystemInit+0x48>)
 800356a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003572:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003574:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003576:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800357a:	608b      	str	r3, [r1, #8]
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000ed00 	.word	0xe000ed00
 8003584:	40023800 	.word	0x40023800
 8003588:	24003010 	.word	0x24003010

0800358c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800358c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003592:	e003      	b.n	800359c <LoopCopyDataInit>

08003594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800359a:	3104      	adds	r1, #4

0800359c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035a4:	d3f6      	bcc.n	8003594 <CopyDataInit>
  ldr  r2, =_sbss
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035a8:	e002      	b.n	80035b0 <LoopFillZerobss>

080035aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035ac:	f842 3b04 	str.w	r3, [r2], #4

080035b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035b4:	d3f9      	bcc.n	80035aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035b6:	f7ff ffc3 	bl	8003540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ba:	f000 f811 	bl	80035e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035be:	f7ff fbeb 	bl	8002d98 <main>
  bx  lr    
 80035c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035c4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80035c8:	08004134 	.word	0x08004134
  ldr  r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035d0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80035d4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80035d8:	200003fc 	.word	0x200003fc

080035dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC_IRQHandler>
	...

080035e0 <__libc_init_array>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4e0d      	ldr	r6, [pc, #52]	; (8003618 <__libc_init_array+0x38>)
 80035e4:	4c0d      	ldr	r4, [pc, #52]	; (800361c <__libc_init_array+0x3c>)
 80035e6:	1ba4      	subs	r4, r4, r6
 80035e8:	10a4      	asrs	r4, r4, #2
 80035ea:	2500      	movs	r5, #0
 80035ec:	42a5      	cmp	r5, r4
 80035ee:	d109      	bne.n	8003604 <__libc_init_array+0x24>
 80035f0:	4e0b      	ldr	r6, [pc, #44]	; (8003620 <__libc_init_array+0x40>)
 80035f2:	4c0c      	ldr	r4, [pc, #48]	; (8003624 <__libc_init_array+0x44>)
 80035f4:	f000 fca8 	bl	8003f48 <_init>
 80035f8:	1ba4      	subs	r4, r4, r6
 80035fa:	10a4      	asrs	r4, r4, #2
 80035fc:	2500      	movs	r5, #0
 80035fe:	42a5      	cmp	r5, r4
 8003600:	d105      	bne.n	800360e <__libc_init_array+0x2e>
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003608:	4798      	blx	r3
 800360a:	3501      	adds	r5, #1
 800360c:	e7ee      	b.n	80035ec <__libc_init_array+0xc>
 800360e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003612:	4798      	blx	r3
 8003614:	3501      	adds	r5, #1
 8003616:	e7f2      	b.n	80035fe <__libc_init_array+0x1e>
 8003618:	0800412c 	.word	0x0800412c
 800361c:	0800412c 	.word	0x0800412c
 8003620:	0800412c 	.word	0x0800412c
 8003624:	08004130 	.word	0x08004130

08003628 <memset>:
 8003628:	4402      	add	r2, r0
 800362a:	4603      	mov	r3, r0
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <memset+0xa>
 8003630:	4770      	bx	lr
 8003632:	f803 1b01 	strb.w	r1, [r3], #1
 8003636:	e7f9      	b.n	800362c <memset+0x4>

08003638 <siprintf>:
 8003638:	b40e      	push	{r1, r2, r3}
 800363a:	b500      	push	{lr}
 800363c:	b09c      	sub	sp, #112	; 0x70
 800363e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003642:	ab1d      	add	r3, sp, #116	; 0x74
 8003644:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003648:	9002      	str	r0, [sp, #8]
 800364a:	9006      	str	r0, [sp, #24]
 800364c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003650:	480a      	ldr	r0, [pc, #40]	; (800367c <siprintf+0x44>)
 8003652:	9104      	str	r1, [sp, #16]
 8003654:	9107      	str	r1, [sp, #28]
 8003656:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800365a:	f853 2b04 	ldr.w	r2, [r3], #4
 800365e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003662:	6800      	ldr	r0, [r0, #0]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	a902      	add	r1, sp, #8
 8003668:	f000 f866 	bl	8003738 <_svfiprintf_r>
 800366c:	9b02      	ldr	r3, [sp, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	b01c      	add	sp, #112	; 0x70
 8003674:	f85d eb04 	ldr.w	lr, [sp], #4
 8003678:	b003      	add	sp, #12
 800367a:	4770      	bx	lr
 800367c:	2000000c 	.word	0x2000000c

08003680 <__ssputs_r>:
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	688e      	ldr	r6, [r1, #8]
 8003686:	429e      	cmp	r6, r3
 8003688:	4682      	mov	sl, r0
 800368a:	460c      	mov	r4, r1
 800368c:	4691      	mov	r9, r2
 800368e:	4698      	mov	r8, r3
 8003690:	d835      	bhi.n	80036fe <__ssputs_r+0x7e>
 8003692:	898a      	ldrh	r2, [r1, #12]
 8003694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003698:	d031      	beq.n	80036fe <__ssputs_r+0x7e>
 800369a:	6825      	ldr	r5, [r4, #0]
 800369c:	6909      	ldr	r1, [r1, #16]
 800369e:	1a6f      	subs	r7, r5, r1
 80036a0:	6965      	ldr	r5, [r4, #20]
 80036a2:	2302      	movs	r3, #2
 80036a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80036ac:	f108 0301 	add.w	r3, r8, #1
 80036b0:	443b      	add	r3, r7
 80036b2:	429d      	cmp	r5, r3
 80036b4:	bf38      	it	cc
 80036b6:	461d      	movcc	r5, r3
 80036b8:	0553      	lsls	r3, r2, #21
 80036ba:	d531      	bpl.n	8003720 <__ssputs_r+0xa0>
 80036bc:	4629      	mov	r1, r5
 80036be:	f000 fb39 	bl	8003d34 <_malloc_r>
 80036c2:	4606      	mov	r6, r0
 80036c4:	b950      	cbnz	r0, 80036dc <__ssputs_r+0x5c>
 80036c6:	230c      	movs	r3, #12
 80036c8:	f8ca 3000 	str.w	r3, [sl]
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d2:	81a3      	strh	r3, [r4, #12]
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036dc:	463a      	mov	r2, r7
 80036de:	6921      	ldr	r1, [r4, #16]
 80036e0:	f000 fab4 	bl	8003c4c <memcpy>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	6126      	str	r6, [r4, #16]
 80036f2:	6165      	str	r5, [r4, #20]
 80036f4:	443e      	add	r6, r7
 80036f6:	1bed      	subs	r5, r5, r7
 80036f8:	6026      	str	r6, [r4, #0]
 80036fa:	60a5      	str	r5, [r4, #8]
 80036fc:	4646      	mov	r6, r8
 80036fe:	4546      	cmp	r6, r8
 8003700:	bf28      	it	cs
 8003702:	4646      	movcs	r6, r8
 8003704:	4632      	mov	r2, r6
 8003706:	4649      	mov	r1, r9
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	f000 faaa 	bl	8003c62 <memmove>
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	1b9b      	subs	r3, r3, r6
 8003712:	60a3      	str	r3, [r4, #8]
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	441e      	add	r6, r3
 8003718:	6026      	str	r6, [r4, #0]
 800371a:	2000      	movs	r0, #0
 800371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003720:	462a      	mov	r2, r5
 8003722:	f000 fb65 	bl	8003df0 <_realloc_r>
 8003726:	4606      	mov	r6, r0
 8003728:	2800      	cmp	r0, #0
 800372a:	d1e1      	bne.n	80036f0 <__ssputs_r+0x70>
 800372c:	6921      	ldr	r1, [r4, #16]
 800372e:	4650      	mov	r0, sl
 8003730:	f000 fab2 	bl	8003c98 <_free_r>
 8003734:	e7c7      	b.n	80036c6 <__ssputs_r+0x46>
	...

08003738 <_svfiprintf_r>:
 8003738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373c:	b09d      	sub	sp, #116	; 0x74
 800373e:	4680      	mov	r8, r0
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	898b      	ldrh	r3, [r1, #12]
 8003744:	061c      	lsls	r4, r3, #24
 8003746:	460d      	mov	r5, r1
 8003748:	4616      	mov	r6, r2
 800374a:	d50f      	bpl.n	800376c <_svfiprintf_r+0x34>
 800374c:	690b      	ldr	r3, [r1, #16]
 800374e:	b96b      	cbnz	r3, 800376c <_svfiprintf_r+0x34>
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	f000 faef 	bl	8003d34 <_malloc_r>
 8003756:	6028      	str	r0, [r5, #0]
 8003758:	6128      	str	r0, [r5, #16]
 800375a:	b928      	cbnz	r0, 8003768 <_svfiprintf_r+0x30>
 800375c:	230c      	movs	r3, #12
 800375e:	f8c8 3000 	str.w	r3, [r8]
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	e0c5      	b.n	80038f4 <_svfiprintf_r+0x1bc>
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	616b      	str	r3, [r5, #20]
 800376c:	2300      	movs	r3, #0
 800376e:	9309      	str	r3, [sp, #36]	; 0x24
 8003770:	2320      	movs	r3, #32
 8003772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003776:	2330      	movs	r3, #48	; 0x30
 8003778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800377c:	f04f 0b01 	mov.w	fp, #1
 8003780:	4637      	mov	r7, r6
 8003782:	463c      	mov	r4, r7
 8003784:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13c      	bne.n	8003806 <_svfiprintf_r+0xce>
 800378c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003790:	d00b      	beq.n	80037aa <_svfiprintf_r+0x72>
 8003792:	4653      	mov	r3, sl
 8003794:	4632      	mov	r2, r6
 8003796:	4629      	mov	r1, r5
 8003798:	4640      	mov	r0, r8
 800379a:	f7ff ff71 	bl	8003680 <__ssputs_r>
 800379e:	3001      	adds	r0, #1
 80037a0:	f000 80a3 	beq.w	80038ea <_svfiprintf_r+0x1b2>
 80037a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a6:	4453      	add	r3, sl
 80037a8:	9309      	str	r3, [sp, #36]	; 0x24
 80037aa:	783b      	ldrb	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 809c 	beq.w	80038ea <_svfiprintf_r+0x1b2>
 80037b2:	2300      	movs	r3, #0
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	9307      	str	r3, [sp, #28]
 80037bc:	9205      	str	r2, [sp, #20]
 80037be:	9306      	str	r3, [sp, #24]
 80037c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037c4:	931a      	str	r3, [sp, #104]	; 0x68
 80037c6:	2205      	movs	r2, #5
 80037c8:	7821      	ldrb	r1, [r4, #0]
 80037ca:	4850      	ldr	r0, [pc, #320]	; (800390c <_svfiprintf_r+0x1d4>)
 80037cc:	f7fc fd08 	bl	80001e0 <memchr>
 80037d0:	1c67      	adds	r7, r4, #1
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	b9d8      	cbnz	r0, 800380e <_svfiprintf_r+0xd6>
 80037d6:	06d9      	lsls	r1, r3, #27
 80037d8:	bf44      	itt	mi
 80037da:	2220      	movmi	r2, #32
 80037dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037e0:	071a      	lsls	r2, r3, #28
 80037e2:	bf44      	itt	mi
 80037e4:	222b      	movmi	r2, #43	; 0x2b
 80037e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037ea:	7822      	ldrb	r2, [r4, #0]
 80037ec:	2a2a      	cmp	r2, #42	; 0x2a
 80037ee:	d016      	beq.n	800381e <_svfiprintf_r+0xe6>
 80037f0:	9a07      	ldr	r2, [sp, #28]
 80037f2:	2100      	movs	r1, #0
 80037f4:	200a      	movs	r0, #10
 80037f6:	4627      	mov	r7, r4
 80037f8:	3401      	adds	r4, #1
 80037fa:	783b      	ldrb	r3, [r7, #0]
 80037fc:	3b30      	subs	r3, #48	; 0x30
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d951      	bls.n	80038a6 <_svfiprintf_r+0x16e>
 8003802:	b1c9      	cbz	r1, 8003838 <_svfiprintf_r+0x100>
 8003804:	e011      	b.n	800382a <_svfiprintf_r+0xf2>
 8003806:	2b25      	cmp	r3, #37	; 0x25
 8003808:	d0c0      	beq.n	800378c <_svfiprintf_r+0x54>
 800380a:	4627      	mov	r7, r4
 800380c:	e7b9      	b.n	8003782 <_svfiprintf_r+0x4a>
 800380e:	4a3f      	ldr	r2, [pc, #252]	; (800390c <_svfiprintf_r+0x1d4>)
 8003810:	1a80      	subs	r0, r0, r2
 8003812:	fa0b f000 	lsl.w	r0, fp, r0
 8003816:	4318      	orrs	r0, r3
 8003818:	9004      	str	r0, [sp, #16]
 800381a:	463c      	mov	r4, r7
 800381c:	e7d3      	b.n	80037c6 <_svfiprintf_r+0x8e>
 800381e:	9a03      	ldr	r2, [sp, #12]
 8003820:	1d11      	adds	r1, r2, #4
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	9103      	str	r1, [sp, #12]
 8003826:	2a00      	cmp	r2, #0
 8003828:	db01      	blt.n	800382e <_svfiprintf_r+0xf6>
 800382a:	9207      	str	r2, [sp, #28]
 800382c:	e004      	b.n	8003838 <_svfiprintf_r+0x100>
 800382e:	4252      	negs	r2, r2
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	9207      	str	r2, [sp, #28]
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	783b      	ldrb	r3, [r7, #0]
 800383a:	2b2e      	cmp	r3, #46	; 0x2e
 800383c:	d10e      	bne.n	800385c <_svfiprintf_r+0x124>
 800383e:	787b      	ldrb	r3, [r7, #1]
 8003840:	2b2a      	cmp	r3, #42	; 0x2a
 8003842:	f107 0101 	add.w	r1, r7, #1
 8003846:	d132      	bne.n	80038ae <_svfiprintf_r+0x176>
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	1d1a      	adds	r2, r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	9203      	str	r2, [sp, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	bfb8      	it	lt
 8003854:	f04f 33ff 	movlt.w	r3, #4294967295
 8003858:	3702      	adds	r7, #2
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	4c2c      	ldr	r4, [pc, #176]	; (8003910 <_svfiprintf_r+0x1d8>)
 800385e:	7839      	ldrb	r1, [r7, #0]
 8003860:	2203      	movs	r2, #3
 8003862:	4620      	mov	r0, r4
 8003864:	f7fc fcbc 	bl	80001e0 <memchr>
 8003868:	b138      	cbz	r0, 800387a <_svfiprintf_r+0x142>
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	1b00      	subs	r0, r0, r4
 800386e:	fa03 f000 	lsl.w	r0, r3, r0
 8003872:	9b04      	ldr	r3, [sp, #16]
 8003874:	4303      	orrs	r3, r0
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	3701      	adds	r7, #1
 800387a:	7839      	ldrb	r1, [r7, #0]
 800387c:	4825      	ldr	r0, [pc, #148]	; (8003914 <_svfiprintf_r+0x1dc>)
 800387e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003882:	2206      	movs	r2, #6
 8003884:	1c7e      	adds	r6, r7, #1
 8003886:	f7fc fcab 	bl	80001e0 <memchr>
 800388a:	2800      	cmp	r0, #0
 800388c:	d035      	beq.n	80038fa <_svfiprintf_r+0x1c2>
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <_svfiprintf_r+0x1e0>)
 8003890:	b9fb      	cbnz	r3, 80038d2 <_svfiprintf_r+0x19a>
 8003892:	9b03      	ldr	r3, [sp, #12]
 8003894:	3307      	adds	r3, #7
 8003896:	f023 0307 	bic.w	r3, r3, #7
 800389a:	3308      	adds	r3, #8
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a0:	444b      	add	r3, r9
 80038a2:	9309      	str	r3, [sp, #36]	; 0x24
 80038a4:	e76c      	b.n	8003780 <_svfiprintf_r+0x48>
 80038a6:	fb00 3202 	mla	r2, r0, r2, r3
 80038aa:	2101      	movs	r1, #1
 80038ac:	e7a3      	b.n	80037f6 <_svfiprintf_r+0xbe>
 80038ae:	2300      	movs	r3, #0
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	4618      	mov	r0, r3
 80038b4:	240a      	movs	r4, #10
 80038b6:	460f      	mov	r7, r1
 80038b8:	3101      	adds	r1, #1
 80038ba:	783a      	ldrb	r2, [r7, #0]
 80038bc:	3a30      	subs	r2, #48	; 0x30
 80038be:	2a09      	cmp	r2, #9
 80038c0:	d903      	bls.n	80038ca <_svfiprintf_r+0x192>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ca      	beq.n	800385c <_svfiprintf_r+0x124>
 80038c6:	9005      	str	r0, [sp, #20]
 80038c8:	e7c8      	b.n	800385c <_svfiprintf_r+0x124>
 80038ca:	fb04 2000 	mla	r0, r4, r0, r2
 80038ce:	2301      	movs	r3, #1
 80038d0:	e7f1      	b.n	80038b6 <_svfiprintf_r+0x17e>
 80038d2:	ab03      	add	r3, sp, #12
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	462a      	mov	r2, r5
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <_svfiprintf_r+0x1e4>)
 80038da:	a904      	add	r1, sp, #16
 80038dc:	4640      	mov	r0, r8
 80038de:	f3af 8000 	nop.w
 80038e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038e6:	4681      	mov	r9, r0
 80038e8:	d1d9      	bne.n	800389e <_svfiprintf_r+0x166>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	065b      	lsls	r3, r3, #25
 80038ee:	f53f af38 	bmi.w	8003762 <_svfiprintf_r+0x2a>
 80038f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f4:	b01d      	add	sp, #116	; 0x74
 80038f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fa:	ab03      	add	r3, sp, #12
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	462a      	mov	r2, r5
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <_svfiprintf_r+0x1e4>)
 8003902:	a904      	add	r1, sp, #16
 8003904:	4640      	mov	r0, r8
 8003906:	f000 f881 	bl	8003a0c <_printf_i>
 800390a:	e7ea      	b.n	80038e2 <_svfiprintf_r+0x1aa>
 800390c:	08003fb4 	.word	0x08003fb4
 8003910:	08003fba 	.word	0x08003fba
 8003914:	08003fbe 	.word	0x08003fbe
 8003918:	00000000 	.word	0x00000000
 800391c:	08003681 	.word	0x08003681

08003920 <_printf_common>:
 8003920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	4691      	mov	r9, r2
 8003926:	461f      	mov	r7, r3
 8003928:	688a      	ldr	r2, [r1, #8]
 800392a:	690b      	ldr	r3, [r1, #16]
 800392c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003930:	4293      	cmp	r3, r2
 8003932:	bfb8      	it	lt
 8003934:	4613      	movlt	r3, r2
 8003936:	f8c9 3000 	str.w	r3, [r9]
 800393a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800393e:	4606      	mov	r6, r0
 8003940:	460c      	mov	r4, r1
 8003942:	b112      	cbz	r2, 800394a <_printf_common+0x2a>
 8003944:	3301      	adds	r3, #1
 8003946:	f8c9 3000 	str.w	r3, [r9]
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	0699      	lsls	r1, r3, #26
 800394e:	bf42      	ittt	mi
 8003950:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003954:	3302      	addmi	r3, #2
 8003956:	f8c9 3000 	strmi.w	r3, [r9]
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	f015 0506 	ands.w	r5, r5, #6
 8003960:	d107      	bne.n	8003972 <_printf_common+0x52>
 8003962:	f104 0a19 	add.w	sl, r4, #25
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	f8d9 2000 	ldr.w	r2, [r9]
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	429d      	cmp	r5, r3
 8003970:	db29      	blt.n	80039c6 <_printf_common+0xa6>
 8003972:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	3300      	adds	r3, #0
 800397a:	bf18      	it	ne
 800397c:	2301      	movne	r3, #1
 800397e:	0692      	lsls	r2, r2, #26
 8003980:	d42e      	bmi.n	80039e0 <_printf_common+0xc0>
 8003982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003986:	4639      	mov	r1, r7
 8003988:	4630      	mov	r0, r6
 800398a:	47c0      	blx	r8
 800398c:	3001      	adds	r0, #1
 800398e:	d021      	beq.n	80039d4 <_printf_common+0xb4>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	68e5      	ldr	r5, [r4, #12]
 8003994:	f8d9 2000 	ldr.w	r2, [r9]
 8003998:	f003 0306 	and.w	r3, r3, #6
 800399c:	2b04      	cmp	r3, #4
 800399e:	bf08      	it	eq
 80039a0:	1aad      	subeq	r5, r5, r2
 80039a2:	68a3      	ldr	r3, [r4, #8]
 80039a4:	6922      	ldr	r2, [r4, #16]
 80039a6:	bf0c      	ite	eq
 80039a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039ac:	2500      	movne	r5, #0
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bfc4      	itt	gt
 80039b2:	1a9b      	subgt	r3, r3, r2
 80039b4:	18ed      	addgt	r5, r5, r3
 80039b6:	f04f 0900 	mov.w	r9, #0
 80039ba:	341a      	adds	r4, #26
 80039bc:	454d      	cmp	r5, r9
 80039be:	d11b      	bne.n	80039f8 <_printf_common+0xd8>
 80039c0:	2000      	movs	r0, #0
 80039c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c6:	2301      	movs	r3, #1
 80039c8:	4652      	mov	r2, sl
 80039ca:	4639      	mov	r1, r7
 80039cc:	4630      	mov	r0, r6
 80039ce:	47c0      	blx	r8
 80039d0:	3001      	adds	r0, #1
 80039d2:	d103      	bne.n	80039dc <_printf_common+0xbc>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039dc:	3501      	adds	r5, #1
 80039de:	e7c2      	b.n	8003966 <_printf_common+0x46>
 80039e0:	18e1      	adds	r1, r4, r3
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	2030      	movs	r0, #48	; 0x30
 80039e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039ea:	4422      	add	r2, r4
 80039ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039f4:	3302      	adds	r3, #2
 80039f6:	e7c4      	b.n	8003982 <_printf_common+0x62>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4622      	mov	r2, r4
 80039fc:	4639      	mov	r1, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	47c0      	blx	r8
 8003a02:	3001      	adds	r0, #1
 8003a04:	d0e6      	beq.n	80039d4 <_printf_common+0xb4>
 8003a06:	f109 0901 	add.w	r9, r9, #1
 8003a0a:	e7d7      	b.n	80039bc <_printf_common+0x9c>

08003a0c <_printf_i>:
 8003a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a10:	4617      	mov	r7, r2
 8003a12:	7e0a      	ldrb	r2, [r1, #24]
 8003a14:	b085      	sub	sp, #20
 8003a16:	2a6e      	cmp	r2, #110	; 0x6e
 8003a18:	4698      	mov	r8, r3
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a20:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a24:	f000 80bc 	beq.w	8003ba0 <_printf_i+0x194>
 8003a28:	d81a      	bhi.n	8003a60 <_printf_i+0x54>
 8003a2a:	2a63      	cmp	r2, #99	; 0x63
 8003a2c:	d02e      	beq.n	8003a8c <_printf_i+0x80>
 8003a2e:	d80a      	bhi.n	8003a46 <_printf_i+0x3a>
 8003a30:	2a00      	cmp	r2, #0
 8003a32:	f000 80c8 	beq.w	8003bc6 <_printf_i+0x1ba>
 8003a36:	2a58      	cmp	r2, #88	; 0x58
 8003a38:	f000 808a 	beq.w	8003b50 <_printf_i+0x144>
 8003a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a44:	e02a      	b.n	8003a9c <_printf_i+0x90>
 8003a46:	2a64      	cmp	r2, #100	; 0x64
 8003a48:	d001      	beq.n	8003a4e <_printf_i+0x42>
 8003a4a:	2a69      	cmp	r2, #105	; 0x69
 8003a4c:	d1f6      	bne.n	8003a3c <_printf_i+0x30>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a56:	d023      	beq.n	8003aa0 <_printf_i+0x94>
 8003a58:	1d11      	adds	r1, r2, #4
 8003a5a:	6019      	str	r1, [r3, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	e027      	b.n	8003ab0 <_printf_i+0xa4>
 8003a60:	2a73      	cmp	r2, #115	; 0x73
 8003a62:	f000 80b4 	beq.w	8003bce <_printf_i+0x1c2>
 8003a66:	d808      	bhi.n	8003a7a <_printf_i+0x6e>
 8003a68:	2a6f      	cmp	r2, #111	; 0x6f
 8003a6a:	d02a      	beq.n	8003ac2 <_printf_i+0xb6>
 8003a6c:	2a70      	cmp	r2, #112	; 0x70
 8003a6e:	d1e5      	bne.n	8003a3c <_printf_i+0x30>
 8003a70:	680a      	ldr	r2, [r1, #0]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	600a      	str	r2, [r1, #0]
 8003a78:	e003      	b.n	8003a82 <_printf_i+0x76>
 8003a7a:	2a75      	cmp	r2, #117	; 0x75
 8003a7c:	d021      	beq.n	8003ac2 <_printf_i+0xb6>
 8003a7e:	2a78      	cmp	r2, #120	; 0x78
 8003a80:	d1dc      	bne.n	8003a3c <_printf_i+0x30>
 8003a82:	2278      	movs	r2, #120	; 0x78
 8003a84:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a88:	496e      	ldr	r1, [pc, #440]	; (8003c44 <_printf_i+0x238>)
 8003a8a:	e064      	b.n	8003b56 <_printf_i+0x14a>
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a92:	1d11      	adds	r1, r2, #4
 8003a94:	6019      	str	r1, [r3, #0]
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a3      	b.n	8003be8 <_printf_i+0x1dc>
 8003aa0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003aa4:	f102 0104 	add.w	r1, r2, #4
 8003aa8:	6019      	str	r1, [r3, #0]
 8003aaa:	d0d7      	beq.n	8003a5c <_printf_i+0x50>
 8003aac:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da03      	bge.n	8003abc <_printf_i+0xb0>
 8003ab4:	222d      	movs	r2, #45	; 0x2d
 8003ab6:	425b      	negs	r3, r3
 8003ab8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003abc:	4962      	ldr	r1, [pc, #392]	; (8003c48 <_printf_i+0x23c>)
 8003abe:	220a      	movs	r2, #10
 8003ac0:	e017      	b.n	8003af2 <_printf_i+0xe6>
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003aca:	d003      	beq.n	8003ad4 <_printf_i+0xc8>
 8003acc:	1d08      	adds	r0, r1, #4
 8003ace:	6018      	str	r0, [r3, #0]
 8003ad0:	680b      	ldr	r3, [r1, #0]
 8003ad2:	e006      	b.n	8003ae2 <_printf_i+0xd6>
 8003ad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ad8:	f101 0004 	add.w	r0, r1, #4
 8003adc:	6018      	str	r0, [r3, #0]
 8003ade:	d0f7      	beq.n	8003ad0 <_printf_i+0xc4>
 8003ae0:	880b      	ldrh	r3, [r1, #0]
 8003ae2:	4959      	ldr	r1, [pc, #356]	; (8003c48 <_printf_i+0x23c>)
 8003ae4:	2a6f      	cmp	r2, #111	; 0x6f
 8003ae6:	bf14      	ite	ne
 8003ae8:	220a      	movne	r2, #10
 8003aea:	2208      	moveq	r2, #8
 8003aec:	2000      	movs	r0, #0
 8003aee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003af2:	6865      	ldr	r5, [r4, #4]
 8003af4:	60a5      	str	r5, [r4, #8]
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	f2c0 809c 	blt.w	8003c34 <_printf_i+0x228>
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	f020 0004 	bic.w	r0, r0, #4
 8003b02:	6020      	str	r0, [r4, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d13f      	bne.n	8003b88 <_printf_i+0x17c>
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	f040 8095 	bne.w	8003c38 <_printf_i+0x22c>
 8003b0e:	4675      	mov	r5, lr
 8003b10:	2a08      	cmp	r2, #8
 8003b12:	d10b      	bne.n	8003b2c <_printf_i+0x120>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	07da      	lsls	r2, r3, #31
 8003b18:	d508      	bpl.n	8003b2c <_printf_i+0x120>
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	6862      	ldr	r2, [r4, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bfde      	ittt	le
 8003b22:	2330      	movle	r3, #48	; 0x30
 8003b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b2c:	ebae 0305 	sub.w	r3, lr, r5
 8003b30:	6123      	str	r3, [r4, #16]
 8003b32:	f8cd 8000 	str.w	r8, [sp]
 8003b36:	463b      	mov	r3, r7
 8003b38:	aa03      	add	r2, sp, #12
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7ff feef 	bl	8003920 <_printf_common>
 8003b42:	3001      	adds	r0, #1
 8003b44:	d155      	bne.n	8003bf2 <_printf_i+0x1e6>
 8003b46:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4a:	b005      	add	sp, #20
 8003b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b50:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b54:	493c      	ldr	r1, [pc, #240]	; (8003c48 <_printf_i+0x23c>)
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b5e:	f100 0504 	add.w	r5, r0, #4
 8003b62:	601d      	str	r5, [r3, #0]
 8003b64:	d001      	beq.n	8003b6a <_printf_i+0x15e>
 8003b66:	6803      	ldr	r3, [r0, #0]
 8003b68:	e002      	b.n	8003b70 <_printf_i+0x164>
 8003b6a:	0655      	lsls	r5, r2, #25
 8003b6c:	d5fb      	bpl.n	8003b66 <_printf_i+0x15a>
 8003b6e:	8803      	ldrh	r3, [r0, #0]
 8003b70:	07d0      	lsls	r0, r2, #31
 8003b72:	bf44      	itt	mi
 8003b74:	f042 0220 	orrmi.w	r2, r2, #32
 8003b78:	6022      	strmi	r2, [r4, #0]
 8003b7a:	b91b      	cbnz	r3, 8003b84 <_printf_i+0x178>
 8003b7c:	6822      	ldr	r2, [r4, #0]
 8003b7e:	f022 0220 	bic.w	r2, r2, #32
 8003b82:	6022      	str	r2, [r4, #0]
 8003b84:	2210      	movs	r2, #16
 8003b86:	e7b1      	b.n	8003aec <_printf_i+0xe0>
 8003b88:	4675      	mov	r5, lr
 8003b8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b8e:	fb02 3310 	mls	r3, r2, r0, r3
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d1f5      	bne.n	8003b8a <_printf_i+0x17e>
 8003b9e:	e7b7      	b.n	8003b10 <_printf_i+0x104>
 8003ba0:	6808      	ldr	r0, [r1, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	6949      	ldr	r1, [r1, #20]
 8003ba6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003baa:	d004      	beq.n	8003bb6 <_printf_i+0x1aa>
 8003bac:	1d10      	adds	r0, r2, #4
 8003bae:	6018      	str	r0, [r3, #0]
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <_printf_i+0x1ba>
 8003bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bba:	f102 0004 	add.w	r0, r2, #4
 8003bbe:	6018      	str	r0, [r3, #0]
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	d0f6      	beq.n	8003bb2 <_printf_i+0x1a6>
 8003bc4:	8019      	strh	r1, [r3, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6123      	str	r3, [r4, #16]
 8003bca:	4675      	mov	r5, lr
 8003bcc:	e7b1      	b.n	8003b32 <_printf_i+0x126>
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	1d11      	adds	r1, r2, #4
 8003bd2:	6019      	str	r1, [r3, #0]
 8003bd4:	6815      	ldr	r5, [r2, #0]
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f7fc fb00 	bl	80001e0 <memchr>
 8003be0:	b108      	cbz	r0, 8003be6 <_printf_i+0x1da>
 8003be2:	1b40      	subs	r0, r0, r5
 8003be4:	6060      	str	r0, [r4, #4]
 8003be6:	6863      	ldr	r3, [r4, #4]
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	2300      	movs	r3, #0
 8003bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf0:	e79f      	b.n	8003b32 <_printf_i+0x126>
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	47c0      	blx	r8
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0a2      	beq.n	8003b46 <_printf_i+0x13a>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	079b      	lsls	r3, r3, #30
 8003c04:	d507      	bpl.n	8003c16 <_printf_i+0x20a>
 8003c06:	2500      	movs	r5, #0
 8003c08:	f104 0919 	add.w	r9, r4, #25
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	9a03      	ldr	r2, [sp, #12]
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	429d      	cmp	r5, r3
 8003c14:	db05      	blt.n	8003c22 <_printf_i+0x216>
 8003c16:	68e0      	ldr	r0, [r4, #12]
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	4298      	cmp	r0, r3
 8003c1c:	bfb8      	it	lt
 8003c1e:	4618      	movlt	r0, r3
 8003c20:	e793      	b.n	8003b4a <_printf_i+0x13e>
 8003c22:	2301      	movs	r3, #1
 8003c24:	464a      	mov	r2, r9
 8003c26:	4639      	mov	r1, r7
 8003c28:	4630      	mov	r0, r6
 8003c2a:	47c0      	blx	r8
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d08a      	beq.n	8003b46 <_printf_i+0x13a>
 8003c30:	3501      	adds	r5, #1
 8003c32:	e7eb      	b.n	8003c0c <_printf_i+0x200>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1a7      	bne.n	8003b88 <_printf_i+0x17c>
 8003c38:	780b      	ldrb	r3, [r1, #0]
 8003c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c42:	e765      	b.n	8003b10 <_printf_i+0x104>
 8003c44:	08003fd6 	.word	0x08003fd6
 8003c48:	08003fc5 	.word	0x08003fc5

08003c4c <memcpy>:
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	1e43      	subs	r3, r0, #1
 8003c50:	440a      	add	r2, r1
 8003c52:	4291      	cmp	r1, r2
 8003c54:	d100      	bne.n	8003c58 <memcpy+0xc>
 8003c56:	bd10      	pop	{r4, pc}
 8003c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c60:	e7f7      	b.n	8003c52 <memcpy+0x6>

08003c62 <memmove>:
 8003c62:	4288      	cmp	r0, r1
 8003c64:	b510      	push	{r4, lr}
 8003c66:	eb01 0302 	add.w	r3, r1, r2
 8003c6a:	d803      	bhi.n	8003c74 <memmove+0x12>
 8003c6c:	1e42      	subs	r2, r0, #1
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d10c      	bne.n	8003c8c <memmove+0x2a>
 8003c72:	bd10      	pop	{r4, pc}
 8003c74:	4298      	cmp	r0, r3
 8003c76:	d2f9      	bcs.n	8003c6c <memmove+0xa>
 8003c78:	1881      	adds	r1, r0, r2
 8003c7a:	1ad2      	subs	r2, r2, r3
 8003c7c:	42d3      	cmn	r3, r2
 8003c7e:	d100      	bne.n	8003c82 <memmove+0x20>
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c8a:	e7f7      	b.n	8003c7c <memmove+0x1a>
 8003c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c94:	e7eb      	b.n	8003c6e <memmove+0xc>
	...

08003c98 <_free_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	2900      	cmp	r1, #0
 8003c9e:	d045      	beq.n	8003d2c <_free_r+0x94>
 8003ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca4:	1f0c      	subs	r4, r1, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	18e4      	addlt	r4, r4, r3
 8003cac:	f000 f8d6 	bl	8003e5c <__malloc_lock>
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <_free_r+0x98>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	b933      	cbnz	r3, 8003cc6 <_free_r+0x2e>
 8003cb8:	6063      	str	r3, [r4, #4]
 8003cba:	6014      	str	r4, [r2, #0]
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc2:	f000 b8cc 	b.w	8003e5e <__malloc_unlock>
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	d90c      	bls.n	8003ce4 <_free_r+0x4c>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	1862      	adds	r2, r4, r1
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	bf04      	itt	eq
 8003cd2:	681a      	ldreq	r2, [r3, #0]
 8003cd4:	685b      	ldreq	r3, [r3, #4]
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	bf04      	itt	eq
 8003cda:	1852      	addeq	r2, r2, r1
 8003cdc:	6022      	streq	r2, [r4, #0]
 8003cde:	6004      	str	r4, [r0, #0]
 8003ce0:	e7ec      	b.n	8003cbc <_free_r+0x24>
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	b10a      	cbz	r2, 8003cec <_free_r+0x54>
 8003ce8:	42a2      	cmp	r2, r4
 8003cea:	d9fa      	bls.n	8003ce2 <_free_r+0x4a>
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	1858      	adds	r0, r3, r1
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d10b      	bne.n	8003d0c <_free_r+0x74>
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	4401      	add	r1, r0
 8003cf8:	1858      	adds	r0, r3, r1
 8003cfa:	4282      	cmp	r2, r0
 8003cfc:	6019      	str	r1, [r3, #0]
 8003cfe:	d1dd      	bne.n	8003cbc <_free_r+0x24>
 8003d00:	6810      	ldr	r0, [r2, #0]
 8003d02:	6852      	ldr	r2, [r2, #4]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	4401      	add	r1, r0
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	e7d7      	b.n	8003cbc <_free_r+0x24>
 8003d0c:	d902      	bls.n	8003d14 <_free_r+0x7c>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	e7d3      	b.n	8003cbc <_free_r+0x24>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	1821      	adds	r1, r4, r0
 8003d18:	428a      	cmp	r2, r1
 8003d1a:	bf04      	itt	eq
 8003d1c:	6811      	ldreq	r1, [r2, #0]
 8003d1e:	6852      	ldreq	r2, [r2, #4]
 8003d20:	6062      	str	r2, [r4, #4]
 8003d22:	bf04      	itt	eq
 8003d24:	1809      	addeq	r1, r1, r0
 8003d26:	6021      	streq	r1, [r4, #0]
 8003d28:	605c      	str	r4, [r3, #4]
 8003d2a:	e7c7      	b.n	8003cbc <_free_r+0x24>
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
 8003d2e:	bf00      	nop
 8003d30:	200003e8 	.word	0x200003e8

08003d34 <_malloc_r>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	1ccd      	adds	r5, r1, #3
 8003d38:	f025 0503 	bic.w	r5, r5, #3
 8003d3c:	3508      	adds	r5, #8
 8003d3e:	2d0c      	cmp	r5, #12
 8003d40:	bf38      	it	cc
 8003d42:	250c      	movcc	r5, #12
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	4606      	mov	r6, r0
 8003d48:	db01      	blt.n	8003d4e <_malloc_r+0x1a>
 8003d4a:	42a9      	cmp	r1, r5
 8003d4c:	d903      	bls.n	8003d56 <_malloc_r+0x22>
 8003d4e:	230c      	movs	r3, #12
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	2000      	movs	r0, #0
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	f000 f881 	bl	8003e5c <__malloc_lock>
 8003d5a:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <_malloc_r+0xb4>)
 8003d5c:	6814      	ldr	r4, [r2, #0]
 8003d5e:	4621      	mov	r1, r4
 8003d60:	b991      	cbnz	r1, 8003d88 <_malloc_r+0x54>
 8003d62:	4c22      	ldr	r4, [pc, #136]	; (8003dec <_malloc_r+0xb8>)
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	b91b      	cbnz	r3, 8003d70 <_malloc_r+0x3c>
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f000 f867 	bl	8003e3c <_sbrk_r>
 8003d6e:	6020      	str	r0, [r4, #0]
 8003d70:	4629      	mov	r1, r5
 8003d72:	4630      	mov	r0, r6
 8003d74:	f000 f862 	bl	8003e3c <_sbrk_r>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d126      	bne.n	8003dca <_malloc_r+0x96>
 8003d7c:	230c      	movs	r3, #12
 8003d7e:	6033      	str	r3, [r6, #0]
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f86c 	bl	8003e5e <__malloc_unlock>
 8003d86:	e7e4      	b.n	8003d52 <_malloc_r+0x1e>
 8003d88:	680b      	ldr	r3, [r1, #0]
 8003d8a:	1b5b      	subs	r3, r3, r5
 8003d8c:	d41a      	bmi.n	8003dc4 <_malloc_r+0x90>
 8003d8e:	2b0b      	cmp	r3, #11
 8003d90:	d90f      	bls.n	8003db2 <_malloc_r+0x7e>
 8003d92:	600b      	str	r3, [r1, #0]
 8003d94:	50cd      	str	r5, [r1, r3]
 8003d96:	18cc      	adds	r4, r1, r3
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f000 f860 	bl	8003e5e <__malloc_unlock>
 8003d9e:	f104 000b 	add.w	r0, r4, #11
 8003da2:	1d23      	adds	r3, r4, #4
 8003da4:	f020 0007 	bic.w	r0, r0, #7
 8003da8:	1ac3      	subs	r3, r0, r3
 8003daa:	d01b      	beq.n	8003de4 <_malloc_r+0xb0>
 8003dac:	425a      	negs	r2, r3
 8003dae:	50e2      	str	r2, [r4, r3]
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	428c      	cmp	r4, r1
 8003db4:	bf0d      	iteet	eq
 8003db6:	6863      	ldreq	r3, [r4, #4]
 8003db8:	684b      	ldrne	r3, [r1, #4]
 8003dba:	6063      	strne	r3, [r4, #4]
 8003dbc:	6013      	streq	r3, [r2, #0]
 8003dbe:	bf18      	it	ne
 8003dc0:	460c      	movne	r4, r1
 8003dc2:	e7e9      	b.n	8003d98 <_malloc_r+0x64>
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	6849      	ldr	r1, [r1, #4]
 8003dc8:	e7ca      	b.n	8003d60 <_malloc_r+0x2c>
 8003dca:	1cc4      	adds	r4, r0, #3
 8003dcc:	f024 0403 	bic.w	r4, r4, #3
 8003dd0:	42a0      	cmp	r0, r4
 8003dd2:	d005      	beq.n	8003de0 <_malloc_r+0xac>
 8003dd4:	1a21      	subs	r1, r4, r0
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 f830 	bl	8003e3c <_sbrk_r>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0cd      	beq.n	8003d7c <_malloc_r+0x48>
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	e7d9      	b.n	8003d98 <_malloc_r+0x64>
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	bf00      	nop
 8003de8:	200003e8 	.word	0x200003e8
 8003dec:	200003ec 	.word	0x200003ec

08003df0 <_realloc_r>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4607      	mov	r7, r0
 8003df4:	4614      	mov	r4, r2
 8003df6:	460e      	mov	r6, r1
 8003df8:	b921      	cbnz	r1, 8003e04 <_realloc_r+0x14>
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e00:	f7ff bf98 	b.w	8003d34 <_malloc_r>
 8003e04:	b922      	cbnz	r2, 8003e10 <_realloc_r+0x20>
 8003e06:	f7ff ff47 	bl	8003c98 <_free_r>
 8003e0a:	4625      	mov	r5, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	f000 f826 	bl	8003e60 <_malloc_usable_size_r>
 8003e14:	4284      	cmp	r4, r0
 8003e16:	d90f      	bls.n	8003e38 <_realloc_r+0x48>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff ff8a 	bl	8003d34 <_malloc_r>
 8003e20:	4605      	mov	r5, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d0f2      	beq.n	8003e0c <_realloc_r+0x1c>
 8003e26:	4631      	mov	r1, r6
 8003e28:	4622      	mov	r2, r4
 8003e2a:	f7ff ff0f 	bl	8003c4c <memcpy>
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4638      	mov	r0, r7
 8003e32:	f7ff ff31 	bl	8003c98 <_free_r>
 8003e36:	e7e9      	b.n	8003e0c <_realloc_r+0x1c>
 8003e38:	4635      	mov	r5, r6
 8003e3a:	e7e7      	b.n	8003e0c <_realloc_r+0x1c>

08003e3c <_sbrk_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4c06      	ldr	r4, [pc, #24]	; (8003e58 <_sbrk_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4605      	mov	r5, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	f000 f86e 	bl	8003f28 <_sbrk>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_sbrk_r+0x1a>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_sbrk_r+0x1a>
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	200003f8 	.word	0x200003f8

08003e5c <__malloc_lock>:
 8003e5c:	4770      	bx	lr

08003e5e <__malloc_unlock>:
 8003e5e:	4770      	bx	lr

08003e60 <_malloc_usable_size_r>:
 8003e60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e64:	2800      	cmp	r0, #0
 8003e66:	f1a0 0004 	sub.w	r0, r0, #4
 8003e6a:	bfbc      	itt	lt
 8003e6c:	580b      	ldrlt	r3, [r1, r0]
 8003e6e:	18c0      	addlt	r0, r0, r3
 8003e70:	4770      	bx	lr

08003e72 <abort>:
 8003e72:	b508      	push	{r3, lr}
 8003e74:	2006      	movs	r0, #6
 8003e76:	f000 f82b 	bl	8003ed0 <raise>
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f000 f862 	bl	8003f44 <_exit>

08003e80 <_raise_r>:
 8003e80:	291f      	cmp	r1, #31
 8003e82:	b538      	push	{r3, r4, r5, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	460d      	mov	r5, r1
 8003e88:	d904      	bls.n	8003e94 <_raise_r+0x14>
 8003e8a:	2316      	movs	r3, #22
 8003e8c:	6003      	str	r3, [r0, #0]
 8003e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e96:	b112      	cbz	r2, 8003e9e <_raise_r+0x1e>
 8003e98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e9c:	b94b      	cbnz	r3, 8003eb2 <_raise_r+0x32>
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 f830 	bl	8003f04 <_getpid_r>
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eae:	f000 b817 	b.w	8003ee0 <_kill_r>
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00a      	beq.n	8003ecc <_raise_r+0x4c>
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	d103      	bne.n	8003ec2 <_raise_r+0x42>
 8003eba:	2316      	movs	r3, #22
 8003ebc:	6003      	str	r3, [r0, #0]
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
 8003ec2:	2400      	movs	r4, #0
 8003ec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003ec8:	4628      	mov	r0, r5
 8003eca:	4798      	blx	r3
 8003ecc:	2000      	movs	r0, #0
 8003ece:	bd38      	pop	{r3, r4, r5, pc}

08003ed0 <raise>:
 8003ed0:	4b02      	ldr	r3, [pc, #8]	; (8003edc <raise+0xc>)
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	f7ff bfd3 	b.w	8003e80 <_raise_r>
 8003eda:	bf00      	nop
 8003edc:	2000000c 	.word	0x2000000c

08003ee0 <_kill_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4c07      	ldr	r4, [pc, #28]	; (8003f00 <_kill_r+0x20>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	f000 f813 	bl	8003f18 <_kill>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d102      	bne.n	8003efc <_kill_r+0x1c>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	b103      	cbz	r3, 8003efc <_kill_r+0x1c>
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	bf00      	nop
 8003f00:	200003f8 	.word	0x200003f8

08003f04 <_getpid_r>:
 8003f04:	f000 b800 	b.w	8003f08 <_getpid>

08003f08 <_getpid>:
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <_getpid+0xc>)
 8003f0a:	2258      	movs	r2, #88	; 0x58
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	4770      	bx	lr
 8003f14:	200003f8 	.word	0x200003f8

08003f18 <_kill>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <_kill+0xc>)
 8003f1a:	2258      	movs	r2, #88	; 0x58
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f22:	4770      	bx	lr
 8003f24:	200003f8 	.word	0x200003f8

08003f28 <_sbrk>:
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <_sbrk+0x14>)
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	b909      	cbnz	r1, 8003f34 <_sbrk+0xc>
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <_sbrk+0x18>)
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	4402      	add	r2, r0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4770      	bx	lr
 8003f3c:	200003f0 	.word	0x200003f0
 8003f40:	200003fc 	.word	0x200003fc

08003f44 <_exit>:
 8003f44:	e7fe      	b.n	8003f44 <_exit>
	...

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
