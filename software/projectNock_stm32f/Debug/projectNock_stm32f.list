
projectNock_stm32f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080033c8  080033c8  000133c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000100  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  08003530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000380  20000070  080035a0  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200003f0  080035a0  000203f0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   000166f6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b44  00000000  00000000  00036796  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000701c  00000000  00000000  000392da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  000402f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  00040c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000604d  00000000  00000000  000419d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000401a  00000000  00000000  00047a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ba37  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001bd0  00000000  00000000  0004bab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0004d684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033b0 	.word	0x080033b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080033b0 	.word	0x080033b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f001 b8f6 	b.w	80013d8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <selfrel_offset31>:
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	005a      	lsls	r2, r3, #1
 80004e4:	bf4c      	ite	mi
 80004e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004ea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80004ee:	4418      	add	r0, r3
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <search_EIT_table>:
 80004f4:	b361      	cbz	r1, 8000550 <search_EIT_table+0x5c>
 80004f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004fa:	f101 3aff 	add.w	sl, r1, #4294967295
 80004fe:	4690      	mov	r8, r2
 8000500:	4606      	mov	r6, r0
 8000502:	46d1      	mov	r9, sl
 8000504:	2700      	movs	r7, #0
 8000506:	eb07 0409 	add.w	r4, r7, r9
 800050a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800050e:	1064      	asrs	r4, r4, #1
 8000510:	00e5      	lsls	r5, r4, #3
 8000512:	1971      	adds	r1, r6, r5
 8000514:	4608      	mov	r0, r1
 8000516:	f7ff ffe3 	bl	80004e0 <selfrel_offset31>
 800051a:	45a2      	cmp	sl, r4
 800051c:	4683      	mov	fp, r0
 800051e:	f105 0008 	add.w	r0, r5, #8
 8000522:	4430      	add	r0, r6
 8000524:	d009      	beq.n	800053a <search_EIT_table+0x46>
 8000526:	f7ff ffdb 	bl	80004e0 <selfrel_offset31>
 800052a:	45c3      	cmp	fp, r8
 800052c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000530:	d805      	bhi.n	800053e <search_EIT_table+0x4a>
 8000532:	4540      	cmp	r0, r8
 8000534:	d209      	bcs.n	800054a <search_EIT_table+0x56>
 8000536:	1c67      	adds	r7, r4, #1
 8000538:	e7e5      	b.n	8000506 <search_EIT_table+0x12>
 800053a:	45c3      	cmp	fp, r8
 800053c:	d905      	bls.n	800054a <search_EIT_table+0x56>
 800053e:	42a7      	cmp	r7, r4
 8000540:	d002      	beq.n	8000548 <search_EIT_table+0x54>
 8000542:	f104 39ff 	add.w	r9, r4, #4294967295
 8000546:	e7de      	b.n	8000506 <search_EIT_table+0x12>
 8000548:	2100      	movs	r1, #0
 800054a:	4608      	mov	r0, r1
 800054c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000550:	4608      	mov	r0, r1
 8000552:	4770      	bx	lr

08000554 <__gnu_unwind_get_pr_addr>:
 8000554:	2801      	cmp	r0, #1
 8000556:	d007      	beq.n	8000568 <__gnu_unwind_get_pr_addr+0x14>
 8000558:	2802      	cmp	r0, #2
 800055a:	d007      	beq.n	800056c <__gnu_unwind_get_pr_addr+0x18>
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <__gnu_unwind_get_pr_addr+0x1c>)
 800055e:	2800      	cmp	r0, #0
 8000560:	bf0c      	ite	eq
 8000562:	4618      	moveq	r0, r3
 8000564:	2000      	movne	r0, #0
 8000566:	4770      	bx	lr
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__gnu_unwind_get_pr_addr+0x20>)
 800056a:	4770      	bx	lr
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <__gnu_unwind_get_pr_addr+0x24>)
 800056e:	4770      	bx	lr
 8000570:	08000c59 	.word	0x08000c59
 8000574:	08000c5d 	.word	0x08000c5d
 8000578:	08000c61 	.word	0x08000c61

0800057c <get_eit_entry>:
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <get_eit_entry+0x94>)
 8000580:	b083      	sub	sp, #12
 8000582:	4604      	mov	r4, r0
 8000584:	1e8d      	subs	r5, r1, #2
 8000586:	b37b      	cbz	r3, 80005e8 <get_eit_entry+0x6c>
 8000588:	a901      	add	r1, sp, #4
 800058a:	4628      	mov	r0, r5
 800058c:	f3af 8000 	nop.w
 8000590:	b320      	cbz	r0, 80005dc <get_eit_entry+0x60>
 8000592:	9901      	ldr	r1, [sp, #4]
 8000594:	462a      	mov	r2, r5
 8000596:	f7ff ffad 	bl	80004f4 <search_EIT_table>
 800059a:	4601      	mov	r1, r0
 800059c:	b1f0      	cbz	r0, 80005dc <get_eit_entry+0x60>
 800059e:	f7ff ff9f 	bl	80004e0 <selfrel_offset31>
 80005a2:	684b      	ldr	r3, [r1, #4]
 80005a4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d012      	beq.n	80005d0 <get_eit_entry+0x54>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f101 0004 	add.w	r0, r1, #4
 80005b0:	db20      	blt.n	80005f4 <get_eit_entry+0x78>
 80005b2:	f7ff ff95 	bl	80004e0 <selfrel_offset31>
 80005b6:	2300      	movs	r3, #0
 80005b8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005ba:	6523      	str	r3, [r4, #80]	; 0x50
 80005bc:	6803      	ldr	r3, [r0, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db1c      	blt.n	80005fc <get_eit_entry+0x80>
 80005c2:	f7ff ff8d 	bl	80004e0 <selfrel_offset31>
 80005c6:	2300      	movs	r3, #0
 80005c8:	6120      	str	r0, [r4, #16]
 80005ca:	4618      	mov	r0, r3
 80005cc:	b003      	add	sp, #12
 80005ce:	bd30      	pop	{r4, r5, pc}
 80005d0:	2300      	movs	r3, #0
 80005d2:	6123      	str	r3, [r4, #16]
 80005d4:	2305      	movs	r3, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	b003      	add	sp, #12
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	2300      	movs	r3, #0
 80005de:	6123      	str	r3, [r4, #16]
 80005e0:	2309      	movs	r3, #9
 80005e2:	4618      	mov	r0, r3
 80005e4:	b003      	add	sp, #12
 80005e6:	bd30      	pop	{r4, r5, pc}
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <get_eit_entry+0x98>)
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <get_eit_entry+0x9c>)
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	10c9      	asrs	r1, r1, #3
 80005f0:	9101      	str	r1, [sp, #4]
 80005f2:	e7cf      	b.n	8000594 <get_eit_entry+0x18>
 80005f4:	2301      	movs	r3, #1
 80005f6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005f8:	6523      	str	r3, [r4, #80]	; 0x50
 80005fa:	e7df      	b.n	80005bc <get_eit_entry+0x40>
 80005fc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000600:	f7ff ffa8 	bl	8000554 <__gnu_unwind_get_pr_addr>
 8000604:	2800      	cmp	r0, #0
 8000606:	6120      	str	r0, [r4, #16]
 8000608:	bf14      	ite	ne
 800060a:	2300      	movne	r3, #0
 800060c:	2309      	moveq	r3, #9
 800060e:	e7dc      	b.n	80005ca <get_eit_entry+0x4e>
 8000610:	00000000 	.word	0x00000000
 8000614:	08003528 	.word	0x08003528
 8000618:	08003428 	.word	0x08003428

0800061c <restore_non_core_regs>:
 800061c:	6803      	ldr	r3, [r0, #0]
 800061e:	07da      	lsls	r2, r3, #31
 8000620:	b510      	push	{r4, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	d406      	bmi.n	8000634 <restore_non_core_regs+0x18>
 8000626:	079b      	lsls	r3, r3, #30
 8000628:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800062c:	d509      	bpl.n	8000642 <restore_non_core_regs+0x26>
 800062e:	f000 fc51 	bl	8000ed4 <__gnu_Unwind_Restore_VFP_D>
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	0759      	lsls	r1, r3, #29
 8000636:	d509      	bpl.n	800064c <restore_non_core_regs+0x30>
 8000638:	071a      	lsls	r2, r3, #28
 800063a:	d50e      	bpl.n	800065a <restore_non_core_regs+0x3e>
 800063c:	06db      	lsls	r3, r3, #27
 800063e:	d513      	bpl.n	8000668 <restore_non_core_regs+0x4c>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	f000 fc3f 	bl	8000ec4 <__gnu_Unwind_Restore_VFP>
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	0759      	lsls	r1, r3, #29
 800064a:	d4f5      	bmi.n	8000638 <restore_non_core_regs+0x1c>
 800064c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000650:	f000 fc48 	bl	8000ee4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	071a      	lsls	r2, r3, #28
 8000658:	d4f0      	bmi.n	800063c <restore_non_core_regs+0x20>
 800065a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800065e:	f000 fc49 	bl	8000ef4 <__gnu_Unwind_Restore_WMMXD>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	06db      	lsls	r3, r3, #27
 8000666:	d4eb      	bmi.n	8000640 <restore_non_core_regs+0x24>
 8000668:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f000 bc84 	b.w	8000f7c <__gnu_Unwind_Restore_WMMXC>

08000674 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000674:	6803      	ldr	r3, [r0, #0]
 8000676:	b103      	cbz	r3, 800067a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000678:	4403      	add	r3, r0
 800067a:	4618      	mov	r0, r3
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <__gnu_unwind_24bit.isra.1>:
 8000680:	2009      	movs	r0, #9
 8000682:	4770      	bx	lr

08000684 <_Unwind_DebugHook>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <unwind_phase2>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	4604      	mov	r4, r0
 800068c:	460d      	mov	r5, r1
 800068e:	e008      	b.n	80006a2 <unwind_phase2+0x1a>
 8000690:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000692:	6163      	str	r3, [r4, #20]
 8000694:	462a      	mov	r2, r5
 8000696:	6923      	ldr	r3, [r4, #16]
 8000698:	4621      	mov	r1, r4
 800069a:	2001      	movs	r0, #1
 800069c:	4798      	blx	r3
 800069e:	2808      	cmp	r0, #8
 80006a0:	d108      	bne.n	80006b4 <unwind_phase2+0x2c>
 80006a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006a4:	4620      	mov	r0, r4
 80006a6:	f7ff ff69 	bl	800057c <get_eit_entry>
 80006aa:	4606      	mov	r6, r0
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d0ef      	beq.n	8000690 <unwind_phase2+0x8>
 80006b0:	f002 fe16 	bl	80032e0 <abort>
 80006b4:	2807      	cmp	r0, #7
 80006b6:	d1fb      	bne.n	80006b0 <unwind_phase2+0x28>
 80006b8:	4630      	mov	r0, r6
 80006ba:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006bc:	f7ff ffe2 	bl	8000684 <_Unwind_DebugHook>
 80006c0:	1d28      	adds	r0, r5, #4
 80006c2:	f000 fbf3 	bl	8000eac <__restore_core_regs>
 80006c6:	bf00      	nop

080006c8 <unwind_phase2_forced>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	1d0c      	adds	r4, r1, #4
 80006ce:	4605      	mov	r5, r0
 80006d0:	4692      	mov	sl, r2
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006d8:	ae03      	add	r6, sp, #12
 80006da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006e8:	ac02      	add	r4, sp, #8
 80006ea:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80006ee:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80006f2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80006f6:	2300      	movs	r3, #0
 80006f8:	4628      	mov	r0, r5
 80006fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80006fc:	6023      	str	r3, [r4, #0]
 80006fe:	f7ff ff3d 	bl	800057c <get_eit_entry>
 8000702:	f1ba 0f00 	cmp.w	sl, #0
 8000706:	4607      	mov	r7, r0
 8000708:	bf14      	ite	ne
 800070a:	260a      	movne	r6, #10
 800070c:	2609      	moveq	r6, #9
 800070e:	b17f      	cbz	r7, 8000730 <unwind_phase2_forced+0x68>
 8000710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000712:	f046 0110 	orr.w	r1, r6, #16
 8000716:	e88d 0210 	stmia.w	sp, {r4, r9}
 800071a:	462a      	mov	r2, r5
 800071c:	6463      	str	r3, [r4, #68]	; 0x44
 800071e:	2001      	movs	r0, #1
 8000720:	462b      	mov	r3, r5
 8000722:	47c0      	blx	r8
 8000724:	bb78      	cbnz	r0, 8000786 <unwind_phase2_forced+0xbe>
 8000726:	4638      	mov	r0, r7
 8000728:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800072c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000732:	616b      	str	r3, [r5, #20]
 8000734:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000738:	4621      	mov	r1, r4
 800073a:	a87a      	add	r0, sp, #488	; 0x1e8
 800073c:	f002 fdd7 	bl	80032ee <memcpy>
 8000740:	692b      	ldr	r3, [r5, #16]
 8000742:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000744:	4629      	mov	r1, r5
 8000746:	4630      	mov	r0, r6
 8000748:	4798      	blx	r3
 800074a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800074c:	4682      	mov	sl, r0
 800074e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000752:	4631      	mov	r1, r6
 8000754:	6463      	str	r3, [r4, #68]	; 0x44
 8000756:	462a      	mov	r2, r5
 8000758:	462b      	mov	r3, r5
 800075a:	2001      	movs	r0, #1
 800075c:	47c0      	blx	r8
 800075e:	b990      	cbnz	r0, 8000786 <unwind_phase2_forced+0xbe>
 8000760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000764:	a97a      	add	r1, sp, #488	; 0x1e8
 8000766:	4620      	mov	r0, r4
 8000768:	f002 fdc1 	bl	80032ee <memcpy>
 800076c:	f1ba 0f08 	cmp.w	sl, #8
 8000770:	d106      	bne.n	8000780 <unwind_phase2_forced+0xb8>
 8000772:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000774:	4628      	mov	r0, r5
 8000776:	f7ff ff01 	bl	800057c <get_eit_entry>
 800077a:	2609      	movs	r6, #9
 800077c:	4607      	mov	r7, r0
 800077e:	e7c6      	b.n	800070e <unwind_phase2_forced+0x46>
 8000780:	f1ba 0f07 	cmp.w	sl, #7
 8000784:	d005      	beq.n	8000792 <unwind_phase2_forced+0xca>
 8000786:	2709      	movs	r7, #9
 8000788:	4638      	mov	r0, r7
 800078a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	4638      	mov	r0, r7
 8000794:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000796:	f7ff ff75 	bl	8000684 <_Unwind_DebugHook>
 800079a:	a803      	add	r0, sp, #12
 800079c:	f000 fb86 	bl	8000eac <__restore_core_regs>

080007a0 <_Unwind_GetCFA>:
 80007a0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007a2:	4770      	bx	lr

080007a4 <__gnu_Unwind_RaiseException>:
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007a8:	640b      	str	r3, [r1, #64]	; 0x40
 80007aa:	1d0e      	adds	r6, r1, #4
 80007ac:	460f      	mov	r7, r1
 80007ae:	4604      	mov	r4, r0
 80007b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007b2:	b0f9      	sub	sp, #484	; 0x1e4
 80007b4:	ad01      	add	r5, sp, #4
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007c4:	f04f 36ff 	mov.w	r6, #4294967295
 80007c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007cc:	9600      	str	r6, [sp, #0]
 80007ce:	e006      	b.n	80007de <__gnu_Unwind_RaiseException+0x3a>
 80007d0:	6923      	ldr	r3, [r4, #16]
 80007d2:	466a      	mov	r2, sp
 80007d4:	4621      	mov	r1, r4
 80007d6:	4798      	blx	r3
 80007d8:	2808      	cmp	r0, #8
 80007da:	4605      	mov	r5, r0
 80007dc:	d108      	bne.n	80007f0 <__gnu_Unwind_RaiseException+0x4c>
 80007de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff fecb 	bl	800057c <get_eit_entry>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d0f2      	beq.n	80007d0 <__gnu_Unwind_RaiseException+0x2c>
 80007ea:	2009      	movs	r0, #9
 80007ec:	b079      	add	sp, #484	; 0x1e4
 80007ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f0:	4668      	mov	r0, sp
 80007f2:	f7ff ff13 	bl	800061c <restore_non_core_regs>
 80007f6:	2d06      	cmp	r5, #6
 80007f8:	d1f7      	bne.n	80007ea <__gnu_Unwind_RaiseException+0x46>
 80007fa:	4639      	mov	r1, r7
 80007fc:	4620      	mov	r0, r4
 80007fe:	f7ff ff43 	bl	8000688 <unwind_phase2>
 8000802:	bf00      	nop

08000804 <__gnu_Unwind_ForcedUnwind>:
 8000804:	b430      	push	{r4, r5}
 8000806:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000808:	60c1      	str	r1, [r0, #12]
 800080a:	6182      	str	r2, [r0, #24]
 800080c:	4619      	mov	r1, r3
 800080e:	641d      	str	r5, [r3, #64]	; 0x40
 8000810:	2200      	movs	r2, #0
 8000812:	bc30      	pop	{r4, r5}
 8000814:	e758      	b.n	80006c8 <unwind_phase2_forced>
 8000816:	bf00      	nop

08000818 <__gnu_Unwind_Resume>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	68c6      	ldr	r6, [r0, #12]
 800081c:	6943      	ldr	r3, [r0, #20]
 800081e:	640b      	str	r3, [r1, #64]	; 0x40
 8000820:	b126      	cbz	r6, 800082c <__gnu_Unwind_Resume+0x14>
 8000822:	2201      	movs	r2, #1
 8000824:	f7ff ff50 	bl	80006c8 <unwind_phase2_forced>
 8000828:	f002 fd5a 	bl	80032e0 <abort>
 800082c:	6903      	ldr	r3, [r0, #16]
 800082e:	460a      	mov	r2, r1
 8000830:	4604      	mov	r4, r0
 8000832:	460d      	mov	r5, r1
 8000834:	4601      	mov	r1, r0
 8000836:	2002      	movs	r0, #2
 8000838:	4798      	blx	r3
 800083a:	2807      	cmp	r0, #7
 800083c:	d007      	beq.n	800084e <__gnu_Unwind_Resume+0x36>
 800083e:	2808      	cmp	r0, #8
 8000840:	d103      	bne.n	800084a <__gnu_Unwind_Resume+0x32>
 8000842:	4629      	mov	r1, r5
 8000844:	4620      	mov	r0, r4
 8000846:	f7ff ff1f 	bl	8000688 <unwind_phase2>
 800084a:	f002 fd49 	bl	80032e0 <abort>
 800084e:	4630      	mov	r0, r6
 8000850:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000852:	f7ff ff17 	bl	8000684 <_Unwind_DebugHook>
 8000856:	1d28      	adds	r0, r5, #4
 8000858:	f000 fb28 	bl	8000eac <__restore_core_regs>

0800085c <__gnu_Unwind_Resume_or_Rethrow>:
 800085c:	68c2      	ldr	r2, [r0, #12]
 800085e:	b11a      	cbz	r2, 8000868 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000860:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000862:	640a      	str	r2, [r1, #64]	; 0x40
 8000864:	2200      	movs	r2, #0
 8000866:	e72f      	b.n	80006c8 <unwind_phase2_forced>
 8000868:	e79c      	b.n	80007a4 <__gnu_Unwind_RaiseException>
 800086a:	bf00      	nop

0800086c <_Unwind_Complete>:
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <_Unwind_DeleteException>:
 8000870:	6883      	ldr	r3, [r0, #8]
 8000872:	b113      	cbz	r3, 800087a <_Unwind_DeleteException+0xa>
 8000874:	4601      	mov	r1, r0
 8000876:	2001      	movs	r0, #1
 8000878:	4718      	bx	r3
 800087a:	4770      	bx	lr

0800087c <_Unwind_VRS_Get>:
 800087c:	b500      	push	{lr}
 800087e:	2904      	cmp	r1, #4
 8000880:	d807      	bhi.n	8000892 <_Unwind_VRS_Get+0x16>
 8000882:	e8df f001 	tbb	[pc, r1]
 8000886:	0903      	.short	0x0903
 8000888:	0906      	.short	0x0906
 800088a:	09          	.byte	0x09
 800088b:	00          	.byte	0x00
 800088c:	b90b      	cbnz	r3, 8000892 <_Unwind_VRS_Get+0x16>
 800088e:	2a0f      	cmp	r2, #15
 8000890:	d905      	bls.n	800089e <_Unwind_VRS_Get+0x22>
 8000892:	2002      	movs	r0, #2
 8000894:	f85d fb04 	ldr.w	pc, [sp], #4
 8000898:	2001      	movs	r0, #1
 800089a:	f85d fb04 	ldr.w	pc, [sp], #4
 800089e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	6853      	ldr	r3, [r2, #4]
 80008a6:	9a01      	ldr	r2, [sp, #4]
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ae:	bf00      	nop

080008b0 <_Unwind_GetGR>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	2300      	movs	r3, #0
 80008b6:	ac03      	add	r4, sp, #12
 80008b8:	460a      	mov	r2, r1
 80008ba:	9400      	str	r4, [sp, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f7ff ffdd 	bl	800087c <_Unwind_VRS_Get>
 80008c2:	9803      	ldr	r0, [sp, #12]
 80008c4:	b004      	add	sp, #16
 80008c6:	bd10      	pop	{r4, pc}

080008c8 <_Unwind_VRS_Set>:
 80008c8:	b500      	push	{lr}
 80008ca:	2904      	cmp	r1, #4
 80008cc:	d807      	bhi.n	80008de <_Unwind_VRS_Set+0x16>
 80008ce:	e8df f001 	tbb	[pc, r1]
 80008d2:	0903      	.short	0x0903
 80008d4:	0906      	.short	0x0906
 80008d6:	09          	.byte	0x09
 80008d7:	00          	.byte	0x00
 80008d8:	b90b      	cbnz	r3, 80008de <_Unwind_VRS_Set+0x16>
 80008da:	2a0f      	cmp	r2, #15
 80008dc:	d905      	bls.n	80008ea <_Unwind_VRS_Set+0x22>
 80008de:	2002      	movs	r0, #2
 80008e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e4:	2001      	movs	r0, #1
 80008e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ea:	9901      	ldr	r1, [sp, #4]
 80008ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008f0:	6809      	ldr	r1, [r1, #0]
 80008f2:	6051      	str	r1, [r2, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008fa:	bf00      	nop

080008fc <_Unwind_SetGR>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	ac04      	add	r4, sp, #16
 8000902:	2300      	movs	r3, #0
 8000904:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000908:	460a      	mov	r2, r1
 800090a:	9400      	str	r4, [sp, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f7ff ffdb 	bl	80008c8 <_Unwind_VRS_Set>
 8000912:	b004      	add	sp, #16
 8000914:	bd10      	pop	{r4, pc}
 8000916:	bf00      	nop

08000918 <__gnu_Unwind_Backtrace>:
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	1d15      	adds	r5, r2, #4
 8000920:	4607      	mov	r7, r0
 8000922:	460e      	mov	r6, r1
 8000924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000926:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800092a:	ac17      	add	r4, sp, #92	; 0x5c
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800093a:	f04f 35ff 	mov.w	r5, #4294967295
 800093e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000942:	9516      	str	r5, [sp, #88]	; 0x58
 8000944:	e010      	b.n	8000968 <__gnu_Unwind_Backtrace+0x50>
 8000946:	a816      	add	r0, sp, #88	; 0x58
 8000948:	f7ff ffd8 	bl	80008fc <_Unwind_SetGR>
 800094c:	4631      	mov	r1, r6
 800094e:	a816      	add	r0, sp, #88	; 0x58
 8000950:	47b8      	blx	r7
 8000952:	aa16      	add	r2, sp, #88	; 0x58
 8000954:	4669      	mov	r1, sp
 8000956:	b978      	cbnz	r0, 8000978 <__gnu_Unwind_Backtrace+0x60>
 8000958:	9b04      	ldr	r3, [sp, #16]
 800095a:	2008      	movs	r0, #8
 800095c:	4798      	blx	r3
 800095e:	2805      	cmp	r0, #5
 8000960:	4604      	mov	r4, r0
 8000962:	d00a      	beq.n	800097a <__gnu_Unwind_Backtrace+0x62>
 8000964:	2809      	cmp	r0, #9
 8000966:	d007      	beq.n	8000978 <__gnu_Unwind_Backtrace+0x60>
 8000968:	9926      	ldr	r1, [sp, #152]	; 0x98
 800096a:	4668      	mov	r0, sp
 800096c:	f7ff fe06 	bl	800057c <get_eit_entry>
 8000970:	466a      	mov	r2, sp
 8000972:	210c      	movs	r1, #12
 8000974:	2800      	cmp	r0, #0
 8000976:	d0e6      	beq.n	8000946 <__gnu_Unwind_Backtrace+0x2e>
 8000978:	2409      	movs	r4, #9
 800097a:	a816      	add	r0, sp, #88	; 0x58
 800097c:	f7ff fe4e 	bl	800061c <restore_non_core_regs>
 8000980:	4620      	mov	r0, r4
 8000982:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000986:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000988 <__gnu_unwind_pr_common>:
 8000988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800098c:	460d      	mov	r5, r1
 800098e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000990:	b08b      	sub	sp, #44	; 0x2c
 8000992:	1d0c      	adds	r4, r1, #4
 8000994:	6809      	ldr	r1, [r1, #0]
 8000996:	9107      	str	r1, [sp, #28]
 8000998:	4691      	mov	r9, r2
 800099a:	9408      	str	r4, [sp, #32]
 800099c:	f000 0b03 	and.w	fp, r0, #3
 80009a0:	461e      	mov	r6, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d160      	bne.n	8000a68 <__gnu_unwind_pr_common+0xe0>
 80009a6:	0209      	lsls	r1, r1, #8
 80009a8:	2303      	movs	r3, #3
 80009aa:	9107      	str	r1, [sp, #28]
 80009ac:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009b6:	f1bb 0f02 	cmp.w	fp, #2
 80009ba:	bf08      	it	eq
 80009bc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009be:	f013 0301 	ands.w	r3, r3, #1
 80009c2:	d140      	bne.n	8000a46 <__gnu_unwind_pr_common+0xbe>
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	f000 0308 	and.w	r3, r0, #8
 80009ca:	9303      	str	r3, [sp, #12]
 80009cc:	f8d4 8000 	ldr.w	r8, [r4]
 80009d0:	f1b8 0f00 	cmp.w	r8, #0
 80009d4:	d039      	beq.n	8000a4a <__gnu_unwind_pr_common+0xc2>
 80009d6:	2e02      	cmp	r6, #2
 80009d8:	d043      	beq.n	8000a62 <__gnu_unwind_pr_common+0xda>
 80009da:	f8b4 8000 	ldrh.w	r8, [r4]
 80009de:	8867      	ldrh	r7, [r4, #2]
 80009e0:	3404      	adds	r4, #4
 80009e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80009e4:	f027 0a01 	bic.w	sl, r7, #1
 80009e8:	210f      	movs	r1, #15
 80009ea:	4648      	mov	r0, r9
 80009ec:	449a      	add	sl, r3
 80009ee:	f7ff ff5f 	bl	80008b0 <_Unwind_GetGR>
 80009f2:	4582      	cmp	sl, r0
 80009f4:	d833      	bhi.n	8000a5e <__gnu_unwind_pr_common+0xd6>
 80009f6:	f028 0301 	bic.w	r3, r8, #1
 80009fa:	449a      	add	sl, r3
 80009fc:	4550      	cmp	r0, sl
 80009fe:	bf2c      	ite	cs
 8000a00:	2000      	movcs	r0, #0
 8000a02:	2001      	movcc	r0, #1
 8000a04:	007f      	lsls	r7, r7, #1
 8000a06:	f007 0702 	and.w	r7, r7, #2
 8000a0a:	f008 0801 	and.w	r8, r8, #1
 8000a0e:	ea47 0708 	orr.w	r7, r7, r8
 8000a12:	2f01      	cmp	r7, #1
 8000a14:	d03e      	beq.n	8000a94 <__gnu_unwind_pr_common+0x10c>
 8000a16:	d335      	bcc.n	8000a84 <__gnu_unwind_pr_common+0xfc>
 8000a18:	2f02      	cmp	r7, #2
 8000a1a:	d11c      	bne.n	8000a56 <__gnu_unwind_pr_common+0xce>
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a22:	9202      	str	r2, [sp, #8]
 8000a24:	f1bb 0f00 	cmp.w	fp, #0
 8000a28:	d176      	bne.n	8000b18 <__gnu_unwind_pr_common+0x190>
 8000a2a:	b128      	cbz	r0, 8000a38 <__gnu_unwind_pr_common+0xb0>
 8000a2c:	9903      	ldr	r1, [sp, #12]
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	d07e      	beq.n	8000b30 <__gnu_unwind_pr_common+0x1a8>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	f000 80a6 	beq.w	8000b84 <__gnu_unwind_pr_common+0x1fc>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db77      	blt.n	8000b2c <__gnu_unwind_pr_common+0x1a4>
 8000a3c:	9b02      	ldr	r3, [sp, #8]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a44:	e7c2      	b.n	80009cc <__gnu_unwind_pr_common+0x44>
 8000a46:	2300      	movs	r3, #0
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	2e02      	cmp	r6, #2
 8000a4c:	dd3e      	ble.n	8000acc <__gnu_unwind_pr_common+0x144>
 8000a4e:	f7ff fe17 	bl	8000680 <__gnu_unwind_24bit.isra.1>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d040      	beq.n	8000ad8 <__gnu_unwind_pr_common+0x150>
 8000a56:	2009      	movs	r0, #9
 8000a58:	b00b      	add	sp, #44	; 0x2c
 8000a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	2000      	movs	r0, #0
 8000a60:	e7d0      	b.n	8000a04 <__gnu_unwind_pr_common+0x7c>
 8000a62:	6867      	ldr	r7, [r4, #4]
 8000a64:	3408      	adds	r4, #8
 8000a66:	e7bc      	b.n	80009e2 <__gnu_unwind_pr_common+0x5a>
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	dca3      	bgt.n	80009b4 <__gnu_unwind_pr_common+0x2c>
 8000a6c:	0c0b      	lsrs	r3, r1, #16
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	0409      	lsls	r1, r1, #16
 8000a72:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000a76:	2302      	movs	r3, #2
 8000a78:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a7c:	9107      	str	r1, [sp, #28]
 8000a7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a82:	e797      	b.n	80009b4 <__gnu_unwind_pr_common+0x2c>
 8000a84:	f1bb 0f00 	cmp.w	fp, #0
 8000a88:	d002      	beq.n	8000a90 <__gnu_unwind_pr_common+0x108>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	f040 80bd 	bne.w	8000c0a <__gnu_unwind_pr_common+0x282>
 8000a90:	3404      	adds	r4, #4
 8000a92:	e79b      	b.n	80009cc <__gnu_unwind_pr_common+0x44>
 8000a94:	f1bb 0f00 	cmp.w	fp, #0
 8000a98:	d125      	bne.n	8000ae6 <__gnu_unwind_pr_common+0x15e>
 8000a9a:	b1a8      	cbz	r0, 8000ac8 <__gnu_unwind_pr_common+0x140>
 8000a9c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000aa0:	1c99      	adds	r1, r3, #2
 8000aa2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000aa6:	d0d6      	beq.n	8000a56 <__gnu_unwind_pr_common+0xce>
 8000aa8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000aac:	3301      	adds	r3, #1
 8000aae:	9106      	str	r1, [sp, #24]
 8000ab0:	f000 80a3 	beq.w	8000bfa <__gnu_unwind_pr_common+0x272>
 8000ab4:	1d20      	adds	r0, r4, #4
 8000ab6:	f7ff fddd 	bl	8000674 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000aba:	ab06      	add	r3, sp, #24
 8000abc:	4601      	mov	r1, r0
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f3af 8000 	nop.w
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d177      	bne.n	8000bb8 <__gnu_unwind_pr_common+0x230>
 8000ac8:	3408      	adds	r4, #8
 8000aca:	e77f      	b.n	80009cc <__gnu_unwind_pr_common+0x44>
 8000acc:	a907      	add	r1, sp, #28
 8000ace:	4648      	mov	r0, r9
 8000ad0:	f000 faee 	bl	80010b0 <__gnu_unwind_execute>
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	d1be      	bne.n	8000a56 <__gnu_unwind_pr_common+0xce>
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d15c      	bne.n	8000b98 <__gnu_unwind_pr_common+0x210>
 8000ade:	2008      	movs	r0, #8
 8000ae0:	b00b      	add	sp, #44	; 0x2c
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae6:	210d      	movs	r1, #13
 8000ae8:	4648      	mov	r0, r9
 8000aea:	6a2f      	ldr	r7, [r5, #32]
 8000aec:	f7ff fee0 	bl	80008b0 <_Unwind_GetGR>
 8000af0:	4287      	cmp	r7, r0
 8000af2:	d1e9      	bne.n	8000ac8 <__gnu_unwind_pr_common+0x140>
 8000af4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000af6:	429c      	cmp	r4, r3
 8000af8:	d1e6      	bne.n	8000ac8 <__gnu_unwind_pr_common+0x140>
 8000afa:	4620      	mov	r0, r4
 8000afc:	f7ff fcf0 	bl	80004e0 <selfrel_offset31>
 8000b00:	210f      	movs	r1, #15
 8000b02:	4602      	mov	r2, r0
 8000b04:	4648      	mov	r0, r9
 8000b06:	f7ff fef9 	bl	80008fc <_Unwind_SetGR>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	462a      	mov	r2, r5
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f7ff fef4 	bl	80008fc <_Unwind_SetGR>
 8000b14:	2007      	movs	r0, #7
 8000b16:	e79f      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000b18:	210d      	movs	r1, #13
 8000b1a:	4648      	mov	r0, r9
 8000b1c:	6a2f      	ldr	r7, [r5, #32]
 8000b1e:	f7ff fec7 	bl	80008b0 <_Unwind_GetGR>
 8000b22:	4287      	cmp	r7, r0
 8000b24:	d058      	beq.n	8000bd8 <__gnu_unwind_pr_common+0x250>
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	da87      	bge.n	8000a3c <__gnu_unwind_pr_common+0xb4>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	e785      	b.n	8000a3c <__gnu_unwind_pr_common+0xb4>
 8000b30:	9b02      	ldr	r3, [sp, #8]
 8000b32:	b33b      	cbz	r3, 8000b84 <__gnu_unwind_pr_common+0x1fc>
 8000b34:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b38:	1d27      	adds	r7, r4, #4
 8000b3a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b42:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b46:	9605      	str	r6, [sp, #20]
 8000b48:	46a3      	mov	fp, r4
 8000b4a:	461c      	mov	r4, r3
 8000b4c:	e002      	b.n	8000b54 <__gnu_unwind_pr_common+0x1cc>
 8000b4e:	45b2      	cmp	sl, r6
 8000b50:	46b0      	mov	r8, r6
 8000b52:	d016      	beq.n	8000b82 <__gnu_unwind_pr_common+0x1fa>
 8000b54:	4638      	mov	r0, r7
 8000b56:	9406      	str	r4, [sp, #24]
 8000b58:	f7ff fd8c 	bl	8000674 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b5c:	ab06      	add	r3, sp, #24
 8000b5e:	4601      	mov	r1, r0
 8000b60:	2200      	movs	r2, #0
 8000b62:	4628      	mov	r0, r5
 8000b64:	f3af 8000 	nop.w
 8000b68:	f108 0601 	add.w	r6, r8, #1
 8000b6c:	3704      	adds	r7, #4
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d0ed      	beq.n	8000b4e <__gnu_unwind_pr_common+0x1c6>
 8000b72:	9b02      	ldr	r3, [sp, #8]
 8000b74:	9e05      	ldr	r6, [sp, #20]
 8000b76:	4543      	cmp	r3, r8
 8000b78:	465c      	mov	r4, fp
 8000b7a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b7e:	d1d2      	bne.n	8000b26 <__gnu_unwind_pr_common+0x19e>
 8000b80:	e000      	b.n	8000b84 <__gnu_unwind_pr_common+0x1fc>
 8000b82:	465c      	mov	r4, fp
 8000b84:	4648      	mov	r0, r9
 8000b86:	210d      	movs	r1, #13
 8000b88:	f7ff fe92 	bl	80008b0 <_Unwind_GetGR>
 8000b8c:	9b06      	ldr	r3, [sp, #24]
 8000b8e:	6228      	str	r0, [r5, #32]
 8000b90:	62ac      	str	r4, [r5, #40]	; 0x28
 8000b92:	626b      	str	r3, [r5, #36]	; 0x24
 8000b94:	2006      	movs	r0, #6
 8000b96:	e75f      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000b98:	210f      	movs	r1, #15
 8000b9a:	4648      	mov	r0, r9
 8000b9c:	f7ff fe88 	bl	80008b0 <_Unwind_GetGR>
 8000ba0:	210e      	movs	r1, #14
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4648      	mov	r0, r9
 8000ba6:	f7ff fea9 	bl	80008fc <_Unwind_SetGR>
 8000baa:	4648      	mov	r0, r9
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <__gnu_unwind_pr_common+0x2cc>)
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f7ff fea4 	bl	80008fc <_Unwind_SetGR>
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	e74f      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000bb8:	4607      	mov	r7, r0
 8000bba:	210d      	movs	r1, #13
 8000bbc:	4648      	mov	r0, r9
 8000bbe:	f7ff fe77 	bl	80008b0 <_Unwind_GetGR>
 8000bc2:	2f02      	cmp	r7, #2
 8000bc4:	6228      	str	r0, [r5, #32]
 8000bc6:	d11d      	bne.n	8000c04 <__gnu_unwind_pr_common+0x27c>
 8000bc8:	462b      	mov	r3, r5
 8000bca:	9a06      	ldr	r2, [sp, #24]
 8000bcc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bd0:	626b      	str	r3, [r5, #36]	; 0x24
 8000bd2:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	e73f      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000bd8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	d1a3      	bne.n	8000b26 <__gnu_unwind_pr_common+0x19e>
 8000bde:	2204      	movs	r2, #4
 8000be0:	2700      	movs	r7, #0
 8000be2:	18a3      	adds	r3, r4, r2
 8000be4:	9902      	ldr	r1, [sp, #8]
 8000be6:	62a9      	str	r1, [r5, #40]	; 0x28
 8000be8:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000bea:	632a      	str	r2, [r5, #48]	; 0x30
 8000bec:	636b      	str	r3, [r5, #52]	; 0x34
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	42bb      	cmp	r3, r7
 8000bf2:	db1d      	blt.n	8000c30 <__gnu_unwind_pr_common+0x2a8>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	e720      	b.n	8000a3c <__gnu_unwind_pr_common+0xb4>
 8000bfa:	4648      	mov	r0, r9
 8000bfc:	210d      	movs	r1, #13
 8000bfe:	f7ff fe57 	bl	80008b0 <_Unwind_GetGR>
 8000c02:	6228      	str	r0, [r5, #32]
 8000c04:	9b06      	ldr	r3, [sp, #24]
 8000c06:	626b      	str	r3, [r5, #36]	; 0x24
 8000c08:	e7e3      	b.n	8000bd2 <__gnu_unwind_pr_common+0x24a>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f7ff fc68 	bl	80004e0 <selfrel_offset31>
 8000c10:	3404      	adds	r4, #4
 8000c12:	4606      	mov	r6, r0
 8000c14:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c16:	4628      	mov	r0, r5
 8000c18:	f3af 8000 	nop.w
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	f43f af1a 	beq.w	8000a56 <__gnu_unwind_pr_common+0xce>
 8000c22:	4648      	mov	r0, r9
 8000c24:	4632      	mov	r2, r6
 8000c26:	210f      	movs	r1, #15
 8000c28:	f7ff fe68 	bl	80008fc <_Unwind_SetGR>
 8000c2c:	2007      	movs	r0, #7
 8000c2e:	e713      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000c30:	4608      	mov	r0, r1
 8000c32:	3001      	adds	r0, #1
 8000c34:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c38:	f7ff fc52 	bl	80004e0 <selfrel_offset31>
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4648      	mov	r0, r9
 8000c42:	f7ff fe5b 	bl	80008fc <_Unwind_SetGR>
 8000c46:	4648      	mov	r0, r9
 8000c48:	462a      	mov	r2, r5
 8000c4a:	4639      	mov	r1, r7
 8000c4c:	f7ff fe56 	bl	80008fc <_Unwind_SetGR>
 8000c50:	2007      	movs	r0, #7
 8000c52:	e701      	b.n	8000a58 <__gnu_unwind_pr_common+0xd0>
 8000c54:	00000000 	.word	0x00000000

08000c58 <__aeabi_unwind_cpp_pr0>:
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e695      	b.n	8000988 <__gnu_unwind_pr_common>

08000c5c <__aeabi_unwind_cpp_pr1>:
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e693      	b.n	8000988 <__gnu_unwind_pr_common>

08000c60 <__aeabi_unwind_cpp_pr2>:
 8000c60:	2302      	movs	r3, #2
 8000c62:	e691      	b.n	8000988 <__gnu_unwind_pr_common>

08000c64 <_Unwind_VRS_Pop>:
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	b0c5      	sub	sp, #276	; 0x114
 8000c6a:	2904      	cmp	r1, #4
 8000c6c:	d80d      	bhi.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000c6e:	e8df f001 	tbb	[pc, r1]
 8000c72:	0353      	.short	0x0353
 8000c74:	310c      	.short	0x310c
 8000c76:	0f          	.byte	0x0f
 8000c77:	00          	.byte	0x00
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000c7e:	b295      	uxth	r5, r2
 8000c80:	d162      	bne.n	8000d48 <_Unwind_VRS_Pop+0xe4>
 8000c82:	1972      	adds	r2, r6, r5
 8000c84:	2a10      	cmp	r2, #16
 8000c86:	f240 809b 	bls.w	8000dc0 <_Unwind_VRS_Pop+0x15c>
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	b045      	add	sp, #276	; 0x114
 8000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1fa      	bne.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000c94:	2a10      	cmp	r2, #16
 8000c96:	d8f8      	bhi.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	06d8      	lsls	r0, r3, #27
 8000c9c:	f100 80c6 	bmi.w	8000e2c <_Unwind_VRS_Pop+0x1c8>
 8000ca0:	ae22      	add	r6, sp, #136	; 0x88
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	9201      	str	r2, [sp, #4]
 8000ca6:	f000 f973 	bl	8000f90 <__gnu_Unwind_Save_WMMXC>
 8000caa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cac:	9a01      	ldr	r2, [sp, #4]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2501      	movs	r5, #1
 8000cb2:	fa05 f103 	lsl.w	r1, r5, r3
 8000cb6:	4211      	tst	r1, r2
 8000cb8:	d003      	beq.n	8000cc2 <_Unwind_VRS_Pop+0x5e>
 8000cba:	6801      	ldr	r1, [r0, #0]
 8000cbc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cc0:	3004      	adds	r0, #4
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d1f4      	bne.n	8000cb2 <_Unwind_VRS_Pop+0x4e>
 8000cc8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cca:	4630      	mov	r0, r6
 8000ccc:	f000 f956 	bl	8000f7c <__gnu_Unwind_Restore_WMMXC>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e7db      	b.n	8000c8c <_Unwind_VRS_Pop+0x28>
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d1d8      	bne.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000cd8:	0c15      	lsrs	r5, r2, #16
 8000cda:	b297      	uxth	r7, r2
 8000cdc:	19eb      	adds	r3, r5, r7
 8000cde:	2b10      	cmp	r3, #16
 8000ce0:	d8d3      	bhi.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	071e      	lsls	r6, r3, #28
 8000ce6:	f100 80b5 	bmi.w	8000e54 <_Unwind_VRS_Pop+0x1f0>
 8000cea:	ae22      	add	r6, sp, #136	; 0x88
 8000cec:	4630      	mov	r0, r6
 8000cee:	f000 f923 	bl	8000f38 <__gnu_Unwind_Save_WMMXD>
 8000cf2:	00ed      	lsls	r5, r5, #3
 8000cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000cf6:	b14f      	cbz	r7, 8000d0c <_Unwind_VRS_Pop+0xa8>
 8000cf8:	3d04      	subs	r5, #4
 8000cfa:	1971      	adds	r1, r6, r5
 8000cfc:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d04:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d08:	4283      	cmp	r3, r0
 8000d0a:	d1f9      	bne.n	8000d00 <_Unwind_VRS_Pop+0x9c>
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d10:	f000 f8f0 	bl	8000ef4 <__gnu_Unwind_Restore_WMMXD>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e7b9      	b.n	8000c8c <_Unwind_VRS_Pop+0x28>
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1b6      	bne.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000d1c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d1e:	b297      	uxth	r7, r2
 8000d20:	1d20      	adds	r0, r4, #4
 8000d22:	2601      	movs	r6, #1
 8000d24:	fa06 f103 	lsl.w	r1, r6, r3
 8000d28:	4239      	tst	r1, r7
 8000d2a:	f103 0301 	add.w	r3, r3, #1
 8000d2e:	d002      	beq.n	8000d36 <_Unwind_VRS_Pop+0xd2>
 8000d30:	6829      	ldr	r1, [r5, #0]
 8000d32:	6001      	str	r1, [r0, #0]
 8000d34:	3504      	adds	r5, #4
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	f100 0004 	add.w	r0, r0, #4
 8000d3c:	d1f2      	bne.n	8000d24 <_Unwind_VRS_Pop+0xc0>
 8000d3e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d42:	d13b      	bne.n	8000dbc <_Unwind_VRS_Pop+0x158>
 8000d44:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d46:	e7a1      	b.n	8000c8c <_Unwind_VRS_Pop+0x28>
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	d19e      	bne.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000d4c:	1977      	adds	r7, r6, r5
 8000d4e:	2f20      	cmp	r7, #32
 8000d50:	d89b      	bhi.n	8000c8a <_Unwind_VRS_Pop+0x26>
 8000d52:	2e0f      	cmp	r6, #15
 8000d54:	d966      	bls.n	8000e24 <_Unwind_VRS_Pop+0x1c0>
 8000d56:	462f      	mov	r7, r5
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d13a      	bne.n	8000dd2 <_Unwind_VRS_Pop+0x16e>
 8000d5c:	462a      	mov	r2, r5
 8000d5e:	2700      	movs	r7, #0
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d64:	dd72      	ble.n	8000e4c <_Unwind_VRS_Pop+0x1e8>
 8000d66:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	a844      	add	r0, sp, #272	; 0x110
 8000d6e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000d72:	388c      	subs	r0, #140	; 0x8c
 8000d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d78:	f840 5f04 	str.w	r5, [r0, #4]!
 8000d7c:	4291      	cmp	r1, r2
 8000d7e:	d1f9      	bne.n	8000d74 <_Unwind_VRS_Pop+0x110>
 8000d80:	4608      	mov	r0, r1
 8000d82:	b197      	cbz	r7, 8000daa <_Unwind_VRS_Pop+0x146>
 8000d84:	2e10      	cmp	r6, #16
 8000d86:	4632      	mov	r2, r6
 8000d88:	a944      	add	r1, sp, #272	; 0x110
 8000d8a:	bf38      	it	cc
 8000d8c:	2210      	movcc	r2, #16
 8000d8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000d92:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000d96:	0079      	lsls	r1, r7, #1
 8000d98:	3a04      	subs	r2, #4
 8000d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000d9e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000da2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000da6:	4288      	cmp	r0, r1
 8000da8:	d1f9      	bne.n	8000d9e <_Unwind_VRS_Pop+0x13a>
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d048      	beq.n	8000e40 <_Unwind_VRS_Pop+0x1dc>
 8000dae:	2e0f      	cmp	r6, #15
 8000db0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000db2:	d933      	bls.n	8000e1c <_Unwind_VRS_Pop+0x1b8>
 8000db4:	b117      	cbz	r7, 8000dbc <_Unwind_VRS_Pop+0x158>
 8000db6:	a802      	add	r0, sp, #8
 8000db8:	f000 f894 	bl	8000ee4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e765      	b.n	8000c8c <_Unwind_VRS_Pop+0x28>
 8000dc0:	2e0f      	cmp	r6, #15
 8000dc2:	f63f af62 	bhi.w	8000c8a <_Unwind_VRS_Pop+0x26>
 8000dc6:	2700      	movs	r7, #0
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	07d1      	lsls	r1, r2, #31
 8000dcc:	d417      	bmi.n	8000dfe <_Unwind_VRS_Pop+0x19a>
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d060      	beq.n	8000e94 <_Unwind_VRS_Pop+0x230>
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	0751      	lsls	r1, r2, #29
 8000dd6:	d445      	bmi.n	8000e64 <_Unwind_VRS_Pop+0x200>
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d04d      	beq.n	8000e78 <_Unwind_VRS_Pop+0x214>
 8000ddc:	2e0f      	cmp	r6, #15
 8000dde:	d806      	bhi.n	8000dee <_Unwind_VRS_Pop+0x18a>
 8000de0:	a822      	add	r0, sp, #136	; 0x88
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f000 f87a 	bl	8000edc <__gnu_Unwind_Save_VFP_D>
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d0b6      	beq.n	8000d5c <_Unwind_VRS_Pop+0xf8>
 8000dee:	a802      	add	r0, sp, #8
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f000 f87b 	bl	8000eec <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	f1c6 0210 	rsb	r2, r6, #16
 8000dfc:	e7b0      	b.n	8000d60 <_Unwind_VRS_Pop+0xfc>
 8000dfe:	f022 0101 	bic.w	r1, r2, #1
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	6021      	str	r1, [r4, #0]
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	4620      	mov	r0, r4
 8000e0a:	d03b      	beq.n	8000e84 <_Unwind_VRS_Pop+0x220>
 8000e0c:	f022 0203 	bic.w	r2, r2, #3
 8000e10:	f840 2b48 	str.w	r2, [r0], #72
 8000e14:	f000 f85a 	bl	8000ecc <__gnu_Unwind_Save_VFP>
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	e7d8      	b.n	8000dce <_Unwind_VRS_Pop+0x16a>
 8000e1c:	a822      	add	r0, sp, #136	; 0x88
 8000e1e:	f000 f859 	bl	8000ed4 <__gnu_Unwind_Restore_VFP_D>
 8000e22:	e7c7      	b.n	8000db4 <_Unwind_VRS_Pop+0x150>
 8000e24:	2f10      	cmp	r7, #16
 8000e26:	d9ce      	bls.n	8000dc6 <_Unwind_VRS_Pop+0x162>
 8000e28:	3f10      	subs	r7, #16
 8000e2a:	e7cd      	b.n	8000dc8 <_Unwind_VRS_Pop+0x164>
 8000e2c:	f023 0310 	bic.w	r3, r3, #16
 8000e30:	6023      	str	r3, [r4, #0]
 8000e32:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	f000 f8aa 	bl	8000f90 <__gnu_Unwind_Save_WMMXC>
 8000e3c:	9a01      	ldr	r2, [sp, #4]
 8000e3e:	e72f      	b.n	8000ca0 <_Unwind_VRS_Pop+0x3c>
 8000e40:	3104      	adds	r1, #4
 8000e42:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e44:	a822      	add	r0, sp, #136	; 0x88
 8000e46:	f000 f83d 	bl	8000ec4 <__gnu_Unwind_Restore_VFP>
 8000e4a:	e7b7      	b.n	8000dbc <_Unwind_VRS_Pop+0x158>
 8000e4c:	2f00      	cmp	r7, #0
 8000e4e:	d199      	bne.n	8000d84 <_Unwind_VRS_Pop+0x120>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e7aa      	b.n	8000daa <_Unwind_VRS_Pop+0x146>
 8000e54:	f023 0308 	bic.w	r3, r3, #8
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e5e:	f000 f86b 	bl	8000f38 <__gnu_Unwind_Save_WMMXD>
 8000e62:	e742      	b.n	8000cea <_Unwind_VRS_Pop+0x86>
 8000e64:	4620      	mov	r0, r4
 8000e66:	f022 0204 	bic.w	r2, r2, #4
 8000e6a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f000 f83c 	bl	8000eec <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	e7af      	b.n	8000dd8 <_Unwind_VRS_Pop+0x174>
 8000e78:	a822      	add	r0, sp, #136	; 0x88
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	f000 f826 	bl	8000ecc <__gnu_Unwind_Save_VFP>
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	e7b9      	b.n	8000df8 <_Unwind_VRS_Pop+0x194>
 8000e84:	f041 0102 	orr.w	r1, r1, #2
 8000e88:	f840 1b48 	str.w	r1, [r0], #72
 8000e8c:	f000 f826 	bl	8000edc <__gnu_Unwind_Save_VFP_D>
 8000e90:	9b01      	ldr	r3, [sp, #4]
 8000e92:	e79c      	b.n	8000dce <_Unwind_VRS_Pop+0x16a>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <_Unwind_VRS_Pop+0x23c>
 8000e98:	2e0f      	cmp	r6, #15
 8000e9a:	f63f af5f 	bhi.w	8000d5c <_Unwind_VRS_Pop+0xf8>
 8000e9e:	e79f      	b.n	8000de0 <_Unwind_VRS_Pop+0x17c>
 8000ea0:	a822      	add	r0, sp, #136	; 0x88
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f000 f812 	bl	8000ecc <__gnu_Unwind_Save_VFP>
 8000ea8:	9b01      	ldr	r3, [sp, #4]
 8000eaa:	e757      	b.n	8000d5c <_Unwind_VRS_Pop+0xf8>

08000eac <__restore_core_regs>:
 8000eac:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000eb0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	46a6      	mov	lr, r4
 8000eb8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ebc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ec0:	46e5      	mov	sp, ip
 8000ec2:	bd00      	pop	{pc}

08000ec4 <__gnu_Unwind_Restore_VFP>:
 8000ec4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <__gnu_Unwind_Save_VFP>:
 8000ecc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__gnu_Unwind_Restore_VFP_D>:
 8000ed4:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__gnu_Unwind_Save_VFP_D>:
 8000edc:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ee4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000eec:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__gnu_Unwind_Restore_WMMXD>:
 8000ef4:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ef8:	ecf0 1102 	ldfe	f1, [r0], #8
 8000efc:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f00:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f04:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f08:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f0c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f10:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f14:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f18:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f1c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f20:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f24:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f28:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f2c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f30:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__gnu_Unwind_Save_WMMXD>:
 8000f38:	ece0 0102 	stfe	f0, [r0], #8
 8000f3c:	ece0 1102 	stfe	f1, [r0], #8
 8000f40:	ece0 2102 	stfe	f2, [r0], #8
 8000f44:	ece0 3102 	stfe	f3, [r0], #8
 8000f48:	ece0 4102 	stfe	f4, [r0], #8
 8000f4c:	ece0 5102 	stfe	f5, [r0], #8
 8000f50:	ece0 6102 	stfe	f6, [r0], #8
 8000f54:	ece0 7102 	stfe	f7, [r0], #8
 8000f58:	ece0 8102 	stfp	f0, [r0], #8
 8000f5c:	ece0 9102 	stfp	f1, [r0], #8
 8000f60:	ece0 a102 	stfp	f2, [r0], #8
 8000f64:	ece0 b102 	stfp	f3, [r0], #8
 8000f68:	ece0 c102 	stfp	f4, [r0], #8
 8000f6c:	ece0 d102 	stfp	f5, [r0], #8
 8000f70:	ece0 e102 	stfp	f6, [r0], #8
 8000f74:	ece0 f102 	stfp	f7, [r0], #8
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Restore_WMMXC>:
 8000f7c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000f80:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000f84:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000f88:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Save_WMMXC>:
 8000f90:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000f94:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000f98:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000f9c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <_Unwind_RaiseException>:
 8000fa4:	46ec      	mov	ip, sp
 8000fa6:	b500      	push	{lr}
 8000fa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fb8:	a901      	add	r1, sp, #4
 8000fba:	f7ff fbf3 	bl	80007a4 <__gnu_Unwind_RaiseException>
 8000fbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fc2:	b012      	add	sp, #72	; 0x48
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <_Unwind_Resume>:
 8000fc8:	46ec      	mov	ip, sp
 8000fca:	b500      	push	{lr}
 8000fcc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fdc:	a901      	add	r1, sp, #4
 8000fde:	f7ff fc1b 	bl	8000818 <__gnu_Unwind_Resume>
 8000fe2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fe6:	b012      	add	sp, #72	; 0x48
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <_Unwind_Resume_or_Rethrow>:
 8000fec:	46ec      	mov	ip, sp
 8000fee:	b500      	push	{lr}
 8000ff0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ff4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001000:	a901      	add	r1, sp, #4
 8001002:	f7ff fc2b 	bl	800085c <__gnu_Unwind_Resume_or_Rethrow>
 8001006:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800100a:	b012      	add	sp, #72	; 0x48
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_Unwind_ForcedUnwind>:
 8001010:	46ec      	mov	ip, sp
 8001012:	b500      	push	{lr}
 8001014:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001018:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001024:	ab01      	add	r3, sp, #4
 8001026:	f7ff fbed 	bl	8000804 <__gnu_Unwind_ForcedUnwind>
 800102a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800102e:	b012      	add	sp, #72	; 0x48
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_Unwind_Backtrace>:
 8001034:	46ec      	mov	ip, sp
 8001036:	b500      	push	{lr}
 8001038:	e92d 5000 	stmdb	sp!, {ip, lr}
 800103c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001048:	aa01      	add	r2, sp, #4
 800104a:	f7ff fc65 	bl	8000918 <__gnu_Unwind_Backtrace>
 800104e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001052:	b012      	add	sp, #72	; 0x48
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <next_unwind_byte>:
 8001058:	7a02      	ldrb	r2, [r0, #8]
 800105a:	b91a      	cbnz	r2, 8001064 <next_unwind_byte+0xc>
 800105c:	7a43      	ldrb	r3, [r0, #9]
 800105e:	b943      	cbnz	r3, 8001072 <next_unwind_byte+0x1a>
 8001060:	20b0      	movs	r0, #176	; 0xb0
 8001062:	4770      	bx	lr
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	3a01      	subs	r2, #1
 8001068:	7202      	strb	r2, [r0, #8]
 800106a:	021a      	lsls	r2, r3, #8
 800106c:	6002      	str	r2, [r0, #0]
 800106e:	0e18      	lsrs	r0, r3, #24
 8001070:	4770      	bx	lr
 8001072:	6842      	ldr	r2, [r0, #4]
 8001074:	3b01      	subs	r3, #1
 8001076:	b410      	push	{r4}
 8001078:	7243      	strb	r3, [r0, #9]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	2103      	movs	r1, #3
 800107e:	1d14      	adds	r4, r2, #4
 8001080:	7201      	strb	r1, [r0, #8]
 8001082:	021a      	lsls	r2, r3, #8
 8001084:	6044      	str	r4, [r0, #4]
 8001086:	6002      	str	r2, [r0, #0]
 8001088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800108c:	0e18      	lsrs	r0, r3, #24
 800108e:	4770      	bx	lr

08001090 <_Unwind_GetGR.constprop.0>:
 8001090:	b500      	push	{lr}
 8001092:	b085      	sub	sp, #20
 8001094:	aa03      	add	r2, sp, #12
 8001096:	2300      	movs	r3, #0
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	220c      	movs	r2, #12
 800109e:	f7ff fbed 	bl	800087c <_Unwind_VRS_Get>
 80010a2:	9803      	ldr	r0, [sp, #12]
 80010a4:	b005      	add	sp, #20
 80010a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010aa:	bf00      	nop

080010ac <unwind_UCB_from_context>:
 80010ac:	e7f0      	b.n	8001090 <_Unwind_GetGR.constprop.0>
 80010ae:	bf00      	nop

080010b0 <__gnu_unwind_execute>:
 80010b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b4:	4606      	mov	r6, r0
 80010b6:	b085      	sub	sp, #20
 80010b8:	460f      	mov	r7, r1
 80010ba:	f04f 0800 	mov.w	r8, #0
 80010be:	4638      	mov	r0, r7
 80010c0:	f7ff ffca 	bl	8001058 <next_unwind_byte>
 80010c4:	28b0      	cmp	r0, #176	; 0xb0
 80010c6:	4604      	mov	r4, r0
 80010c8:	d023      	beq.n	8001112 <__gnu_unwind_execute+0x62>
 80010ca:	0605      	lsls	r5, r0, #24
 80010cc:	d427      	bmi.n	800111e <__gnu_unwind_execute+0x6e>
 80010ce:	2300      	movs	r3, #0
 80010d0:	f10d 090c 	add.w	r9, sp, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	0085      	lsls	r5, r0, #2
 80010d8:	220d      	movs	r2, #13
 80010da:	f8cd 9000 	str.w	r9, [sp]
 80010de:	4630      	mov	r0, r6
 80010e0:	f7ff fbcc 	bl	800087c <_Unwind_VRS_Get>
 80010e4:	b2ed      	uxtb	r5, r5
 80010e6:	9b03      	ldr	r3, [sp, #12]
 80010e8:	f8cd 9000 	str.w	r9, [sp]
 80010ec:	0660      	lsls	r0, r4, #25
 80010ee:	f105 0504 	add.w	r5, r5, #4
 80010f2:	bf4c      	ite	mi
 80010f4:	1b5d      	submi	r5, r3, r5
 80010f6:	18ed      	addpl	r5, r5, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	220d      	movs	r2, #13
 80010fe:	4630      	mov	r0, r6
 8001100:	9503      	str	r5, [sp, #12]
 8001102:	f7ff fbe1 	bl	80008c8 <_Unwind_VRS_Set>
 8001106:	4638      	mov	r0, r7
 8001108:	f7ff ffa6 	bl	8001058 <next_unwind_byte>
 800110c:	28b0      	cmp	r0, #176	; 0xb0
 800110e:	4604      	mov	r4, r0
 8001110:	d1db      	bne.n	80010ca <__gnu_unwind_execute+0x1a>
 8001112:	f1b8 0f00 	cmp.w	r8, #0
 8001116:	f000 8095 	beq.w	8001244 <__gnu_unwind_execute+0x194>
 800111a:	2000      	movs	r0, #0
 800111c:	e01c      	b.n	8001158 <__gnu_unwind_execute+0xa8>
 800111e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001122:	2b80      	cmp	r3, #128	; 0x80
 8001124:	d05d      	beq.n	80011e2 <__gnu_unwind_execute+0x132>
 8001126:	2b90      	cmp	r3, #144	; 0x90
 8001128:	d019      	beq.n	800115e <__gnu_unwind_execute+0xae>
 800112a:	2ba0      	cmp	r3, #160	; 0xa0
 800112c:	d02c      	beq.n	8001188 <__gnu_unwind_execute+0xd8>
 800112e:	2bb0      	cmp	r3, #176	; 0xb0
 8001130:	d03f      	beq.n	80011b2 <__gnu_unwind_execute+0x102>
 8001132:	2bc0      	cmp	r3, #192	; 0xc0
 8001134:	d06c      	beq.n	8001210 <__gnu_unwind_execute+0x160>
 8001136:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800113a:	2bd0      	cmp	r3, #208	; 0xd0
 800113c:	d10b      	bne.n	8001156 <__gnu_unwind_execute+0xa6>
 800113e:	f000 0207 	and.w	r2, r0, #7
 8001142:	3201      	adds	r2, #1
 8001144:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001148:	2305      	movs	r3, #5
 800114a:	2101      	movs	r1, #1
 800114c:	4630      	mov	r0, r6
 800114e:	f7ff fd89 	bl	8000c64 <_Unwind_VRS_Pop>
 8001152:	2800      	cmp	r0, #0
 8001154:	d0b3      	beq.n	80010be <__gnu_unwind_execute+0xe>
 8001156:	2009      	movs	r0, #9
 8001158:	b005      	add	sp, #20
 800115a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800115e:	f000 030d 	and.w	r3, r0, #13
 8001162:	2b0d      	cmp	r3, #13
 8001164:	d0f7      	beq.n	8001156 <__gnu_unwind_execute+0xa6>
 8001166:	ad03      	add	r5, sp, #12
 8001168:	2300      	movs	r3, #0
 800116a:	f000 020f 	and.w	r2, r0, #15
 800116e:	4619      	mov	r1, r3
 8001170:	9500      	str	r5, [sp, #0]
 8001172:	4630      	mov	r0, r6
 8001174:	f7ff fb82 	bl	800087c <_Unwind_VRS_Get>
 8001178:	2300      	movs	r3, #0
 800117a:	9500      	str	r5, [sp, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	220d      	movs	r2, #13
 8001180:	4630      	mov	r0, r6
 8001182:	f7ff fba1 	bl	80008c8 <_Unwind_VRS_Set>
 8001186:	e79a      	b.n	80010be <__gnu_unwind_execute+0xe>
 8001188:	43c2      	mvns	r2, r0
 800118a:	f002 0307 	and.w	r3, r2, #7
 800118e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001192:	411a      	asrs	r2, r3
 8001194:	0701      	lsls	r1, r0, #28
 8001196:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	bf48      	it	mi
 80011a0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011a4:	4619      	mov	r1, r3
 80011a6:	4630      	mov	r0, r6
 80011a8:	f7ff fd5c 	bl	8000c64 <_Unwind_VRS_Pop>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d1d2      	bne.n	8001156 <__gnu_unwind_execute+0xa6>
 80011b0:	e785      	b.n	80010be <__gnu_unwind_execute+0xe>
 80011b2:	28b1      	cmp	r0, #177	; 0xb1
 80011b4:	d057      	beq.n	8001266 <__gnu_unwind_execute+0x1b6>
 80011b6:	28b2      	cmp	r0, #178	; 0xb2
 80011b8:	d068      	beq.n	800128c <__gnu_unwind_execute+0x1dc>
 80011ba:	28b3      	cmp	r0, #179	; 0xb3
 80011bc:	f000 8095 	beq.w	80012ea <__gnu_unwind_execute+0x23a>
 80011c0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011c4:	2bb4      	cmp	r3, #180	; 0xb4
 80011c6:	d0c6      	beq.n	8001156 <__gnu_unwind_execute+0xa6>
 80011c8:	f000 0207 	and.w	r2, r0, #7
 80011cc:	3201      	adds	r2, #1
 80011ce:	2301      	movs	r3, #1
 80011d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011d4:	4619      	mov	r1, r3
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff fd44 	bl	8000c64 <_Unwind_VRS_Pop>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d1ba      	bne.n	8001156 <__gnu_unwind_execute+0xa6>
 80011e0:	e76d      	b.n	80010be <__gnu_unwind_execute+0xe>
 80011e2:	4638      	mov	r0, r7
 80011e4:	f7ff ff38 	bl	8001058 <next_unwind_byte>
 80011e8:	0224      	lsls	r4, r4, #8
 80011ea:	4304      	orrs	r4, r0
 80011ec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80011f0:	d0b1      	beq.n	8001156 <__gnu_unwind_execute+0xa6>
 80011f2:	0124      	lsls	r4, r4, #4
 80011f4:	2300      	movs	r3, #0
 80011f6:	b2a2      	uxth	r2, r4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff fd32 	bl	8000c64 <_Unwind_VRS_Pop>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1a8      	bne.n	8001156 <__gnu_unwind_execute+0xa6>
 8001204:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001208:	bf18      	it	ne
 800120a:	f04f 0801 	movne.w	r8, #1
 800120e:	e756      	b.n	80010be <__gnu_unwind_execute+0xe>
 8001210:	28c6      	cmp	r0, #198	; 0xc6
 8001212:	d07d      	beq.n	8001310 <__gnu_unwind_execute+0x260>
 8001214:	28c7      	cmp	r0, #199	; 0xc7
 8001216:	f000 8086 	beq.w	8001326 <__gnu_unwind_execute+0x276>
 800121a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800121e:	2bc0      	cmp	r3, #192	; 0xc0
 8001220:	f000 8094 	beq.w	800134c <__gnu_unwind_execute+0x29c>
 8001224:	28c8      	cmp	r0, #200	; 0xc8
 8001226:	f000 809f 	beq.w	8001368 <__gnu_unwind_execute+0x2b8>
 800122a:	28c9      	cmp	r0, #201	; 0xc9
 800122c:	d193      	bne.n	8001156 <__gnu_unwind_execute+0xa6>
 800122e:	4638      	mov	r0, r7
 8001230:	f7ff ff12 	bl	8001058 <next_unwind_byte>
 8001234:	0302      	lsls	r2, r0, #12
 8001236:	f000 000f 	and.w	r0, r0, #15
 800123a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800123e:	3001      	adds	r0, #1
 8001240:	4302      	orrs	r2, r0
 8001242:	e781      	b.n	8001148 <__gnu_unwind_execute+0x98>
 8001244:	ac03      	add	r4, sp, #12
 8001246:	4643      	mov	r3, r8
 8001248:	220e      	movs	r2, #14
 800124a:	4641      	mov	r1, r8
 800124c:	9400      	str	r4, [sp, #0]
 800124e:	4630      	mov	r0, r6
 8001250:	f7ff fb14 	bl	800087c <_Unwind_VRS_Get>
 8001254:	9400      	str	r4, [sp, #0]
 8001256:	4630      	mov	r0, r6
 8001258:	4643      	mov	r3, r8
 800125a:	220f      	movs	r2, #15
 800125c:	4641      	mov	r1, r8
 800125e:	f7ff fb33 	bl	80008c8 <_Unwind_VRS_Set>
 8001262:	4640      	mov	r0, r8
 8001264:	e778      	b.n	8001158 <__gnu_unwind_execute+0xa8>
 8001266:	4638      	mov	r0, r7
 8001268:	f7ff fef6 	bl	8001058 <next_unwind_byte>
 800126c:	2800      	cmp	r0, #0
 800126e:	f43f af72 	beq.w	8001156 <__gnu_unwind_execute+0xa6>
 8001272:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001276:	f47f af6e 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 800127a:	4602      	mov	r2, r0
 800127c:	4619      	mov	r1, r3
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fcf0 	bl	8000c64 <_Unwind_VRS_Pop>
 8001284:	2800      	cmp	r0, #0
 8001286:	f47f af66 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 800128a:	e718      	b.n	80010be <__gnu_unwind_execute+0xe>
 800128c:	2300      	movs	r3, #0
 800128e:	f10d 090c 	add.w	r9, sp, #12
 8001292:	220d      	movs	r2, #13
 8001294:	4619      	mov	r1, r3
 8001296:	f8cd 9000 	str.w	r9, [sp]
 800129a:	4630      	mov	r0, r6
 800129c:	f7ff faee 	bl	800087c <_Unwind_VRS_Get>
 80012a0:	4638      	mov	r0, r7
 80012a2:	f7ff fed9 	bl	8001058 <next_unwind_byte>
 80012a6:	0602      	lsls	r2, r0, #24
 80012a8:	f04f 0402 	mov.w	r4, #2
 80012ac:	d50c      	bpl.n	80012c8 <__gnu_unwind_execute+0x218>
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012b4:	40a0      	lsls	r0, r4
 80012b6:	4403      	add	r3, r0
 80012b8:	4638      	mov	r0, r7
 80012ba:	9303      	str	r3, [sp, #12]
 80012bc:	f7ff fecc 	bl	8001058 <next_unwind_byte>
 80012c0:	0603      	lsls	r3, r0, #24
 80012c2:	f104 0407 	add.w	r4, r4, #7
 80012c6:	d4f2      	bmi.n	80012ae <__gnu_unwind_execute+0x1fe>
 80012c8:	9b03      	ldr	r3, [sp, #12]
 80012ca:	f8cd 9000 	str.w	r9, [sp]
 80012ce:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80012d2:	40a2      	lsls	r2, r4
 80012d4:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80012d8:	2300      	movs	r3, #0
 80012da:	4414      	add	r4, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	220d      	movs	r2, #13
 80012e0:	4630      	mov	r0, r6
 80012e2:	9403      	str	r4, [sp, #12]
 80012e4:	f7ff faf0 	bl	80008c8 <_Unwind_VRS_Set>
 80012e8:	e6e9      	b.n	80010be <__gnu_unwind_execute+0xe>
 80012ea:	4638      	mov	r0, r7
 80012ec:	f7ff feb4 	bl	8001058 <next_unwind_byte>
 80012f0:	0301      	lsls	r1, r0, #12
 80012f2:	f000 000f 	and.w	r0, r0, #15
 80012f6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012fa:	1c42      	adds	r2, r0, #1
 80012fc:	2301      	movs	r3, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	4630      	mov	r0, r6
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fcae 	bl	8000c64 <_Unwind_VRS_Pop>
 8001308:	2800      	cmp	r0, #0
 800130a:	f47f af24 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 800130e:	e6d6      	b.n	80010be <__gnu_unwind_execute+0xe>
 8001310:	4638      	mov	r0, r7
 8001312:	f7ff fea1 	bl	8001058 <next_unwind_byte>
 8001316:	0301      	lsls	r1, r0, #12
 8001318:	f000 000f 	and.w	r0, r0, #15
 800131c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001320:	1c42      	adds	r2, r0, #1
 8001322:	2303      	movs	r3, #3
 8001324:	e7eb      	b.n	80012fe <__gnu_unwind_execute+0x24e>
 8001326:	4638      	mov	r0, r7
 8001328:	f7ff fe96 	bl	8001058 <next_unwind_byte>
 800132c:	2800      	cmp	r0, #0
 800132e:	f43f af12 	beq.w	8001156 <__gnu_unwind_execute+0xa6>
 8001332:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001336:	f47f af0e 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 800133a:	4602      	mov	r2, r0
 800133c:	2104      	movs	r1, #4
 800133e:	4630      	mov	r0, r6
 8001340:	f7ff fc90 	bl	8000c64 <_Unwind_VRS_Pop>
 8001344:	2800      	cmp	r0, #0
 8001346:	f47f af06 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 800134a:	e6b8      	b.n	80010be <__gnu_unwind_execute+0xe>
 800134c:	f000 020f 	and.w	r2, r0, #15
 8001350:	3201      	adds	r2, #1
 8001352:	2303      	movs	r3, #3
 8001354:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001358:	4619      	mov	r1, r3
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff fc82 	bl	8000c64 <_Unwind_VRS_Pop>
 8001360:	2800      	cmp	r0, #0
 8001362:	f47f aef8 	bne.w	8001156 <__gnu_unwind_execute+0xa6>
 8001366:	e6aa      	b.n	80010be <__gnu_unwind_execute+0xe>
 8001368:	4638      	mov	r0, r7
 800136a:	f7ff fe75 	bl	8001058 <next_unwind_byte>
 800136e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001372:	f000 030f 	and.w	r3, r0, #15
 8001376:	3210      	adds	r2, #16
 8001378:	3301      	adds	r3, #1
 800137a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800137e:	e6e3      	b.n	8001148 <__gnu_unwind_execute+0x98>

08001380 <__gnu_unwind_frame>:
 8001380:	b510      	push	{r4, lr}
 8001382:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001384:	b084      	sub	sp, #16
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	2003      	movs	r0, #3
 800138a:	f88d 000c 	strb.w	r0, [sp, #12]
 800138e:	79dc      	ldrb	r4, [r3, #7]
 8001390:	f88d 400d 	strb.w	r4, [sp, #13]
 8001394:	0212      	lsls	r2, r2, #8
 8001396:	3308      	adds	r3, #8
 8001398:	4608      	mov	r0, r1
 800139a:	a901      	add	r1, sp, #4
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	f7ff fe86 	bl	80010b0 <__gnu_unwind_execute>
 80013a4:	b004      	add	sp, #16
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <_Unwind_GetRegionStart>:
 80013a8:	b508      	push	{r3, lr}
 80013aa:	f7ff fe7f 	bl	80010ac <unwind_UCB_from_context>
 80013ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013b0:	bd08      	pop	{r3, pc}
 80013b2:	bf00      	nop

080013b4 <_Unwind_GetLanguageSpecificData>:
 80013b4:	b508      	push	{r3, lr}
 80013b6:	f7ff fe79 	bl	80010ac <unwind_UCB_from_context>
 80013ba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013bc:	79c3      	ldrb	r3, [r0, #7]
 80013be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013c2:	3008      	adds	r0, #8
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop

080013c8 <_Unwind_GetTextRelBase>:
 80013c8:	b508      	push	{r3, lr}
 80013ca:	f001 ff89 	bl	80032e0 <abort>
 80013ce:	bf00      	nop

080013d0 <_Unwind_GetDataRelBase>:
 80013d0:	b508      	push	{r3, lr}
 80013d2:	f7ff fff9 	bl	80013c8 <_Unwind_GetTextRelBase>
 80013d6:	bf00      	nop

080013d8 <__aeabi_idiv0>:
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_InitTick+0x3c>)
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_InitTick+0x40>)
{
 80013e2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	7818      	ldrb	r0, [r3, #0]
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80013ee:	6810      	ldr	r0, [r2, #0]
 80013f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013f4:	f000 f89a 	bl	800152c <HAL_SYSTICK_Config>
 80013f8:	4604      	mov	r4, r0
 80013fa:	b958      	cbnz	r0, 8001414 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	2d0f      	cmp	r5, #15
 80013fe:	d809      	bhi.n	8001414 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	4602      	mov	r2, r0
 8001402:	4629      	mov	r1, r5
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f850 	bl	80014ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_InitTick+0x44>)
 800140e:	4620      	mov	r0, r4
 8001410:	601d      	str	r5, [r3, #0]
 8001412:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001414:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	20000008 	.word	0x20000008
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_Init>:
{
 8001424:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 f82e 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ffd5 	bl	80013dc <HAL_InitTick>
  HAL_MspInit();
 8001432:	f001 fce5 	bl	8002e00 <HAL_MspInit>
}
 8001436:	2000      	movs	r0, #0
 8001438:	bd08      	pop	{r3, pc}
	...

0800143c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x10>)
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_IncTick+0x14>)
 8001440:	6811      	ldr	r1, [r2, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	440b      	add	r3, r1
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200003e8 	.word	0x200003e8
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <HAL_GetTick+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200003e8 	.word	0x200003e8

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff6 	bl	8001454 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001468:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	bf1c      	itt	ne
 800146c:	4b05      	ldrne	r3, [pc, #20]	; (8001484 <HAL_Delay+0x24>)
 800146e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001470:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001472:	bf18      	it	ne
 8001474:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	f7ff ffed 	bl	8001454 <HAL_GetTick>
 800147a:	1b40      	subs	r0, r0, r5
 800147c:	4284      	cmp	r4, r0
 800147e:	d8fa      	bhi.n	8001476 <HAL_Delay+0x16>
  {
  }
}
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000

08001488 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800148a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001498:	0200      	lsls	r0, r0, #8
 800149a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80014a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014a4:	60d3      	str	r3, [r2, #12]
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b530      	push	{r4, r5, lr}
 80014b0:	68dc      	ldr	r4, [r3, #12]
 80014b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	2b04      	cmp	r3, #4
 80014be:	bf28      	it	cs
 80014c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 0501 	mov.w	r5, #1
 80014c8:	fa05 f303 	lsl.w	r3, r5, r3
 80014cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d0:	bf8c      	ite	hi
 80014d2:	3c03      	subhi	r4, #3
 80014d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d6:	4019      	ands	r1, r3
 80014d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014da:	fa05 f404 	lsl.w	r4, r5, r4
 80014de:	3c01      	subs	r4, #1
 80014e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80014e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	ea42 0201 	orr.w	r2, r2, r1
 80014e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	bfaf      	iteee	ge
 80014ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	f000 000f 	andlt.w	r0, r0, #15
 80014f6:	4b06      	ldrlt	r3, [pc, #24]	; (8001510 <HAL_NVIC_SetPriority+0x64>)
 80014f8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	bfa5      	ittet	ge
 80014fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001500:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001508:	bd30      	pop	{r4, r5, pc}
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	e000ed14 	.word	0xe000ed14

08001514 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001514:	0942      	lsrs	r2, r0, #5
 8001516:	2301      	movs	r3, #1
 8001518:	f000 001f 	and.w	r0, r0, #31
 800151c:	fa03 f000 	lsl.w	r0, r3, r0
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <HAL_NVIC_EnableIRQ+0x14>)
 8001522:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100

0800152c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	3801      	subs	r0, #1
 800152e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001532:	d20a      	bcs.n	800154a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001538:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	21f0      	movs	r1, #240	; 0xf0
 800153c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800155a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800155c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800155e:	bf0c      	ite	eq
 8001560:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001564:	f022 0204 	bicne.w	r2, r2, #4
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	4770      	bx	lr
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001570:	4770      	bx	lr

08001572 <HAL_SYSTICK_IRQHandler>:
{
 8001572:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001574:	f7ff fffc 	bl	8001570 <HAL_SYSTICK_Callback>
 8001578:	bd08      	pop	{r3, pc}
	...

0800157c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	2118      	movs	r1, #24
 800158a:	3a10      	subs	r2, #16
 800158c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001590:	4904      	ldr	r1, [pc, #16]	; (80015a4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001592:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001594:	bf88      	it	hi
 8001596:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001598:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800159a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800159c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800159e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	080033c8 	.word	0x080033c8

080015a8 <HAL_DMA_Init>:
{
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ff52 	bl	8001454 <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80015b2:	2c00      	cmp	r4, #0
 80015b4:	d071      	beq.n	800169a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80015b6:	2300      	movs	r3, #0
 80015b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015bc:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80015be:	2302      	movs	r3, #2
 80015c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015cc:	6821      	ldr	r1, [r4, #0]
 80015ce:	680b      	ldr	r3, [r1, #0]
 80015d0:	07d8      	lsls	r0, r3, #31
 80015d2:	d43c      	bmi.n	800164e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80015d4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d6:	4d32      	ldr	r5, [pc, #200]	; (80016a0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d8:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015da:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015dc:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	68a3      	ldr	r3, [r4, #8]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	68e2      	ldr	r2, [r4, #12]
 80015e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	6922      	ldr	r2, [r4, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	6962      	ldr	r2, [r4, #20]
 80015ec:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ee:	69e2      	ldr	r2, [r4, #28]
 80015f0:	4303      	orrs	r3, r0
 80015f2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f4:	6a22      	ldr	r2, [r4, #32]
 80015f6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015fa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001600:	bf01      	itttt	eq
 8001602:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001604:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001606:	4335      	orreq	r5, r6
 8001608:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800160a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800160c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001610:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001614:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001618:	d10b      	bne.n	8001632 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800161a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800161c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800161e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001620:	b13d      	cbz	r5, 8001632 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001622:	b9f8      	cbnz	r0, 8001664 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001624:	2a01      	cmp	r2, #1
 8001626:	d02d      	beq.n	8001684 <HAL_DMA_Init+0xdc>
 8001628:	d301      	bcc.n	800162e <HAL_DMA_Init+0x86>
 800162a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800162c:	d101      	bne.n	8001632 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800162e:	01ea      	lsls	r2, r5, #7
 8001630:	d42b      	bmi.n	800168a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001632:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff ffa1 	bl	800157c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800163a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800163c:	233f      	movs	r3, #63	; 0x3f
 800163e:	4093      	lsls	r3, r2
 8001640:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001642:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001644:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001646:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001648:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800164c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164e:	f7ff ff01 	bl	8001454 <HAL_GetTick>
 8001652:	1b40      	subs	r0, r0, r5
 8001654:	2805      	cmp	r0, #5
 8001656:	d9b9      	bls.n	80015cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001658:	2320      	movs	r3, #32
 800165a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800165c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800165e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001662:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001664:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001668:	d113      	bne.n	8001692 <HAL_DMA_Init+0xea>
    switch (tmp)
 800166a:	2a03      	cmp	r2, #3
 800166c:	d8e1      	bhi.n	8001632 <HAL_DMA_Init+0x8a>
 800166e:	a001      	add	r0, pc, #4	; (adr r0, 8001674 <HAL_DMA_Init+0xcc>)
 8001670:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001674:	0800168b 	.word	0x0800168b
 8001678:	0800162f 	.word	0x0800162f
 800167c:	0800168b 	.word	0x0800168b
 8001680:	08001685 	.word	0x08001685
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001684:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001688:	d1d3      	bne.n	8001632 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168a:	2340      	movs	r3, #64	; 0x40
 800168c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800168e:	2001      	movs	r0, #1
 8001690:	e7e5      	b.n	800165e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001692:	2a02      	cmp	r2, #2
 8001694:	d9f9      	bls.n	800168a <HAL_DMA_Init+0xe2>
 8001696:	2a03      	cmp	r2, #3
 8001698:	e7c8      	b.n	800162c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
 800169c:	bd70      	pop	{r4, r5, r6, pc}
 800169e:	bf00      	nop
 80016a0:	f010803f 	.word	0xf010803f

080016a4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
 80016b2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80016b4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	2305      	movs	r3, #5
 80016b8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80016c4:	2000      	movs	r0, #0
}
 80016c6:	4770      	bx	lr

080016c8 <HAL_DMA_IRQHandler>:
{
 80016c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80016d6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d8:	2208      	movs	r2, #8
 80016da:	409a      	lsls	r2, r3
 80016dc:	4216      	tst	r6, r2
{
 80016de:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	d00c      	beq.n	80016fc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016e2:	6801      	ldr	r1, [r0, #0]
 80016e4:	6808      	ldr	r0, [r1, #0]
 80016e6:	0740      	lsls	r0, r0, #29
 80016e8:	d508      	bpl.n	80016fc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016ea:	6808      	ldr	r0, [r1, #0]
 80016ec:	f020 0004 	bic.w	r0, r0, #4
 80016f0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016f2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fc:	2201      	movs	r2, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	4216      	tst	r6, r2
 8001702:	d008      	beq.n	8001716 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001704:	6821      	ldr	r1, [r4, #0]
 8001706:	6949      	ldr	r1, [r1, #20]
 8001708:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800170a:	bf41      	itttt	mi
 800170c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800170e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001710:	f042 0202 	orrmi.w	r2, r2, #2
 8001714:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001716:	2204      	movs	r2, #4
 8001718:	409a      	lsls	r2, r3
 800171a:	4216      	tst	r6, r2
 800171c:	d008      	beq.n	8001730 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	6809      	ldr	r1, [r1, #0]
 8001722:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001724:	bf41      	itttt	mi
 8001726:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001728:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800172a:	f042 0204 	orrmi.w	r2, r2, #4
 800172e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001730:	2210      	movs	r2, #16
 8001732:	409a      	lsls	r2, r3
 8001734:	4216      	tst	r6, r2
 8001736:	d010      	beq.n	800175a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	0709      	lsls	r1, r1, #28
 800173e:	d50c      	bpl.n	800175a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001740:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	0350      	lsls	r0, r2, #13
 8001746:	d535      	bpl.n	80017b4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0319      	lsls	r1, r3, #12
 800174c:	d401      	bmi.n	8001752 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800174e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001750:	e000      	b.n	8001754 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001752:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001754:	b10b      	cbz	r3, 800175a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001756:	4620      	mov	r0, r4
 8001758:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800175a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800175c:	2220      	movs	r2, #32
 800175e:	408a      	lsls	r2, r1
 8001760:	4216      	tst	r6, r2
 8001762:	d038      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	06c6      	lsls	r6, r0, #27
 800176a:	d534      	bpl.n	80017d6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800176c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001772:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001774:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001776:	d125      	bne.n	80017c4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001778:	f022 0216 	bic.w	r2, r2, #22
 800177c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001784:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001786:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001788:	b90a      	cbnz	r2, 800178e <HAL_DMA_IRQHandler+0xc6>
 800178a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800178c:	b11a      	cbz	r2, 8001796 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f022 0208 	bic.w	r2, r2, #8
 8001794:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001796:	233f      	movs	r3, #63	; 0x3f
 8001798:	408b      	lsls	r3, r1
 800179a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800179c:	2300      	movs	r3, #0
 800179e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80017a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80017aa:	b10b      	cbz	r3, 80017b0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80017ac:	4620      	mov	r0, r4
 80017ae:	4798      	blx	r3
}
 80017b0:	b003      	add	sp, #12
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b8:	bf5e      	ittt	pl
 80017ba:	681a      	ldrpl	r2, [r3, #0]
 80017bc:	f022 0208 	bicpl.w	r2, r2, #8
 80017c0:	601a      	strpl	r2, [r3, #0]
 80017c2:	e7c4      	b.n	800174e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c4:	0350      	lsls	r0, r2, #13
 80017c6:	d528      	bpl.n	800181a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	0319      	lsls	r1, r3, #12
 80017cc:	d432      	bmi.n	8001834 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80017ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80017d0:	b10b      	cbz	r3, 80017d6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80017d2:	4620      	mov	r0, r4
 80017d4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0e9      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80017de:	07da      	lsls	r2, r3, #31
 80017e0:	d519      	bpl.n	8001816 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80017e4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017f2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80017f6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	429f      	cmp	r7, r3
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	d302      	bcc.n	800180a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	07db      	lsls	r3, r3, #31
 8001808:	d4f7      	bmi.n	80017fa <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800180a:	2300      	movs	r3, #0
 800180c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001810:	2301      	movs	r3, #1
 8001812:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001816:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001818:	e7c7      	b.n	80017aa <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001820:	d108      	bne.n	8001834 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	f021 0110 	bic.w	r1, r1, #16
 8001828:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800182a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800182c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001830:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001836:	e7cb      	b.n	80017d0 <HAL_DMA_IRQHandler+0x108>
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80019e4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001848:	4a64      	ldr	r2, [pc, #400]	; (80019dc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800184c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001850:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001854:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001858:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800185c:	42b7      	cmp	r7, r6
 800185e:	f040 80ad 	bne.w	80019bc <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001862:	684c      	ldr	r4, [r1, #4]
 8001864:	f024 0a10 	bic.w	sl, r4, #16
 8001868:	f1ba 0f02 	cmp.w	sl, #2
 800186c:	d116      	bne.n	800189c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800186e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001872:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800187a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001882:	f04f 0e0f 	mov.w	lr, #15
 8001886:	fa0e fe0b 	lsl.w	lr, lr, fp
 800188a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188e:	690d      	ldr	r5, [r1, #16]
 8001890:	fa05 f50b 	lsl.w	r5, r5, fp
 8001894:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001898:	f8cc 5020 	str.w	r5, [ip, #32]
 800189c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80018a2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80018aa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018c4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80018c6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ca:	d815      	bhi.n	80018f8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80018cc:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d4:	68cd      	ldr	r5, [r1, #12]
 80018d6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80018da:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80018de:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80018e2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ea:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80018ee:	fa0e fe03 	lsl.w	lr, lr, r3
 80018f2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80018f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80018f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	688f      	ldr	r7, [r1, #8]
 8001900:	fa07 f70c 	lsl.w	r7, r7, ip
 8001904:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001906:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001908:	00e5      	lsls	r5, r4, #3
 800190a:	d557      	bpl.n	80019bc <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	f04f 0b00 	mov.w	fp, #0
 8001910:	f8cd b00c 	str.w	fp, [sp, #12]
 8001914:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001918:	4d31      	ldr	r5, [pc, #196]	; (80019e0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800191e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001922:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001926:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800192a:	9703      	str	r7, [sp, #12]
 800192c:	9f03      	ldr	r7, [sp, #12]
 800192e:	f023 0703 	bic.w	r7, r3, #3
 8001932:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001936:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800193a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800193e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001942:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001946:	f04f 0e0f 	mov.w	lr, #15
 800194a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001954:	d039      	beq.n	80019ca <HAL_GPIO_Init+0x18e>
 8001956:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800195a:	42a8      	cmp	r0, r5
 800195c:	d037      	beq.n	80019ce <HAL_GPIO_Init+0x192>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d035      	beq.n	80019d2 <HAL_GPIO_Init+0x196>
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d033      	beq.n	80019d6 <HAL_GPIO_Init+0x19a>
 800196e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001972:	42a8      	cmp	r0, r5
 8001974:	bf14      	ite	ne
 8001976:	2507      	movne	r5, #7
 8001978:	2504      	moveq	r5, #4
 800197a:	fa05 f50c 	lsl.w	r5, r5, ip
 800197e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001982:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001984:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001986:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800198c:	bf0c      	ite	eq
 800198e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001990:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001992:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001994:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800199a:	bf0c      	ite	eq
 800199c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800199e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80019a0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80019a8:	bf0c      	ite	eq
 80019aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019ac:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80019ae:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80019b4:	bf54      	ite	pl
 80019b6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80019b8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80019ba:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019bc:	3301      	adds	r3, #1
 80019be:	2b10      	cmp	r3, #16
 80019c0:	f47f af47 	bne.w	8001852 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80019c4:	b005      	add	sp, #20
 80019c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	465d      	mov	r5, fp
 80019cc:	e7d5      	b.n	800197a <HAL_GPIO_Init+0x13e>
 80019ce:	2501      	movs	r5, #1
 80019d0:	e7d3      	b.n	800197a <HAL_GPIO_Init+0x13e>
 80019d2:	2502      	movs	r5, #2
 80019d4:	e7d1      	b.n	800197a <HAL_GPIO_Init+0x13e>
 80019d6:	2503      	movs	r5, #3
 80019d8:	e7cf      	b.n	800197a <HAL_GPIO_Init+0x13e>
 80019da:	bf00      	nop
 80019dc:	40013c00 	.word	0x40013c00
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e8:	b10a      	cbz	r2, 80019ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ea:	6181      	str	r1, [r0, #24]
 80019ec:	4770      	bx	lr
 80019ee:	0409      	lsls	r1, r1, #16
 80019f0:	e7fb      	b.n	80019ea <HAL_GPIO_WritePin+0x2>
	...

080019f4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80019f6:	4604      	mov	r4, r0
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d062      	beq.n	8001ac2 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80019fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a04:	b91b      	cbnz	r3, 8001a0e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a06:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0a:	f001 fa41 	bl	8002e90 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0e:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a10:	4e2d      	ldr	r6, [pc, #180]	; (8001ac8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001a12:	4d2e      	ldr	r5, [pc, #184]	; (8001acc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a14:	2324      	movs	r3, #36	; 0x24
 8001a16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001a1a:	6813      	ldr	r3, [r2, #0]
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a22:	f000 faa5 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a26:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001a28:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001a2a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a2e:	42b3      	cmp	r3, r6
 8001a30:	bf84      	itt	hi
 8001a32:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001a36:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001a38:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a3a:	bf91      	iteee	ls
 8001a3c:	1c69      	addls	r1, r5, #1
 8001a3e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001a42:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001a46:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a48:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a4a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a4c:	d821      	bhi.n	8001a92 <HAL_I2C_Init+0x9e>
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a54:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	bf98      	it	ls
 8001a5c:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a5e:	6a21      	ldr	r1, [r4, #32]
 8001a60:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a62:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001a68:	68e1      	ldr	r1, [r4, #12]
 8001a6a:	6923      	ldr	r3, [r4, #16]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001a70:	69a1      	ldr	r1, [r4, #24]
 8001a72:	6963      	ldr	r3, [r4, #20]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a80:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a84:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a92:	68a1      	ldr	r1, [r4, #8]
 8001a94:	b949      	cbnz	r1, 8001aaa <HAL_I2C_Init+0xb6>
 8001a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a9e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001aa2:	b163      	cbz	r3, 8001abe <HAL_I2C_Init+0xca>
 8001aa4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001aa8:	e7d9      	b.n	8001a5e <HAL_I2C_Init+0x6a>
 8001aaa:	2119      	movs	r1, #25
 8001aac:	434b      	muls	r3, r1
 8001aae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ab2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001ab6:	b113      	cbz	r3, 8001abe <HAL_I2C_Init+0xca>
 8001ab8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001abc:	e7cf      	b.n	8001a5e <HAL_I2C_Init+0x6a>
 8001abe:	2001      	movs	r0, #1
 8001ac0:	e7cd      	b.n	8001a5e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001ac2:	2001      	movs	r0, #1
}
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
 8001ac6:	bf00      	nop
 8001ac8:	000186a0 	.word	0x000186a0
 8001acc:	000f4240 	.word	0x000f4240

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	b918      	cbnz	r0, 8001ae0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001ad8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001ada:	b002      	add	sp, #8
 8001adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae0:	6803      	ldr	r3, [r0, #0]
 8001ae2:	07dd      	lsls	r5, r3, #31
 8001ae4:	d410      	bmi.n	8001b08 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	0798      	lsls	r0, r3, #30
 8001aea:	d458      	bmi.n	8001b9e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	071a      	lsls	r2, r3, #28
 8001af0:	f100 809a 	bmi.w	8001c28 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	075b      	lsls	r3, r3, #29
 8001af8:	f100 80b8 	bmi.w	8001c6c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	69a2      	ldr	r2, [r4, #24]
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	f040 8119 	bne.w	8001d36 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001b04:	2000      	movs	r0, #0
 8001b06:	e7e8      	b.n	8001ada <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b08:	4ba6      	ldr	r3, [pc, #664]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	f002 020c 	and.w	r2, r2, #12
 8001b10:	2a04      	cmp	r2, #4
 8001b12:	d007      	beq.n	8001b24 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1a:	2a08      	cmp	r2, #8
 8001b1c:	d10a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0259      	lsls	r1, r3, #9
 8001b22:	d507      	bpl.n	8001b34 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	039a      	lsls	r2, r3, #14
 8001b2a:	d5dc      	bpl.n	8001ae6 <HAL_RCC_OscConfig+0x16>
 8001b2c:	6863      	ldr	r3, [r4, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1d9      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x16>
 8001b32:	e7d1      	b.n	8001ad8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	4d9b      	ldr	r5, [pc, #620]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d111      	bne.n	8001b62 <HAL_RCC_OscConfig+0x92>
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc85 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4d96      	ldr	r5, [pc, #600]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001b4c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	039b      	lsls	r3, r3, #14
 8001b52:	d4c8      	bmi.n	8001ae6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fc7e 	bl	8001454 <HAL_GetTick>
 8001b58:	1b80      	subs	r0, r0, r6
 8001b5a:	2864      	cmp	r0, #100	; 0x64
 8001b5c:	d9f7      	bls.n	8001b4e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001b5e:	2003      	movs	r0, #3
 8001b60:	e7bb      	b.n	8001ada <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b66:	d104      	bne.n	8001b72 <HAL_RCC_OscConfig+0xa2>
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	e7e5      	b.n	8001b3e <HAL_RCC_OscConfig+0x6e>
 8001b72:	682a      	ldr	r2, [r5, #0]
 8001b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b78:	602a      	str	r2, [r5, #0]
 8001b7a:	682a      	ldr	r2, [r5, #0]
 8001b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b80:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1df      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001b86:	f7ff fc65 	bl	8001454 <HAL_GetTick>
 8001b8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	039f      	lsls	r7, r3, #14
 8001b90:	d5a9      	bpl.n	8001ae6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b92:	f7ff fc5f 	bl	8001454 <HAL_GetTick>
 8001b96:	1b80      	subs	r0, r0, r6
 8001b98:	2864      	cmp	r0, #100	; 0x64
 8001b9a:	d9f7      	bls.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b9c:	e7df      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	f012 0f0c 	tst.w	r2, #12
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bae:	2a08      	cmp	r2, #8
 8001bb0:	d111      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	025e      	lsls	r6, r3, #9
 8001bb6:	d40e      	bmi.n	8001bd6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb8:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	0795      	lsls	r5, r2, #30
 8001bbe:	d502      	bpl.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
 8001bc0:	68e2      	ldr	r2, [r4, #12]
 8001bc2:	2a01      	cmp	r2, #1
 8001bc4:	d188      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6921      	ldr	r1, [r4, #16]
 8001bca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001bce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001bd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd4:	e78a      	b.n	8001aec <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd6:	68e2      	ldr	r2, [r4, #12]
 8001bd8:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x2d8>)
 8001bda:	b1b2      	cbz	r2, 8001c0a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc38 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4d6f      	ldr	r5, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001be6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	0798      	lsls	r0, r3, #30
 8001bec:	d507      	bpl.n	8001bfe <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	6922      	ldr	r2, [r4, #16]
 8001bf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bfa:	602b      	str	r3, [r5, #0]
 8001bfc:	e776      	b.n	8001aec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fc29 	bl	8001454 <HAL_GetTick>
 8001c02:	1b80      	subs	r0, r0, r6
 8001c04:	2802      	cmp	r0, #2
 8001c06:	d9ef      	bls.n	8001be8 <HAL_RCC_OscConfig+0x118>
 8001c08:	e7a9      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc22 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c10:	4d64      	ldr	r5, [pc, #400]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001c12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	0799      	lsls	r1, r3, #30
 8001c18:	f57f af68 	bpl.w	8001aec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fc1a 	bl	8001454 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9f6      	bls.n	8001c14 <HAL_RCC_OscConfig+0x144>
 8001c26:	e79a      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c28:	6962      	ldr	r2, [r4, #20]
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <HAL_RCC_OscConfig+0x2dc>)
 8001c2c:	b17a      	cbz	r2, 8001c4e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c32:	f7ff fc0f 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4d5b      	ldr	r5, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c3c:	079f      	lsls	r7, r3, #30
 8001c3e:	f53f af59 	bmi.w	8001af4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c42:	f7ff fc07 	bl	8001454 <HAL_GetTick>
 8001c46:	1b80      	subs	r0, r0, r6
 8001c48:	2802      	cmp	r0, #2
 8001c4a:	d9f6      	bls.n	8001c3a <HAL_RCC_OscConfig+0x16a>
 8001c4c:	e787      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c50:	f7ff fc00 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4d53      	ldr	r5, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001c56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c5a:	0798      	lsls	r0, r3, #30
 8001c5c:	f57f af4a 	bpl.w	8001af4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fbf8 	bl	8001454 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	2802      	cmp	r0, #2
 8001c68:	d9f6      	bls.n	8001c58 <HAL_RCC_OscConfig+0x188>
 8001c6a:	e778      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c70:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001c74:	d128      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	9201      	str	r2, [sp, #4]
 8001c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c8a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4d48      	ldr	r5, [pc, #288]	; (8001db0 <HAL_RCC_OscConfig+0x2e0>)
 8001c8e:	682b      	ldr	r3, [r5, #0]
 8001c90:	05d9      	lsls	r1, r3, #23
 8001c92:	d51b      	bpl.n	8001ccc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	68a3      	ldr	r3, [r4, #8]
 8001c96:	4d43      	ldr	r5, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d127      	bne.n	8001cec <HAL_RCC_OscConfig+0x21c>
 8001c9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fbd6 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	4d3e      	ldr	r5, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001caa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cb2:	079b      	lsls	r3, r3, #30
 8001cb4:	d539      	bpl.n	8001d2a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001cb6:	2e00      	cmp	r6, #0
 8001cb8:	f43f af20 	beq.w	8001afc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001cbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	e719      	b.n	8001afc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001cc8:	2600      	movs	r6, #0
 8001cca:	e7df      	b.n	8001c8c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fbbe 	bl	8001454 <HAL_GetTick>
 8001cd8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	05da      	lsls	r2, r3, #23
 8001cde:	d4d9      	bmi.n	8001c94 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7ff fbb8 	bl	8001454 <HAL_GetTick>
 8001ce4:	1bc0      	subs	r0, r0, r7
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9f7      	bls.n	8001cda <HAL_RCC_OscConfig+0x20a>
 8001cea:	e738      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d104      	bne.n	8001cfa <HAL_RCC_OscConfig+0x22a>
 8001cf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	672b      	str	r3, [r5, #112]	; 0x70
 8001cf8:	e7d0      	b.n	8001c9c <HAL_RCC_OscConfig+0x1cc>
 8001cfa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	672a      	str	r2, [r5, #112]	; 0x70
 8001d02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d04:	f022 0204 	bic.w	r2, r2, #4
 8001d08:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ca      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fba1 	bl	8001454 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d16:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d1a:	0798      	lsls	r0, r3, #30
 8001d1c:	d5cb      	bpl.n	8001cb6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb99 	bl	8001454 <HAL_GetTick>
 8001d22:	1bc0      	subs	r0, r0, r7
 8001d24:	4540      	cmp	r0, r8
 8001d26:	d9f7      	bls.n	8001d18 <HAL_RCC_OscConfig+0x248>
 8001d28:	e719      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fb93 	bl	8001454 <HAL_GetTick>
 8001d2e:	1bc0      	subs	r0, r0, r7
 8001d30:	4540      	cmp	r0, r8
 8001d32:	d9bd      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1e0>
 8001d34:	e713      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d36:	4d1b      	ldr	r5, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
 8001d38:	68ab      	ldr	r3, [r5, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	f43f aeca 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x8>
 8001d44:	4e1b      	ldr	r6, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x2e4>)
 8001d46:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d48:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4c:	d134      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fb81 	bl	8001454 <HAL_GetTick>
 8001d52:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	0199      	lsls	r1, r3, #6
 8001d58:	d41e      	bmi.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5a:	6a22      	ldr	r2, [r4, #32]
 8001d5c:	69e3      	ldr	r3, [r4, #28]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001d66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4c0d      	ldr	r4, [pc, #52]	; (8001da4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d70:	0852      	lsrs	r2, r2, #1
 8001d72:	3a01      	subs	r2, #1
 8001d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d78:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fb69 	bl	8001454 <HAL_GetTick>
 8001d82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	019a      	lsls	r2, r3, #6
 8001d88:	f53f aebc 	bmi.w	8001b04 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff fb62 	bl	8001454 <HAL_GetTick>
 8001d90:	1b40      	subs	r0, r0, r5
 8001d92:	2802      	cmp	r0, #2
 8001d94:	d9f6      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2b4>
 8001d96:	e6e2      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fb5c 	bl	8001454 <HAL_GetTick>
 8001d9c:	1bc0      	subs	r0, r0, r7
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	d9d8      	bls.n	8001d54 <HAL_RCC_OscConfig+0x284>
 8001da2:	e6dc      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	42470000 	.word	0x42470000
 8001dac:	42470e80 	.word	0x42470e80
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001db8:	f7ff fb4c 	bl	8001454 <HAL_GetTick>
 8001dbc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	f57f ae9f 	bpl.w	8001b04 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fb45 	bl	8001454 <HAL_GetTick>
 8001dca:	1b00      	subs	r0, r0, r4
 8001dcc:	2802      	cmp	r0, #2
 8001dce:	d9f6      	bls.n	8001dbe <HAL_RCC_OscConfig+0x2ee>
 8001dd0:	e6c5      	b.n	8001b5e <HAL_RCC_OscConfig+0x8e>
 8001dd2:	bf00      	nop

08001dd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd4:	4913      	ldr	r1, [pc, #76]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001dd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd8:	688b      	ldr	r3, [r1, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x16>
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001de8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001dea:	4810      	ldr	r0, [pc, #64]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x58>)
 8001dec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df8:	bf14      	ite	ne
 8001dfa:	480c      	ldrne	r0, [pc, #48]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfc:	480a      	ldreq	r0, [pc, #40]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e02:	bf18      	it	ne
 8001e04:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	fba1 0100 	umull	r0, r1, r1, r0
 8001e0e:	f7fe f9e1 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x50>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001e1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e22:	bd08      	pop	{r3, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_ClockConfig>:
{
 8001e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e34:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001e36:	4604      	mov	r4, r0
 8001e38:	b910      	cbnz	r0, 8001e40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_ClockConfig+0x124>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f002 020f 	and.w	r2, r2, #15
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d328      	bcc.n	8001e9e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	6821      	ldr	r1, [r4, #0]
 8001e4e:	078f      	lsls	r7, r1, #30
 8001e50:	d42d      	bmi.n	8001eae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	07c8      	lsls	r0, r1, #31
 8001e54:	d440      	bmi.n	8001ed8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_RCC_ClockConfig+0x124>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f002 020f 	and.w	r2, r2, #15
 8001e5e:	4295      	cmp	r5, r2
 8001e60:	d366      	bcc.n	8001f30 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	0751      	lsls	r1, r2, #29
 8001e66:	d46c      	bmi.n	8001f42 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	0713      	lsls	r3, r2, #28
 8001e6a:	d507      	bpl.n	8001e7c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
 8001e6e:	6921      	ldr	r1, [r4, #16]
 8001e70:	6893      	ldr	r3, [r2, #8]
 8001e72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7c:	f7ff ffaa 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
 8001e82:	4a36      	ldr	r2, [pc, #216]	; (8001f5c <HAL_RCC_ClockConfig+0x12c>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d8      	lsrs	r0, r3
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCC_ClockConfig+0x130>)
 8001e90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff faa2 	bl	80013dc <HAL_InitTick>
  return HAL_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d1c6      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xa>
 8001eac:	e7ce      	b.n	8001e4c <HAL_RCC_ClockConfig+0x1c>
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	bf1e      	ittt	ne
 8001eb6:	689a      	ldrne	r2, [r3, #8]
 8001eb8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ebc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec0:	bf42      	ittt	mi
 8001ec2:	689a      	ldrmi	r2, [r3, #8]
 8001ec4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001ec8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	68a0      	ldr	r0, [r4, #8]
 8001ece:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ed2:	4302      	orrs	r2, r0
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	e7bc      	b.n	8001e52 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	6862      	ldr	r2, [r4, #4]
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
 8001edc:	2a01      	cmp	r2, #1
 8001ede:	d11d      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	d0a8      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee8:	4e1b      	ldr	r6, [pc, #108]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
 8001eea:	68b3      	ldr	r3, [r6, #8]
 8001eec:	f023 0303 	bic.w	r3, r3, #3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ef4:	f7ff faae 	bl	8001454 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001efc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	68b3      	ldr	r3, [r6, #8]
 8001f00:	6862      	ldr	r2, [r4, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f0a:	d0a4      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7ff faa2 	bl	8001454 <HAL_GetTick>
 8001f10:	1bc0      	subs	r0, r0, r7
 8001f12:	4540      	cmp	r0, r8
 8001f14:	d9f3      	bls.n	8001efe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001f16:	2003      	movs	r0, #3
}
 8001f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1c:	1e91      	subs	r1, r2, #2
 8001f1e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f20:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f22:	d802      	bhi.n	8001f2a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f28:	e7dd      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	f013 0f02 	tst.w	r3, #2
 8001f2e:	e7da      	b.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f30:	b2ea      	uxtb	r2, r5
 8001f32:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	429d      	cmp	r5, r3
 8001f3c:	f47f af7d 	bne.w	8001e3a <HAL_RCC_ClockConfig+0xa>
 8001f40:	e78f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4905      	ldr	r1, [pc, #20]	; (8001f58 <HAL_RCC_ClockConfig+0x128>)
 8001f44:	68e0      	ldr	r0, [r4, #12]
 8001f46:	688b      	ldr	r3, [r1, #8]
 8001f48:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e78a      	b.n	8001e68 <HAL_RCC_ClockConfig+0x38>
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	080033eb 	.word	0x080033eb
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f64:	4b01      	ldr	r3, [pc, #4]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x8>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f7e:	6810      	ldr	r0, [r2, #0]
}
 8001f80:	40d8      	lsrs	r0, r3
 8001f82:	4770      	bx	lr
 8001f84:	40023800 	.word	0x40023800
 8001f88:	080033fb 	.word	0x080033fb
 8001f8c:	20000008 	.word	0x20000008

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	4a03      	ldr	r2, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f9e:	6810      	ldr	r0, [r2, #0]
}
 8001fa0:	40d8      	lsrs	r0, r3
 8001fa2:	4770      	bx	lr
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	080033fb 	.word	0x080033fb
 8001fac:	20000008 	.word	0x20000008

08001fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb4:	9e06      	ldr	r6, [sp, #24]
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4688      	mov	r8, r1
 8001fba:	4617      	mov	r7, r2
 8001fbc:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	6893      	ldr	r3, [r2, #8]
 8001fc2:	ea38 0303 	bics.w	r3, r8, r3
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	429f      	cmp	r7, r3
 8001fce:	d102      	bne.n	8001fd6 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001fd0:	2000      	movs	r0, #0
}
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001fd6:	1c6b      	adds	r3, r5, #1
 8001fd8:	d0f2      	beq.n	8001fc0 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001fda:	bb55      	cbnz	r5, 8002032 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fe4:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fe6:	6862      	ldr	r2, [r4, #4]
 8001fe8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001fec:	d10a      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001fee:	68a2      	ldr	r2, [r4, #8]
 8001ff0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ff4:	d002      	beq.n	8001ffc <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001ff6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ffa:	d103      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002002:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002004:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002006:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800200a:	d109      	bne.n	8002020 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002012:	0412      	lsls	r2, r2, #16
 8002014:	0c12      	lsrs	r2, r2, #16
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800201e:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002020:	2301      	movs	r3, #1
 8002022:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002026:	2300      	movs	r3, #0
 8002028:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800202c:	2003      	movs	r0, #3
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002032:	f7ff fa0f 	bl	8001454 <HAL_GetTick>
 8002036:	1b80      	subs	r0, r0, r6
 8002038:	4285      	cmp	r5, r0
 800203a:	d8c0      	bhi.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xe>
 800203c:	e7ce      	b.n	8001fdc <SPI_WaitFlagStateUntilTimeout+0x2c>

0800203e <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800203e:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002040:	460b      	mov	r3, r1
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	2200      	movs	r2, #0
{
 8002048:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800204a:	f7ff ffb1 	bl	8001fb0 <SPI_WaitFlagStateUntilTimeout>
 800204e:	b120      	cbz	r0, 800205a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002050:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002058:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800205a:	b002      	add	sp, #8
 800205c:	bd10      	pop	{r4, pc}

0800205e <HAL_SPI_Init>:
{
 800205e:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8002060:	4604      	mov	r4, r0
 8002062:	2800      	cmp	r0, #0
 8002064:	d036      	beq.n	80020d4 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800206a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800206e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002072:	b91b      	cbnz	r3, 800207c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002074:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002078:	f000 ff34 	bl	8002ee4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800207c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800207e:	68a0      	ldr	r0, [r4, #8]
 8002080:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002088:	680b      	ldr	r3, [r1, #0]
 800208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800208e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002090:	6863      	ldr	r3, [r4, #4]
 8002092:	4303      	orrs	r3, r0
 8002094:	68e0      	ldr	r0, [r4, #12]
 8002096:	4303      	orrs	r3, r0
 8002098:	6920      	ldr	r0, [r4, #16]
 800209a:	4303      	orrs	r3, r0
 800209c:	6960      	ldr	r0, [r4, #20]
 800209e:	4303      	orrs	r3, r0
 80020a0:	69e0      	ldr	r0, [r4, #28]
 80020a2:	4303      	orrs	r3, r0
 80020a4:	6a20      	ldr	r0, [r4, #32]
 80020a6:	4303      	orrs	r3, r0
 80020a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80020aa:	4303      	orrs	r3, r0
 80020ac:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80020b0:	4303      	orrs	r3, r0
 80020b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80020b4:	0c12      	lsrs	r2, r2, #16
 80020b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020b8:	f002 0204 	and.w	r2, r2, #4
 80020bc:	431a      	orrs	r2, r3
 80020be:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c0:	69cb      	ldr	r3, [r1, #28]
 80020c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020c6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80020ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80020d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <HAL_SPI_Transmit>:
{
 80020d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80020dc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80020e2:	2b01      	cmp	r3, #1
{
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
 80020e8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80020ea:	f000 809c 	beq.w	8002226 <HAL_SPI_Transmit+0x14e>
 80020ee:	2301      	movs	r3, #1
 80020f0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80020f4:	f7ff f9ae 	bl	8001454 <HAL_GetTick>
 80020f8:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80020fa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020fe:	b2c0      	uxtb	r0, r0
 8002100:	2801      	cmp	r0, #1
 8002102:	f040 808e 	bne.w	8002222 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8002106:	2d00      	cmp	r5, #0
 8002108:	d04e      	beq.n	80021a8 <HAL_SPI_Transmit+0xd0>
 800210a:	f1b8 0f00 	cmp.w	r8, #0
 800210e:	d04b      	beq.n	80021a8 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002110:	2303      	movs	r3, #3
 8002112:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002116:	2300      	movs	r3, #0
 8002118:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800211a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800211c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002120:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002122:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002124:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002126:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002128:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800212a:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800212c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002130:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002132:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002136:	bf02      	ittt	eq
 8002138:	681a      	ldreq	r2, [r3, #0]
 800213a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800213e:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002144:	bf5e      	ittt	pl
 8002146:	681a      	ldrpl	r2, [r3, #0]
 8002148:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800214c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800214e:	68e2      	ldr	r2, [r4, #12]
 8002150:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002154:	6862      	ldr	r2, [r4, #4]
 8002156:	d138      	bne.n	80021ca <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002158:	b11a      	cbz	r2, 8002162 <HAL_SPI_Transmit+0x8a>
 800215a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800215c:	b292      	uxth	r2, r2
 800215e:	2a01      	cmp	r2, #1
 8002160:	d106      	bne.n	8002170 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002162:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002166:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002168:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800216a:	3b01      	subs	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002170:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	b993      	cbnz	r3, 800219c <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002176:	9700      	str	r7, [sp, #0]
 8002178:	4633      	mov	r3, r6
 800217a:	2201      	movs	r2, #1
 800217c:	2102      	movs	r1, #2
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff16 	bl	8001fb0 <SPI_WaitFlagStateUntilTimeout>
 8002184:	b978      	cbnz	r0, 80021a6 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002186:	463a      	mov	r2, r7
 8002188:	4631      	mov	r1, r6
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ff57 	bl	800203e <SPI_CheckFlag_BSY>
 8002190:	2800      	cmp	r0, #0
 8002192:	d038      	beq.n	8002206 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002194:	2320      	movs	r3, #32
 8002196:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002198:	2001      	movs	r0, #1
    goto error;
 800219a:	e005      	b.n	80021a8 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	0790      	lsls	r0, r2, #30
 80021a2:	d4de      	bmi.n	8002162 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80021a4:	b94e      	cbnz	r6, 80021ba <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 80021a6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021ae:	2300      	movs	r3, #0
 80021b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80021b4:	b004      	add	sp, #16
 80021b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80021ba:	1c71      	adds	r1, r6, #1
 80021bc:	d0d8      	beq.n	8002170 <HAL_SPI_Transmit+0x98>
 80021be:	f7ff f949 	bl	8001454 <HAL_GetTick>
 80021c2:	1bc0      	subs	r0, r0, r7
 80021c4:	4286      	cmp	r6, r0
 80021c6:	d8d3      	bhi.n	8002170 <HAL_SPI_Transmit+0x98>
 80021c8:	e7ed      	b.n	80021a6 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80021ca:	b11a      	cbz	r2, 80021d4 <HAL_SPI_Transmit+0xfc>
 80021cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80021ce:	b292      	uxth	r2, r2
 80021d0:	2a01      	cmp	r2, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80021d4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80021d8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80021da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80021e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0c5      	beq.n	8002176 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	0792      	lsls	r2, r2, #30
 80021f0:	d4f0      	bmi.n	80021d4 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80021f2:	2e00      	cmp	r6, #0
 80021f4:	d0d7      	beq.n	80021a6 <HAL_SPI_Transmit+0xce>
 80021f6:	1c73      	adds	r3, r6, #1
 80021f8:	d0f3      	beq.n	80021e2 <HAL_SPI_Transmit+0x10a>
 80021fa:	f7ff f92b 	bl	8001454 <HAL_GetTick>
 80021fe:	1bc0      	subs	r0, r0, r7
 8002200:	4286      	cmp	r6, r0
 8002202:	d8ee      	bhi.n	80021e2 <HAL_SPI_Transmit+0x10a>
 8002204:	e7cf      	b.n	80021a6 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	b933      	cbnz	r3, 8002218 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	9203      	str	r2, [sp, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	9303      	str	r3, [sp, #12]
 8002216:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002218:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800221a:	3000      	adds	r0, #0
 800221c:	bf18      	it	ne
 800221e:	2001      	movne	r0, #1
 8002220:	e7c2      	b.n	80021a8 <HAL_SPI_Transmit+0xd0>
 8002222:	2002      	movs	r0, #2
 8002224:	e7c0      	b.n	80021a8 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8002226:	2002      	movs	r0, #2
 8002228:	e7c4      	b.n	80021b4 <HAL_SPI_Transmit+0xdc>

0800222a <HAL_SPI_TransmitReceive>:
{
 800222a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800222e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8002230:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002234:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8002236:	2b01      	cmp	r3, #1
{
 8002238:	4604      	mov	r4, r0
 800223a:	460d      	mov	r5, r1
 800223c:	4616      	mov	r6, r2
 800223e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8002240:	f000 80ed 	beq.w	800241e <HAL_SPI_TransmitReceive+0x1f4>
 8002244:	2301      	movs	r3, #1
 8002246:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800224a:	f7ff f903 	bl	8001454 <HAL_GetTick>
  tmp  = hspi->State;
 800224e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8002252:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8002254:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002256:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002258:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800225a:	d00a      	beq.n	8002272 <HAL_SPI_TransmitReceive+0x48>
 800225c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002260:	f040 80db 	bne.w	800241a <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002264:	68a2      	ldr	r2, [r4, #8]
 8002266:	2a00      	cmp	r2, #0
 8002268:	f040 80d7 	bne.w	800241a <HAL_SPI_TransmitReceive+0x1f0>
 800226c:	2b04      	cmp	r3, #4
 800226e:	f040 80d4 	bne.w	800241a <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8002272:	2d00      	cmp	r5, #0
 8002274:	d04e      	beq.n	8002314 <HAL_SPI_TransmitReceive+0xea>
 8002276:	2e00      	cmp	r6, #0
 8002278:	d04c      	beq.n	8002314 <HAL_SPI_TransmitReceive+0xea>
 800227a:	f1b9 0f00 	cmp.w	r9, #0
 800227e:	d049      	beq.n	8002314 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8002280:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002284:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8002286:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002288:	bf04      	itt	eq
 800228a:	2305      	moveq	r3, #5
 800228c:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002290:	2300      	movs	r3, #0
 8002292:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002294:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002296:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002298:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800229a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800229e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80022a4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80022aa:	bf58      	it	pl
 80022ac:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022ae:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80022b0:	bf58      	it	pl
 80022b2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80022b6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80022ba:	bf58      	it	pl
 80022bc:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022be:	68e2      	ldr	r2, [r4, #12]
 80022c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80022c4:	d15d      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022c6:	b119      	cbz	r1, 80022d0 <HAL_SPI_TransmitReceive+0xa6>
 80022c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80022ca:	b292      	uxth	r2, r2
 80022cc:	2a01      	cmp	r2, #1
 80022ce:	d106      	bne.n	80022de <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80022d0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022d4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80022d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80022de:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b9bb      	cbnz	r3, 8002318 <HAL_SPI_TransmitReceive+0xee>
 80022e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b9a3      	cbnz	r3, 8002318 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80022ee:	f8cd 8000 	str.w	r8, [sp]
 80022f2:	463b      	mov	r3, r7
 80022f4:	2201      	movs	r2, #1
 80022f6:	2102      	movs	r1, #2
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fe59 	bl	8001fb0 <SPI_WaitFlagStateUntilTimeout>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d135      	bne.n	800236e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002302:	4642      	mov	r2, r8
 8002304:	4639      	mov	r1, r7
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff fe99 	bl	800203e <SPI_CheckFlag_BSY>
 800230c:	2800      	cmp	r0, #0
 800230e:	d079      	beq.n	8002404 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002310:	2320      	movs	r3, #32
 8002312:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	e02b      	b.n	8002370 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002318:	f1b9 0f00 	cmp.w	r9, #0
 800231c:	d00f      	beq.n	800233e <HAL_SPI_TransmitReceive+0x114>
 800231e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	b163      	cbz	r3, 800233e <HAL_SPI_TransmitReceive+0x114>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	0791      	lsls	r1, r2, #30
 800232a:	d508      	bpl.n	800233e <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800232c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002330:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002332:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002334:	3b01      	subs	r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800233a:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800233e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	b163      	cbz	r3, 800235e <HAL_SPI_TransmitReceive+0x134>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	07d2      	lsls	r2, r2, #31
 800234a:	d508      	bpl.n	800235e <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002352:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002354:	3b01      	subs	r3, #1
 8002356:	b29b      	uxth	r3, r3
 8002358:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800235a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800235e:	1c78      	adds	r0, r7, #1
 8002360:	d0bf      	beq.n	80022e2 <HAL_SPI_TransmitReceive+0xb8>
 8002362:	f7ff f877 	bl	8001454 <HAL_GetTick>
 8002366:	eba0 0008 	sub.w	r0, r0, r8
 800236a:	4287      	cmp	r7, r0
 800236c:	d8b9      	bhi.n	80022e2 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800236e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002370:	2301      	movs	r3, #1
 8002372:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002376:	2300      	movs	r3, #0
 8002378:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800237c:	b005      	add	sp, #20
 800237e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002382:	b119      	cbz	r1, 800238c <HAL_SPI_TransmitReceive+0x162>
 8002384:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002386:	b292      	uxth	r2, r2
 8002388:	2a01      	cmp	r2, #1
 800238a:	d106      	bne.n	800239a <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800238c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002390:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002392:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002394:	3b01      	subs	r3, #1
 8002396:	b29b      	uxth	r3, r3
 8002398:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800239a:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800239e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b91b      	cbnz	r3, 80023ac <HAL_SPI_TransmitReceive+0x182>
 80023a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0a0      	beq.n	80022ee <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80023ac:	f1b9 0f00 	cmp.w	r9, #0
 80023b0:	d00f      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0x1a8>
 80023b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b163      	cbz	r3, 80023d2 <HAL_SPI_TransmitReceive+0x1a8>
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	0791      	lsls	r1, r2, #30
 80023be:	d508      	bpl.n	80023d2 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80023c0:	782a      	ldrb	r2, [r5, #0]
 80023c2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80023c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80023cc:	3501      	adds	r5, #1
        txallowed = 0U;
 80023ce:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b163      	cbz	r3, 80023f2 <HAL_SPI_TransmitReceive+0x1c8>
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	07d2      	lsls	r2, r2, #31
 80023de:	d508      	bpl.n	80023f2 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80023e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80023ec:	3601      	adds	r6, #1
        txallowed = 1U;
 80023ee:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80023f2:	1c7b      	adds	r3, r7, #1
 80023f4:	d0d3      	beq.n	800239e <HAL_SPI_TransmitReceive+0x174>
 80023f6:	f7ff f82d 	bl	8001454 <HAL_GetTick>
 80023fa:	eba0 0008 	sub.w	r0, r0, r8
 80023fe:	4287      	cmp	r7, r0
 8002400:	d8cd      	bhi.n	800239e <HAL_SPI_TransmitReceive+0x174>
 8002402:	e7b4      	b.n	800236e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002404:	68a3      	ldr	r3, [r4, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1b2      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	9003      	str	r0, [sp, #12]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	9203      	str	r2, [sp, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	9b03      	ldr	r3, [sp, #12]
 8002418:	e7aa      	b.n	8002370 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 800241a:	2002      	movs	r0, #2
 800241c:	e7a8      	b.n	8002370 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 800241e:	2002      	movs	r0, #2
 8002420:	e7ac      	b.n	800237c <HAL_SPI_TransmitReceive+0x152>

08002422 <HAL_SPI_Receive>:
{
 8002422:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002426:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002428:	6843      	ldr	r3, [r0, #4]
 800242a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800242e:	4604      	mov	r4, r0
 8002430:	460d      	mov	r5, r1
 8002432:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002434:	d10c      	bne.n	8002450 <HAL_SPI_Receive+0x2e>
 8002436:	6883      	ldr	r3, [r0, #8]
 8002438:	b953      	cbnz	r3, 8002450 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800243a:	2304      	movs	r3, #4
 800243c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8002440:	4613      	mov	r3, r2
 8002442:	9600      	str	r6, [sp, #0]
 8002444:	460a      	mov	r2, r1
 8002446:	f7ff fef0 	bl	800222a <HAL_SPI_TransmitReceive>
}
 800244a:	b002      	add	sp, #8
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002450:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	f000 8081 	beq.w	800255c <HAL_SPI_Receive+0x13a>
 800245a:	2301      	movs	r3, #1
 800245c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002460:	f7fe fff8 	bl	8001454 <HAL_GetTick>
 8002464:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002466:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800246a:	b2c0      	uxtb	r0, r0
 800246c:	2801      	cmp	r0, #1
 800246e:	d173      	bne.n	8002558 <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 8002470:	2d00      	cmp	r5, #0
 8002472:	d058      	beq.n	8002526 <HAL_SPI_Receive+0x104>
 8002474:	f1b8 0f00 	cmp.w	r8, #0
 8002478:	d055      	beq.n	8002526 <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800247a:	2304      	movs	r3, #4
 800247c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002480:	2300      	movs	r3, #0
 8002482:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002484:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002486:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800248a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800248c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800248e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002490:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002492:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002494:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 800249c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 80024a0:	bf02      	ittt	eq
 80024a2:	681a      	ldreq	r2, [r3, #0]
 80024a4:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80024a8:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80024ae:	bf5e      	ittt	pl
 80024b0:	681a      	ldrpl	r2, [r3, #0]
 80024b2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80024b6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024b8:	68e3      	ldr	r3, [r4, #12]
 80024ba:	b1cb      	cbz	r3, 80024f0 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 80024bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b1d3      	cbz	r3, 80024f8 <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	07d2      	lsls	r2, r2, #31
 80024c8:	d53c      	bpl.n	8002544 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 80024d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80024d8:	e7f0      	b.n	80024bc <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	07d0      	lsls	r0, r2, #31
 80024e0:	d51f      	bpl.n	8002522 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 80024e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 80024f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024f8:	6863      	ldr	r3, [r4, #4]
 80024fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024fe:	d10b      	bne.n	8002518 <HAL_SPI_Receive+0xf6>
 8002500:	68a3      	ldr	r3, [r4, #8]
 8002502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002506:	d002      	beq.n	800250e <HAL_SPI_Receive+0xec>
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250c:	d104      	bne.n	8002518 <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6813      	ldr	r3, [r2, #0]
 8002512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002516:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002518:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800251a:	3000      	adds	r0, #0
 800251c:	bf18      	it	ne
 800251e:	2001      	movne	r0, #1
 8002520:	e001      	b.n	8002526 <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002522:	b93e      	cbnz	r6, 8002534 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002526:	2301      	movs	r3, #1
 8002528:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800252c:	2300      	movs	r3, #0
 800252e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002532:	e78a      	b.n	800244a <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002534:	1c71      	adds	r1, r6, #1
 8002536:	d0db      	beq.n	80024f0 <HAL_SPI_Receive+0xce>
 8002538:	f7fe ff8c 	bl	8001454 <HAL_GetTick>
 800253c:	1bc0      	subs	r0, r0, r7
 800253e:	4286      	cmp	r6, r0
 8002540:	d8d6      	bhi.n	80024f0 <HAL_SPI_Receive+0xce>
 8002542:	e7ef      	b.n	8002524 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002544:	2e00      	cmp	r6, #0
 8002546:	d0ed      	beq.n	8002524 <HAL_SPI_Receive+0x102>
 8002548:	1c73      	adds	r3, r6, #1
 800254a:	d0b7      	beq.n	80024bc <HAL_SPI_Receive+0x9a>
 800254c:	f7fe ff82 	bl	8001454 <HAL_GetTick>
 8002550:	1bc0      	subs	r0, r0, r7
 8002552:	4286      	cmp	r6, r0
 8002554:	d8b2      	bhi.n	80024bc <HAL_SPI_Receive+0x9a>
 8002556:	e7e5      	b.n	8002524 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 8002558:	2002      	movs	r0, #2
 800255a:	e7e4      	b.n	8002526 <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 800255c:	2002      	movs	r0, #2
 800255e:	e774      	b.n	800244a <HAL_SPI_Receive+0x28>

08002560 <HAL_SPI_ErrorCallback>:
 8002560:	4770      	bx	lr
	...

08002564 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002564:	6803      	ldr	r3, [r0, #0]
{
 8002566:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002568:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800256a:	689a      	ldr	r2, [r3, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800256c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002570:	2d01      	cmp	r5, #1
{
 8002572:	b085      	sub	sp, #20
 8002574:	4604      	mov	r4, r0
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002576:	d105      	bne.n	8002584 <HAL_SPI_IRQHandler+0x20>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002578:	064d      	lsls	r5, r1, #25
 800257a:	d503      	bpl.n	8002584 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 800257c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 800257e:	4798      	blx	r3
}
 8002580:	b005      	add	sp, #20
 8002582:	bd30      	pop	{r4, r5, pc}
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002584:	0795      	lsls	r5, r2, #30
 8002586:	d504      	bpl.n	8002592 <HAL_SPI_IRQHandler+0x2e>
 8002588:	0608      	lsls	r0, r1, #24
 800258a:	d502      	bpl.n	8002592 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800258c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800258e:	4620      	mov	r0, r4
 8002590:	e7f5      	b.n	800257e <HAL_SPI_IRQHandler+0x1a>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002592:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8002596:	d0f3      	beq.n	8002580 <HAL_SPI_IRQHandler+0x1c>
 8002598:	068d      	lsls	r5, r1, #26
 800259a:	d5f1      	bpl.n	8002580 <HAL_SPI_IRQHandler+0x1c>
    if((itflag & SPI_FLAG_OVR) != RESET)
 800259c:	0650      	lsls	r0, r2, #25
 800259e:	d50f      	bpl.n	80025c0 <HAL_SPI_IRQHandler+0x5c>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025a0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80025a4:	2803      	cmp	r0, #3
 80025a6:	f04f 0500 	mov.w	r5, #0
 80025aa:	d041      	beq.n	8002630 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025ae:	f040 0004 	orr.w	r0, r0, #4
 80025b2:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b4:	9500      	str	r5, [sp, #0]
 80025b6:	68d8      	ldr	r0, [r3, #12]
 80025b8:	9000      	str	r0, [sp, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	9000      	str	r0, [sp, #0]
 80025be:	9800      	ldr	r0, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 80025c0:	0695      	lsls	r5, r2, #26
 80025c2:	d50c      	bpl.n	80025de <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c6:	f040 0001 	orr.w	r0, r0, #1
 80025ca:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025cc:	2000      	movs	r0, #0
 80025ce:	9002      	str	r0, [sp, #8]
 80025d0:	6898      	ldr	r0, [r3, #8]
 80025d2:	9002      	str	r0, [sp, #8]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80025da:	6018      	str	r0, [r3, #0]
 80025dc:	9802      	ldr	r0, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 80025de:	05d0      	lsls	r0, r2, #23
 80025e0:	d508      	bpl.n	80025f4 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025e4:	f042 0208 	orr.w	r2, r2, #8
 80025e8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025ea:	2200      	movs	r2, #0
 80025ec:	9203      	str	r2, [sp, #12]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	9203      	str	r2, [sp, #12]
 80025f2:	9a03      	ldr	r2, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d0c2      	beq.n	8002580 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002600:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002602:	2201      	movs	r2, #1
 8002604:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002608:	078a      	lsls	r2, r1, #30
 800260a:	d018      	beq.n	800263e <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800260c:	685a      	ldr	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 800260e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002610:	f022 0203 	bic.w	r2, r2, #3
 8002614:	605a      	str	r2, [r3, #4]
        if(hspi->hdmarx != NULL)
 8002616:	b118      	cbz	r0, 8002620 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_SPI_IRQHandler+0xe4>)
 800261a:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800261c:	f7ff f842 	bl	80016a4 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002620:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002622:	2800      	cmp	r0, #0
 8002624:	d0ac      	beq.n	8002580 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_SPI_IRQHandler+0xe4>)
 8002628:	6503      	str	r3, [r0, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800262a:	f7ff f83b 	bl	80016a4 <HAL_DMA_Abort_IT>
 800262e:	e7a7      	b.n	8002580 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002630:	9501      	str	r5, [sp, #4]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	9201      	str	r2, [sp, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	9b01      	ldr	r3, [sp, #4]
        return;
 800263c:	e7a0      	b.n	8002580 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ff8e 	bl	8002560 <HAL_SPI_ErrorCallback>
 8002644:	e79c      	b.n	8002580 <HAL_SPI_IRQHandler+0x1c>
 8002646:	bf00      	nop
 8002648:	0800264d 	.word	0x0800264d

0800264c <SPI_DMAAbortOnError>:
{
 800264c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800264e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002654:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002656:	f7ff ff83 	bl	8002560 <HAL_SPI_ErrorCallback>
 800265a:	bd08      	pop	{r3, pc}

0800265c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002660:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002662:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002664:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002666:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002668:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800266c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800266e:	6133      	str	r3, [r6, #16]
{
 8002670:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002672:	6883      	ldr	r3, [r0, #8]
 8002674:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002676:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002678:	4303      	orrs	r3, r0
 800267a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800267c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002680:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002682:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002686:	430b      	orrs	r3, r1
 8002688:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800268a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800268c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800268e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002694:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002696:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800269a:	6173      	str	r3, [r6, #20]
 800269c:	4b7a      	ldr	r3, [pc, #488]	; (8002888 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269e:	d17c      	bne.n	800279a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a0:	429e      	cmp	r6, r3
 80026a2:	d003      	beq.n	80026ac <UART_SetConfig+0x50>
 80026a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a8:	429e      	cmp	r6, r3
 80026aa:	d144      	bne.n	8002736 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026ac:	f7ff fc70 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80026b0:	2519      	movs	r5, #25
 80026b2:	fb05 f300 	mul.w	r3, r5, r0
 80026b6:	6860      	ldr	r0, [r4, #4]
 80026b8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026bc:	0040      	lsls	r0, r0, #1
 80026be:	fbb3 f3f0 	udiv	r3, r3, r0
 80026c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80026c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ca:	f7ff fc61 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80026ce:	6863      	ldr	r3, [r4, #4]
 80026d0:	4368      	muls	r0, r5
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fbb0 f7f3 	udiv	r7, r0, r3
 80026d8:	f7ff fc5a 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80026dc:	6863      	ldr	r3, [r4, #4]
 80026de:	4368      	muls	r0, r5
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	fbb3 f3f9 	udiv	r3, r3, r9
 80026ea:	fb09 7313 	mls	r3, r9, r3, r7
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	3332      	adds	r3, #50	; 0x32
 80026f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80026fc:	f7ff fc48 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 8002700:	6862      	ldr	r2, [r4, #4]
 8002702:	4368      	muls	r0, r5
 8002704:	0052      	lsls	r2, r2, #1
 8002706:	fbb0 faf2 	udiv	sl, r0, r2
 800270a:	f7ff fc41 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800270e:	6863      	ldr	r3, [r4, #4]
 8002710:	4368      	muls	r0, r5
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	fbb3 f3f9 	udiv	r3, r3, r9
 800271c:	fb09 a313 	mls	r3, r9, r3, sl
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	3332      	adds	r3, #50	; 0x32
 8002724:	fbb3 f3f9 	udiv	r3, r3, r9
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800272e:	443b      	add	r3, r7
 8002730:	60b3      	str	r3, [r6, #8]
 8002732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002736:	f7ff fc1b 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 800273a:	2519      	movs	r5, #25
 800273c:	fb05 f300 	mul.w	r3, r5, r0
 8002740:	6860      	ldr	r0, [r4, #4]
 8002742:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002746:	0040      	lsls	r0, r0, #1
 8002748:	fbb3 f3f0 	udiv	r3, r3, r0
 800274c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002750:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002754:	f7ff fc0c 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	4368      	muls	r0, r5
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002762:	f7ff fc05 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	4368      	muls	r0, r5
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	fbb3 f3f9 	udiv	r3, r3, r9
 8002774:	fb09 7313 	mls	r3, r9, r3, r7
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002786:	f7ff fbf3 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 800278a:	6862      	ldr	r2, [r4, #4]
 800278c:	4368      	muls	r0, r5
 800278e:	0052      	lsls	r2, r2, #1
 8002790:	fbb0 faf2 	udiv	sl, r0, r2
 8002794:	f7ff fbec 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002798:	e7b9      	b.n	800270e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800279a:	429e      	cmp	r6, r3
 800279c:	d002      	beq.n	80027a4 <UART_SetConfig+0x148>
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <UART_SetConfig+0x230>)
 80027a0:	429e      	cmp	r6, r3
 80027a2:	d140      	bne.n	8002826 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027a4:	f7ff fbf4 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80027a8:	6867      	ldr	r7, [r4, #4]
 80027aa:	2519      	movs	r5, #25
 80027ac:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027b0:	fb05 f300 	mul.w	r3, r5, r0
 80027b4:	00bf      	lsls	r7, r7, #2
 80027b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80027ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80027be:	011f      	lsls	r7, r3, #4
 80027c0:	f7ff fbe6 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	4368      	muls	r0, r5
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fbb0 f8f3 	udiv	r8, r0, r3
 80027ce:	f7ff fbdf 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80027d2:	6863      	ldr	r3, [r4, #4]
 80027d4:	4368      	muls	r0, r5
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80027e0:	fb09 8313 	mls	r3, r9, r3, r8
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ec:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80027f0:	f7ff fbce 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	4368      	muls	r0, r5
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	fbb0 faf2 	udiv	sl, r0, r2
 80027fe:	f7ff fbc7 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002802:	6863      	ldr	r3, [r4, #4]
 8002804:	4368      	muls	r0, r5
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fbb0 f3f3 	udiv	r3, r0, r3
 800280c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002810:	fb09 a313 	mls	r3, r9, r3, sl
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	3332      	adds	r3, #50	; 0x32
 8002818:	fbb3 f3f9 	udiv	r3, r3, r9
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	ea43 0308 	orr.w	r3, r3, r8
 8002824:	e783      	b.n	800272e <UART_SetConfig+0xd2>
 8002826:	f7ff fba3 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 800282a:	6867      	ldr	r7, [r4, #4]
 800282c:	2519      	movs	r5, #25
 800282e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002832:	fb05 f300 	mul.w	r3, r5, r0
 8002836:	00bf      	lsls	r7, r7, #2
 8002838:	fbb3 f3f7 	udiv	r3, r3, r7
 800283c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002840:	011f      	lsls	r7, r3, #4
 8002842:	f7ff fb95 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002846:	6863      	ldr	r3, [r4, #4]
 8002848:	4368      	muls	r0, r5
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002850:	f7ff fb8e 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	4368      	muls	r0, r5
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002862:	fb09 8313 	mls	r3, r9, r3, r8
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	fbb3 f3f9 	udiv	r3, r3, r9
 800286e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002872:	f7ff fb7d 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002876:	6862      	ldr	r2, [r4, #4]
 8002878:	4368      	muls	r0, r5
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	fbb0 faf2 	udiv	sl, r0, r2
 8002880:	f7ff fb76 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8002884:	e7bd      	b.n	8002802 <UART_SetConfig+0x1a6>
 8002886:	bf00      	nop
 8002888:	40011000 	.word	0x40011000
 800288c:	40011400 	.word	0x40011400

08002890 <HAL_UART_Init>:
{
 8002890:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002892:	4604      	mov	r4, r0
 8002894:	b340      	cbz	r0, 80028e8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002896:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800289a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800289e:	b91b      	cbnz	r3, 80028a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028a4:	f000 fc2c 	bl	8003100 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80028a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	2324      	movs	r3, #36	; 0x24
 80028ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028b0:	68d3      	ldr	r3, [r2, #12]
 80028b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fecf 	bl	800265c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80028da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80028de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80028e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80028e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
}
 80028ea:	bd10      	pop	{r4, pc}

080028ec <_ZN7ADXL3728regWriteEhh>:
 */

#include "adxl372.h"

void ADXL372::regWrite(uint8_t reg, uint8_t data)
{
 80028ec:	b513      	push	{r0, r1, r4, lr}
 80028ee:	4604      	mov	r4, r0
	uint8_t d[2] = { };
	d[0] = reg << 1; //shift left 1, add 0 (LSB is R/W Bit)
 80028f0:	0049      	lsls	r1, r1, #1
 80028f2:	f88d 1004 	strb.w	r1, [sp, #4]
	d[1] = data;
 80028f6:	f88d 2005 	strb.w	r2, [sp, #5]

	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_RESET); //TODO replace GPIO with sturct
 80028fa:	8881      	ldrh	r1, [r0, #4]
 80028fc:	6880      	ldr	r0, [r0, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	f7ff f872 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_HANDLER, d, 2, 1000);
 8002904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002908:	a901      	add	r1, sp, #4
 800290a:	2202      	movs	r2, #2
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	f7ff fbe3 	bl	80020d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
 8002912:	2201      	movs	r2, #1
 8002914:	88a1      	ldrh	r1, [r4, #4]
 8002916:	68a0      	ldr	r0, [r4, #8]
 8002918:	f7ff f866 	bl	80019e8 <HAL_GPIO_WritePin>
}
 800291c:	b002      	add	sp, #8
 800291e:	bd10      	pop	{r4, pc}

08002920 <_ZN7ADXL37210initializeEv>:
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
	return d[1];
}

void ADXL372::initialize()
{
 8002920:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
 8002922:	8881      	ldrh	r1, [r0, #4]
 8002924:	6880      	ldr	r0, [r0, #8]
 8002926:	2201      	movs	r2, #1
 8002928:	f7ff f85e 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800292c:	200a      	movs	r0, #10
}
 800292e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(10);
 8002932:	f7fe bd95 	b.w	8001460 <HAL_Delay>

08002936 <_ZN7ADXL3729multiReadEhPhh>:
	//Testing device id of device
	return(regRead(0x00)==0x1D);
}

void ADXL372::multiRead(uint8_t startReg, uint8_t* data, uint8_t nos)
{
 8002936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002938:	4604      	mov	r4, r0
 800293a:	4616      	mov	r6, r2
 800293c:	460d      	mov	r5, r1
	//Send one byte specifing the register to read
	//Read nos bytes of data back
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_RESET);
 800293e:	2200      	movs	r2, #0
 8002940:	8881      	ldrh	r1, [r0, #4]
 8002942:	6880      	ldr	r0, [r0, #8]
{
 8002944:	461f      	mov	r7, r3
	uint8_t startRegOne = (startReg << 1) + 1; // LSB is R/_W Bit
 8002946:	006d      	lsls	r5, r5, #1
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_RESET);
 8002948:	f7ff f84e 	bl	80019e8 <HAL_GPIO_WritePin>
	uint8_t startRegOne = (startReg << 1) + 1; // LSB is R/_W Bit
 800294c:	a902      	add	r1, sp, #8
 800294e:	3501      	adds	r5, #1
 8002950:	f801 5d01 	strb.w	r5, [r1, #-1]!
	HAL_SPI_Transmit(SPI_HANDLER, &startRegOne, 1, 1000);
 8002954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002958:	2201      	movs	r2, #1
 800295a:	6820      	ldr	r0, [r4, #0]
 800295c:	f7ff fbbc 	bl	80020d8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_HANDLER, data, nos, 1000);
 8002960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002964:	463a      	mov	r2, r7
 8002966:	4631      	mov	r1, r6
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	f7ff fd5a 	bl	8002422 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PIN_BANK, CSS_PIN, GPIO_PIN_SET);
 800296e:	2201      	movs	r2, #1
 8002970:	88a1      	ldrh	r1, [r4, #4]
 8002972:	68a0      	ldr	r0, [r4, #8]
 8002974:	f7ff f838 	bl	80019e8 <HAL_GPIO_WritePin>
}
 8002978:	b003      	add	sp, #12
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800297c <_ZN6BMI1608regWriteEhh>:

#include "bmi160.h"


void BMI160::regWrite(uint8_t reg, uint8_t data)
{
 800297c:	b513      	push	{r0, r1, r4, lr}
 800297e:	4604      	mov	r4, r0
	uint8_t d[2] = { };
	d[0] = reg;
 8002980:	f88d 1004 	strb.w	r1, [sp, #4]
	d[1] = data;
 8002984:	f88d 2005 	strb.w	r2, [sp, #5]

	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET); //TODO replace GPIO with sturct
 8002988:	8881      	ldrh	r1, [r0, #4]
 800298a:	6880      	ldr	r0, [r0, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	f7ff f82b 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(BMI160_SPI_HANDLER, d, 2, 1000);
 8002992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002996:	a901      	add	r1, sp, #4
 8002998:	2202      	movs	r2, #2
 800299a:	6820      	ldr	r0, [r4, #0]
 800299c:	f7ff fb9c 	bl	80020d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET);
 80029a0:	2201      	movs	r2, #1
 80029a2:	88a1      	ldrh	r1, [r4, #4]
 80029a4:	68a0      	ldr	r0, [r4, #8]
 80029a6:	f7ff f81f 	bl	80019e8 <HAL_GPIO_WritePin>
}
 80029aa:	b002      	add	sp, #8
 80029ac:	bd10      	pop	{r4, pc}

080029ae <_ZN6BMI1607regReadEh>:

uint8_t BMI160::regRead(uint8_t reg)
{
 80029ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d[2] = {};
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 80029b0:	ad02      	add	r5, sp, #8
	uint8_t d[2] = {};
 80029b2:	2200      	movs	r2, #0
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 80029b4:	3980      	subs	r1, #128	; 0x80
{
 80029b6:	4604      	mov	r4, r0
	uint8_t d[2] = {};
 80029b8:	f8ad 2004 	strh.w	r2, [sp, #4]
	d[0] = reg + 0b10000000; //MSB must be 1 for read comand!
 80029bc:	f805 1d04 	strb.w	r1, [r5, #-4]!

	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_RESET);
 80029c0:	8881      	ldrh	r1, [r0, #4]
 80029c2:	6880      	ldr	r0, [r0, #8]
 80029c4:	f7ff f810 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(BMI160_SPI_HANDLER, &d[0], 1, 1000);
 80029c8:	4629      	mov	r1, r5
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	2201      	movs	r2, #1
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	f7ff fb81 	bl	80020d8 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe fd42 	bl	8001460 <HAL_Delay>
	HAL_SPI_Receive(BMI160_SPI_HANDLER, &d[1], 1, 1000);
 80029dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e0:	f10d 0105 	add.w	r1, sp, #5
 80029e4:	2201      	movs	r2, #1
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	f7ff fd1b 	bl	8002422 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET);
 80029ec:	68a0      	ldr	r0, [r4, #8]
 80029ee:	88a1      	ldrh	r1, [r4, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f7fe fff9 	bl	80019e8 <HAL_GPIO_WritePin>
	return d[1];
}
 80029f6:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80029fa:	b003      	add	sp, #12
 80029fc:	bd30      	pop	{r4, r5, pc}

080029fe <_ZN6BMI16016initializeBMI160Ev>:

void BMI160::initializeBMI160()
{
 80029fe:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET); //Set css pin high to bring sensor into SPI mode. Consider using a physical pulldown resistor at css to make sure it is low at boot time of bmi160
 8002a00:	8881      	ldrh	r1, [r0, #4]
{
 8002a02:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(BMI160_PIN_BANK, BMI160_CSS_PIN, GPIO_PIN_SET); //Set css pin high to bring sensor into SPI mode. Consider using a physical pulldown resistor at css to make sure it is low at boot time of bmi160
 8002a04:	2201      	movs	r2, #1
 8002a06:	6880      	ldr	r0, [r0, #8]
 8002a08:	f7fe ffee 	bl	80019e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002a0c:	2064      	movs	r0, #100	; 0x64
 8002a0e:	f7fe fd27 	bl	8001460 <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET); //Soft reset to get into known state
 8002a12:	22b6      	movs	r2, #182	; 0xb6
 8002a14:	217e      	movs	r1, #126	; 0x7e
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7ff ffb0 	bl	800297c <_ZN6BMI1608regWriteEhh>
	HAL_Delay(10);
 8002a1c:	200a      	movs	r0, #10
 8002a1e:	f7fe fd1f 	bl	8001460 <HAL_Delay>
	regRead(0x0F); //dummy read bmi to force spi modes
 8002a22:	210f      	movs	r1, #15
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7ff ffc2 	bl	80029ae <_ZN6BMI1607regReadEh>
	HAL_Delay(10);
 8002a2a:	200a      	movs	r0, #10
 8002a2c:	f7fe fd18 	bl	8001460 <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL); //start accelerometer
 8002a30:	2211      	movs	r2, #17
 8002a32:	217e      	movs	r1, #126	; 0x7e
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ffa1 	bl	800297c <_ZN6BMI1608regWriteEhh>
	HAL_Delay(2000); //TODO can be shorter but must be checked!!! Bitred...
 8002a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a3e:	f7fe fd0f 	bl	8001460 <HAL_Delay>
	regWrite(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL); //start gyros
 8002a42:	4620      	mov	r0, r4
 8002a44:	2215      	movs	r2, #21
 8002a46:	217e      	movs	r1, #126	; 0x7e
 8002a48:	f7ff ff98 	bl	800297c <_ZN6BMI1608regWriteEhh>
	HAL_Delay(2000); //TODO can be shorter but must be checked!!!
 8002a4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8002a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(2000); //TODO can be shorter but must be checked!!!
 8002a54:	f7fe bd04 	b.w	8001460 <HAL_Delay>

08002a58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a58:	b530      	push	{r4, r5, lr}
 8002a5a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <_Z18SystemClock_Configv+0xa4>)
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a64:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002a68:	6419      	str	r1, [r3, #64]	; 0x40
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a6c:	4924      	ldr	r1, [pc, #144]	; (8002b00 <_Z18SystemClock_Configv+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a76:	9202      	str	r2, [sp, #8]
 8002a78:	680b      	ldr	r3, [r1, #0]
 8002a7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a86:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a90:	2301      	movs	r3, #1
 8002a92:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002a94:	2310      	movs	r3, #16
 8002a96:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a98:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a9a:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a9e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002aa0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002aa2:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002aa4:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aa8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aaa:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002aac:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002aae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	f7ff f80e 	bl	8001ad0 <HAL_RCC_OscConfig>
 8002ab4:	b100      	cbz	r0, 8002ab8 <_Z18SystemClock_Configv+0x60>
 8002ab6:	e7fe      	b.n	8002ab6 <_Z18SystemClock_Configv+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002abc:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ac2:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aca:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002acc:	f7ff f9b0 	bl	8001e30 <HAL_RCC_ClockConfig>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	b100      	cbz	r0, 8002ad6 <_Z18SystemClock_Configv+0x7e>
 8002ad4:	e7fe      	b.n	8002ad4 <_Z18SystemClock_Configv+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ad6:	f7ff fa45 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ae2:	f7fe fd23 	bl	800152c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f7fe fd36 	bl	8001558 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002aec:	4622      	mov	r2, r4
 8002aee:	4621      	mov	r1, r4
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f7fe fcda 	bl	80014ac <HAL_NVIC_SetPriority>
}
 8002af8:	b015      	add	sp, #84	; 0x54
 8002afa:	bd30      	pop	{r4, r5, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000

08002b04 <main>:
{
 8002b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b08:	b096      	sub	sp, #88	; 0x58
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	4cae      	ldr	r4, [pc, #696]	; (8002dc8 <main+0x2c4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002b0e:	4eaf      	ldr	r6, [pc, #700]	; (8002dcc <main+0x2c8>)
  HAL_Init();
 8002b10:	f7fe fc88 	bl	8001424 <HAL_Init>
  SystemClock_Config();
 8002b14:	f7ff ffa0 	bl	8002a58 <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b18:	9503      	str	r5, [sp, #12]
 8002b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6323      	str	r3, [r4, #48]	; 0x30
 8002b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	9303      	str	r3, [sp, #12]
 8002b2a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	9504      	str	r5, [sp, #16]
 8002b2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6323      	str	r3, [r4, #48]	; 0x30
 8002b36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	9304      	str	r3, [sp, #16]
 8002b3e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	9505      	str	r5, [sp, #20]
 8002b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6323      	str	r3, [r4, #48]	; 0x30
 8002b4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002b52:	462a      	mov	r2, r5
 8002b54:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8002b58:	4630      	mov	r0, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin, GPIO_PIN_RESET);
 8002b5c:	f7fe ff44 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002b60:	462a      	mov	r2, r5
 8002b62:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b66:	489a      	ldr	r0, [pc, #616]	; (8002dd0 <main+0x2cc>)
 8002b68:	f7fe ff3e 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b70:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b72:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b74:	4b97      	ldr	r3, [pc, #604]	; (8002dd4 <main+0x2d0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b76:	4896      	ldr	r0, [pc, #600]	; (8002dd0 <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b78:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f7fe fe5e 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI3_CSS_Pin SPI2_CSS_Pin SPI1_CSS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin;
 8002b80:	f44f 63e4 	mov.w	r3, #1824	; 0x720
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = LD2_Pin|SPI3_CSS_Pin|SPI2_CSS_Pin|SPI1_CSS_Pin;
 8002b86:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8e:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b90:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f7fe fe52 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	a90c      	add	r1, sp, #48	; 0x30
 8002b9e:	488e      	ldr	r0, [pc, #568]	; (8002dd8 <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ba0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba2:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f7fe fe49 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002baa:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	a90c      	add	r1, sp, #48	; 0x30
 8002bae:	4888      	ldr	r0, [pc, #544]	; (8002dd0 <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb2:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f7fe fe41 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bba:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbe:	a90c      	add	r1, sp, #48	; 0x30
 8002bc0:	4883      	ldr	r0, [pc, #524]	; (8002dd0 <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bc2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc4:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bca:	f7fe fe37 	bl	800183c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bce:	9501      	str	r5, [sp, #4]
 8002bd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8002bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002be2:	9502      	str	r5, [sp, #8]
 8002be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bea:	6323      	str	r3, [r4, #48]	; 0x30
 8002bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
  hspi1.Instance = SPI1;
 8002bee:	4c7b      	ldr	r4, [pc, #492]	; (8002ddc <main+0x2d8>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002bf4:	462a      	mov	r2, r5
 8002bf6:	4629      	mov	r1, r5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bf8:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002bfa:	200e      	movs	r0, #14
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bfc:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002bfe:	f7fe fc55 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c02:	200e      	movs	r0, #14
 8002c04:	f7fe fc86 	bl	8001514 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c08:	462a      	mov	r2, r5
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	200f      	movs	r0, #15
 8002c0e:	f7fe fc4d 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c12:	200f      	movs	r0, #15
 8002c14:	f7fe fc7e 	bl	8001514 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c18:	462a      	mov	r2, r5
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	2038      	movs	r0, #56	; 0x38
 8002c1e:	f7fe fc45 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c22:	2038      	movs	r0, #56	; 0x38
 8002c24:	f7fe fc76 	bl	8001514 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002c28:	462a      	mov	r2, r5
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	203b      	movs	r0, #59	; 0x3b
 8002c2e:	f7fe fc3d 	bl	80014ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002c32:	203b      	movs	r0, #59	; 0x3b
 8002c34:	f7fe fc6e 	bl	8001514 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c38:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <main+0x2dc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c3a:	60a5      	str	r5, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c3c:	f44f 7982 	mov.w	r9, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c40:	f44f 7700 	mov.w	r7, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c44:	f04f 0a18 	mov.w	sl, #24
  hspi1.Init.CRCPolynomial = 10;
 8002c48:	f04f 080a 	mov.w	r8, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c4c:	4620      	mov	r0, r4
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c4e:	e884 0208 	stmia.w	r4, {r3, r9}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c52:	60e5      	str	r5, [r4, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c56:	6165      	str	r5, [r4, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c58:	61a7      	str	r7, [r4, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c5a:	f8c4 a01c 	str.w	sl, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c5e:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c60:	6265      	str	r5, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c62:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c64:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c68:	f7ff f9f9 	bl	800205e <HAL_SPI_Init>
 8002c6c:	b100      	cbz	r0, 8002c70 <main+0x16c>
 8002c6e:	e7fe      	b.n	8002c6e <main+0x16a>
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c70:	f104 0558 	add.w	r5, r4, #88	; 0x58
  hspi2.Instance = SPI2;
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <main+0x2e0>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c76:	6620      	str	r0, [r4, #96]	; 0x60
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c78:	6660      	str	r0, [r4, #100]	; 0x64
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7a:	66a0      	str	r0, [r4, #104]	; 0x68
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c7c:	66e0      	str	r0, [r4, #108]	; 0x6c
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c7e:	67a0      	str	r0, [r4, #120]	; 0x78
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c80:	67e0      	str	r0, [r4, #124]	; 0x7c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c82:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c86:	4628      	mov	r0, r5
  hspi2.Instance = SPI2;
 8002c88:	65a3      	str	r3, [r4, #88]	; 0x58
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c8a:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c8e:	6727      	str	r7, [r4, #112]	; 0x70
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c90:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
  hspi2.Init.CRCPolynomial = 10;
 8002c94:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c98:	f7ff f9e1 	bl	800205e <HAL_SPI_Init>
 8002c9c:	b100      	cbz	r0, 8002ca0 <main+0x19c>
 8002c9e:	e7fe      	b.n	8002c9e <main+0x19a>
  hspi3.Init.CRCPolynomial = 10;
 8002ca0:	f8c4 80dc 	str.w	r8, [r4, #220]	; 0xdc
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ca4:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
  hspi3.Instance = SPI3;
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <main+0x2e4>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002caa:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cae:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cba:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cbe:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc2:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc6:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002cca:	4640      	mov	r0, r8
  hspi3.Instance = SPI3;
 8002ccc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002cd0:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002cd4:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002cd8:	f7ff f9c1 	bl	800205e <HAL_SPI_Init>
 8002cdc:	b100      	cbz	r0, 8002ce0 <main+0x1dc>
 8002cde:	e7fe      	b.n	8002cde <main+0x1da>
  hi2c1.Instance = I2C1;
 8002ce0:	4b42      	ldr	r3, [pc, #264]	; (8002dec <main+0x2e8>)
 8002ce2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  hi2c1.Init.ClockSpeed = 100000;
 8002ce6:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <main+0x2ec>)
 8002ce8:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cec:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  hi2c1.Init.OwnAddress1 = 0;
 8002cf0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cf8:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
  hi2c1.Init.OwnAddress2 = 0;
 8002cfc:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d00:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d04:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d08:	f504 7084 	add.w	r0, r4, #264	; 0x108
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d0c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d10:	f7fe fe70 	bl	80019f4 <HAL_I2C_Init>
 8002d14:	b100      	cbz	r0, 8002d18 <main+0x214>
 8002d16:	e7fe      	b.n	8002d16 <main+0x212>
  huart2.Instance = USART2;
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <main+0x2f0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
  huart2.Init.BaudRate = 115200;
 8002d1e:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d22:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d26:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d2a:	f04f 090c 	mov.w	r9, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d32:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d36:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
  huart2.Instance = USART2;
 8002d3a:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
  huart2.Init.BaudRate = 115200;
 8002d3e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d42:	f8c4 9170 	str.w	r9, [r4, #368]	; 0x170
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d46:	f7ff fda3 	bl	8002890 <HAL_UART_Init>
 8002d4a:	b100      	cbz	r0, 8002d4e <main+0x24a>
 8002d4c:	e7fe      	b.n	8002d4c <main+0x248>
  huart6.Instance = USART6;
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <main+0x2f4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d50:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d54:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d58:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5c:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d64:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
  huart6.Instance = USART6;
 8002d68:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  huart6.Init.BaudRate = 115200;
 8002d6c:	f8c4 a1a0 	str.w	sl, [r4, #416]	; 0x1a0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d70:	f8c4 91b0 	str.w	r9, [r4, #432]	; 0x1b0
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d74:	f7ff fd8c 	bl	8002890 <HAL_UART_Init>
 8002d78:	b100      	cbz	r0, 8002d7c <main+0x278>
 8002d7a:	e7fe      	b.n	8002d7a <main+0x276>
  IMU.initializeBMI160();
 8002d7c:	a806      	add	r0, sp, #24
class BMI160
{
	public:
		BMI160(SPI_HandleTypeDef* bmiSPI, uint16_t bmiGPIO, GPIO_TypeDef* bmiBANK)
		{
			BMI160_SPI_HANDLER = bmiSPI;
 8002d7e:	9506      	str	r5, [sp, #24]
			BMI160_CSS_PIN = bmiGPIO;
 8002d80:	f8ad 701c 	strh.w	r7, [sp, #28]
			BMI160_PIN_BANK = bmiBANK;
 8002d84:	9608      	str	r6, [sp, #32]
 8002d86:	f7ff fe3a 	bl	80029fe <_ZN6BMI16016initializeBMI160Ev>
{
	public:
			ADXL372(SPI_HandleTypeDef* bmiSPI, uint16_t bmiGPIO, GPIO_TypeDef* bmiBANK)
			{
				SPI_HANDLER = bmiSPI;
				CSS_PIN = bmiGPIO;
 8002d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  ACCEL.initialize();
 8002d8e:	a809      	add	r0, sp, #36	; 0x24
				SPI_HANDLER = bmiSPI;
 8002d90:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
				CSS_PIN = bmiGPIO;
 8002d94:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
				PIN_BANK = bmiBANK;
 8002d98:	960b      	str	r6, [sp, #44]	; 0x2c
 8002d9a:	f7ff fdc1 	bl	8002920 <_ZN7ADXL37210initializeEv>
  ACCEL.regWrite(0x3f, 0b00011111); //POWER_CTL
 8002d9e:	221f      	movs	r2, #31
 8002da0:	213f      	movs	r1, #63	; 0x3f
 8002da2:	a809      	add	r0, sp, #36	; 0x24
 8002da4:	f7ff fda2 	bl	80028ec <_ZN7ADXL3728regWriteEhh>
	  uint8_t data[40] ={};
 8002da8:	2228      	movs	r2, #40	; 0x28
 8002daa:	2100      	movs	r1, #0
 8002dac:	a80c      	add	r0, sp, #48	; 0x30
 8002dae:	f000 fa8f 	bl	80032d0 <memset>
	  ACCEL.multiRead(0x08, data, 6);
 8002db2:	a809      	add	r0, sp, #36	; 0x24
 8002db4:	2306      	movs	r3, #6
 8002db6:	aa0c      	add	r2, sp, #48	; 0x30
 8002db8:	2108      	movs	r1, #8
 8002dba:	f7ff fdbc 	bl	8002936 <_ZN7ADXL3729multiReadEhPhh>
	  HAL_Delay(10);
 8002dbe:	200a      	movs	r0, #10
 8002dc0:	f7fe fb4e 	bl	8001460 <HAL_Delay>
 8002dc4:	e7f0      	b.n	8002da8 <main+0x2a4>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020800 	.word	0x40020800
 8002dd4:	10210000 	.word	0x10210000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	2000008c 	.word	0x2000008c
 8002de0:	40013000 	.word	0x40013000
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40003c00 	.word	0x40003c00
 8002dec:	40005400 	.word	0x40005400
 8002df0:	000186a0 	.word	0x000186a0
 8002df4:	40004400 	.word	0x40004400
 8002df8:	40011400 	.word	0x40011400

08002dfc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002dfc:	e7fe      	b.n	8002dfc <_Error_Handler>
	...

08002e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e00:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_MspInit+0x8c>)
 8002e04:	2400      	movs	r4, #0
 8002e06:	9400      	str	r4, [sp, #0]
 8002e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8002e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e16:	9200      	str	r2, [sp, #0]
 8002e18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	9401      	str	r4, [sp, #4]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e2c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e30:	f7fe fb2a 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e34:	4622      	mov	r2, r4
 8002e36:	4621      	mov	r1, r4
 8002e38:	f06f 000b 	mvn.w	r0, #11
 8002e3c:	f7fe fb36 	bl	80014ac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e40:	4622      	mov	r2, r4
 8002e42:	4621      	mov	r1, r4
 8002e44:	f06f 000a 	mvn.w	r0, #10
 8002e48:	f7fe fb30 	bl	80014ac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f06f 0009 	mvn.w	r0, #9
 8002e54:	f7fe fb2a 	bl	80014ac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e58:	4622      	mov	r2, r4
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	f06f 0004 	mvn.w	r0, #4
 8002e60:	f7fe fb24 	bl	80014ac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e64:	4622      	mov	r2, r4
 8002e66:	4621      	mov	r1, r4
 8002e68:	f06f 0003 	mvn.w	r0, #3
 8002e6c:	f7fe fb1e 	bl	80014ac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002e70:	4622      	mov	r2, r4
 8002e72:	4621      	mov	r1, r4
 8002e74:	f06f 0001 	mvn.w	r0, #1
 8002e78:	f7fe fb18 	bl	80014ac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	4621      	mov	r1, r4
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7fe fb12 	bl	80014ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd10      	pop	{r4, pc}
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002e92:	6802      	ldr	r2, [r0, #0]
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_I2C_MspInit+0x48>)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11a      	bne.n	8002ed0 <HAL_I2C_MspInit+0x40>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e9a:	23c0      	movs	r3, #192	; 0xc0
 8002e9c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9e:	2312      	movs	r3, #18
 8002ea0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eaa:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	eb0d 0103 	add.w	r1, sp, r3
 8002eb0:	480a      	ldr	r0, [pc, #40]	; (8002edc <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eb2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb4:	f7fe fcc2 	bl	800183c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_I2C_MspInit+0x50>)
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ed0:	b007      	add	sp, #28
 8002ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ed6:	bf00      	nop
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <HAL_SPI_MspInit+0x1dc>)
 8002eec:	4293      	cmp	r3, r2
{
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	4605      	mov	r5, r0
  if(hspi->Instance==SPI1)
 8002ef2:	d15e      	bne.n	8002fb2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ef4:	2600      	movs	r6, #0
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_SPI_MspInit+0x1e0>)
 8002ef8:	9600      	str	r6, [sp, #0]
 8002efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	4872      	ldr	r0, [pc, #456]	; (80030c8 <HAL_SPI_MspInit+0x1e4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f0e:	2405      	movs	r4, #5
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f10:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f12:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f14:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f16:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f7fe fc89 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f2a:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2c:	4867      	ldr	r0, [pc, #412]	; (80030cc <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f2e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f30:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f32:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	f8cd 8010 	str.w	r8, [sp, #16]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002f38:	4c65      	ldr	r4, [pc, #404]	; (80030d0 <HAL_SPI_MspInit+0x1ec>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f7fe fc7d 	bl	800183c <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002f42:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <HAL_SPI_MspInit+0x1f0>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f44:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002f46:	f04f 69c0 	mov.w	r9, #100663296	; 0x6000000
 8002f4a:	e884 0208 	stmia.w	r4, {r3, r9}
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f4e:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f54:	60e6      	str	r6, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f56:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f58:	6166      	str	r6, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f5a:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f5c:	61e6      	str	r6, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5e:	6226      	str	r6, [r4, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f60:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f62:	f7fe fb21 	bl	80015a8 <HAL_DMA_Init>
 8002f66:	b118      	cbz	r0, 8002f70 <HAL_SPI_MspInit+0x8c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002f68:	21bb      	movs	r1, #187	; 0xbb
 8002f6a:	485b      	ldr	r0, [pc, #364]	; (80030d8 <HAL_SPI_MspInit+0x1f4>)
 8002f6c:	f7ff ff46 	bl	8002dfc <_Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f70:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_SPI_MspInit+0x1f8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002f72:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002f74:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002f76:	4c5a      	ldr	r4, [pc, #360]	; (80030e0 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f78:	f04f 68c0 	mov.w	r8, #100663296	; 0x6000000
 8002f7c:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8002f80:	e884 1108 	stmia.w	r4, {r3, r8, ip}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f88:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f8a:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8c:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f8e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f90:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f92:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f94:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f96:	6223      	str	r3, [r4, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f98:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f9a:	f7fe fb05 	bl	80015a8 <HAL_DMA_Init>
 8002f9e:	b118      	cbz	r0, 8002fa8 <HAL_SPI_MspInit+0xc4>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002fa0:	21cd      	movs	r1, #205	; 0xcd
 8002fa2:	484d      	ldr	r0, [pc, #308]	; (80030d8 <HAL_SPI_MspInit+0x1f4>)
 8002fa4:	f7ff ff2a 	bl	8002dfc <_Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002fa8:	64ac      	str	r4, [r5, #72]	; 0x48
 8002faa:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002fac:	b009      	add	sp, #36	; 0x24
 8002fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hspi->Instance==SPI2)
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_SPI_MspInit+0x200>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d164      	bne.n	8003082 <HAL_SPI_MspInit+0x19e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fb8:	2600      	movs	r6, #0
 8002fba:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <HAL_SPI_MspInit+0x1e0>)
 8002fbc:	9601      	str	r6, [sp, #4]
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc0:	4849      	ldr	r0, [pc, #292]	; (80030e8 <HAL_SPI_MspInit+0x204>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	9605      	str	r6, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fd4:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd6:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fda:	2405      	movs	r4, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fe4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fe6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe8:	f44f 6780 	mov.w	r7, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff4:	f7fe fc22 	bl	800183c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ff8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	4834      	ldr	r0, [pc, #208]	; (80030cc <HAL_SPI_MspInit+0x1e8>)
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002ffc:	4c3b      	ldr	r4, [pc, #236]	; (80030ec <HAL_SPI_MspInit+0x208>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ffe:	9703      	str	r7, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	f8cd 8018 	str.w	r8, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	f7fe fc16 	bl	800183c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003010:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <HAL_SPI_MspInit+0x20c>)
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003012:	60a6      	str	r6, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003014:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003016:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	60e6      	str	r6, [r4, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800301c:	6127      	str	r7, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301e:	6166      	str	r6, [r4, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003020:	61a6      	str	r6, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003022:	61e6      	str	r6, [r4, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003024:	6226      	str	r6, [r4, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003026:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003028:	f7fe fabe 	bl	80015a8 <HAL_DMA_Init>
 800302c:	b118      	cbz	r0, 8003036 <HAL_SPI_MspInit+0x152>
      _Error_Handler(__FILE__, __LINE__);
 800302e:	21ff      	movs	r1, #255	; 0xff
 8003030:	4829      	ldr	r0, [pc, #164]	; (80030d8 <HAL_SPI_MspInit+0x1f4>)
 8003032:	f7ff fee3 	bl	8002dfc <_Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003036:	64ec      	str	r4, [r5, #76]	; 0x4c
 8003038:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800303a:	4c2e      	ldr	r4, [pc, #184]	; (80030f4 <HAL_SPI_MspInit+0x210>)
 800303c:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_SPI_MspInit+0x214>)
 800303e:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003040:	2240      	movs	r2, #64	; 0x40
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003042:	2300      	movs	r3, #0
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003044:	60a2      	str	r2, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003046:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003048:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800304c:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304e:	60e3      	str	r3, [r4, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	6122      	str	r2, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003052:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003054:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003056:	61e3      	str	r3, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	6223      	str	r3, [r4, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800305a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800305c:	f7fe faa4 	bl	80015a8 <HAL_DMA_Init>
 8003060:	b120      	cbz	r0, 800306c <HAL_SPI_MspInit+0x188>
      _Error_Handler(__FILE__, __LINE__);
 8003062:	f240 1111 	movw	r1, #273	; 0x111
 8003066:	481c      	ldr	r0, [pc, #112]	; (80030d8 <HAL_SPI_MspInit+0x1f4>)
 8003068:	f7ff fec8 	bl	8002dfc <_Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800306c:	2200      	movs	r2, #0
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800306e:	64ac      	str	r4, [r5, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003070:	4611      	mov	r1, r2
 8003072:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003074:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003076:	f7fe fa19 	bl	80014ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800307a:	2024      	movs	r0, #36	; 0x24
 800307c:	f7fe fa4a 	bl	8001514 <HAL_NVIC_EnableIRQ>
 8003080:	e794      	b.n	8002fac <HAL_SPI_MspInit+0xc8>
  else if(hspi->Instance==SPI3)
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_SPI_MspInit+0x218>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d191      	bne.n	8002fac <HAL_SPI_MspInit+0xc8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003088:	2100      	movs	r1, #0
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_SPI_MspInit+0x1e0>)
 800308c:	9102      	str	r1, [sp, #8]
 800308e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003090:	4815      	ldr	r0, [pc, #84]	; (80030e8 <HAL_SPI_MspInit+0x204>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	9105      	str	r1, [sp, #20]
    __HAL_RCC_SPI3_CLK_ENABLE();
 800309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a0:	9302      	str	r3, [sp, #8]
 80030a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80030a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ae:	2303      	movs	r3, #3
 80030b0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030b4:	2306      	movs	r3, #6
 80030b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b8:	f7fe fbc0 	bl	800183c <HAL_GPIO_Init>
}
 80030bc:	e776      	b.n	8002fac <HAL_SPI_MspInit+0xc8>
 80030be:	bf00      	nop
 80030c0:	40013000 	.word	0x40013000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	20000388 	.word	0x20000388
 80030d4:	40026410 	.word	0x40026410
 80030d8:	080033d0 	.word	0x080033d0
 80030dc:	40026458 	.word	0x40026458
 80030e0:	20000328 	.word	0x20000328
 80030e4:	40003800 	.word	0x40003800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	200002c8 	.word	0x200002c8
 80030f0:	40026058 	.word	0x40026058
 80030f4:	20000268 	.word	0x20000268
 80030f8:	40026070 	.word	0x40026070
 80030fc:	40003c00 	.word	0x40003c00

08003100 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003100:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003102:	6803      	ldr	r3, [r0, #0]
 8003104:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_UART_MspInit+0x7c>)
 8003106:	4293      	cmp	r3, r2
{
 8003108:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART2)
 800310a:	d11c      	bne.n	8003146 <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_UART_MspInit+0x80>)
 8003112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003114:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003118:	641a      	str	r2, [r3, #64]	; 0x40
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	9b01      	ldr	r3, [sp, #4]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003124:	230c      	movs	r3, #12
 8003126:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800312c:	2301      	movs	r3, #1
 800312e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003134:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	a903      	add	r1, sp, #12
 8003138:	4812      	ldr	r0, [pc, #72]	; (8003184 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800313a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f7fe fb7e 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003140:	b009      	add	sp, #36	; 0x24
 8003142:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART6)
 8003146:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HAL_UART_MspInit+0x88>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d1f9      	bne.n	8003140 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART6_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_UART_MspInit+0x80>)
 8003152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003154:	f042 0220 	orr.w	r2, r2, #32
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003164:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003168:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003176:	2308      	movs	r3, #8
 8003178:	e7dd      	b.n	8003136 <HAL_UART_MspInit+0x36>
 800317a:	bf00      	nop
 800317c:	40004400 	.word	0x40004400
 8003180:	40023800 	.word	0x40023800
 8003184:	40020000 	.word	0x40020000
 8003188:	40011400 	.word	0x40011400

0800318c <NMI_Handler>:
 800318c:	4770      	bx	lr

0800318e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800318e:	e7fe      	b.n	800318e <HardFault_Handler>

08003190 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003190:	e7fe      	b.n	8003190 <MemManage_Handler>

08003192 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003192:	e7fe      	b.n	8003192 <BusFault_Handler>

08003194 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003194:	e7fe      	b.n	8003194 <UsageFault_Handler>

08003196 <SVC_Handler>:
 8003196:	4770      	bx	lr

08003198 <DebugMon_Handler>:
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800319a:	4770      	bx	lr

0800319c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800319c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319e:	f7fe f94d 	bl	800143c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80031a6:	f7fe b9e4 	b.w	8001572 <HAL_SYSTICK_IRQHandler>
	...

080031ac <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <DMA1_Stream3_IRQHandler+0x8>)
 80031ae:	f7fe ba8b 	b.w	80016c8 <HAL_DMA_IRQHandler>
 80031b2:	bf00      	nop
 80031b4:	200002c8 	.word	0x200002c8

080031b8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <DMA1_Stream4_IRQHandler+0x8>)
 80031ba:	f7fe ba85 	b.w	80016c8 <HAL_DMA_IRQHandler>
 80031be:	bf00      	nop
 80031c0:	20000268 	.word	0x20000268

080031c4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <SPI2_IRQHandler+0x8>)
 80031c6:	f7ff b9cd 	b.w	8002564 <HAL_SPI_IRQHandler>
 80031ca:	bf00      	nop
 80031cc:	200000e4 	.word	0x200000e4

080031d0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <DMA2_Stream0_IRQHandler+0x8>)
 80031d2:	f7fe ba79 	b.w	80016c8 <HAL_DMA_IRQHandler>
 80031d6:	bf00      	nop
 80031d8:	20000388 	.word	0x20000388

080031dc <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <DMA2_Stream3_IRQHandler+0x8>)
 80031de:	f7fe ba73 	b.w	80016c8 <HAL_DMA_IRQHandler>
 80031e2:	bf00      	nop
 80031e4:	20000328 	.word	0x20000328

080031e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	490f      	ldr	r1, [pc, #60]	; (8003228 <SystemInit+0x40>)
 80031ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <SystemInit+0x44>)
 80031f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003202:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800320a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800320e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003210:	4a07      	ldr	r2, [pc, #28]	; (8003230 <SystemInit+0x48>)
 8003212:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800321a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800321c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800321e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003222:	608b      	str	r3, [r1, #8]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00
 800322c:	40023800 	.word	0x40023800
 8003230:	24003010 	.word	0x24003010

08003234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800326c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800323a:	e003      	b.n	8003244 <LoopCopyDataInit>

0800323c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800323e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003242:	3104      	adds	r1, #4

08003244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003244:	480b      	ldr	r0, [pc, #44]	; (8003274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800324a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800324c:	d3f6      	bcc.n	800323c <CopyDataInit>
  ldr  r2, =_sbss
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003250:	e002      	b.n	8003258 <LoopFillZerobss>

08003252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003254:	f842 3b04 	str.w	r3, [r2], #4

08003258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800325a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800325c:	d3f9      	bcc.n	8003252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800325e:	f7ff ffc3 	bl	80031e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003262:	f000 f811 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003266:	f7ff fc4d 	bl	8002b04 <main>
  bx  lr    
 800326a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800326c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003270:	08003530 	.word	0x08003530
  ldr  r0, =_sdata
 8003274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003278:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800327c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003280:	200003f0 	.word	0x200003f0

08003284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <ADC_IRQHandler>
	...

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	4e0d      	ldr	r6, [pc, #52]	; (80032c0 <__libc_init_array+0x38>)
 800328c:	4c0d      	ldr	r4, [pc, #52]	; (80032c4 <__libc_init_array+0x3c>)
 800328e:	1ba4      	subs	r4, r4, r6
 8003290:	10a4      	asrs	r4, r4, #2
 8003292:	2500      	movs	r5, #0
 8003294:	42a5      	cmp	r5, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	4e0b      	ldr	r6, [pc, #44]	; (80032c8 <__libc_init_array+0x40>)
 800329a:	4c0c      	ldr	r4, [pc, #48]	; (80032cc <__libc_init_array+0x44>)
 800329c:	f000 f888 	bl	80033b0 <_init>
 80032a0:	1ba4      	subs	r4, r4, r6
 80032a2:	10a4      	asrs	r4, r4, #2
 80032a4:	2500      	movs	r5, #0
 80032a6:	42a5      	cmp	r5, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b0:	4798      	blx	r3
 80032b2:	3501      	adds	r5, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ba:	4798      	blx	r3
 80032bc:	3501      	adds	r5, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	08003528 	.word	0x08003528
 80032c4:	08003528 	.word	0x08003528
 80032c8:	08003528 	.word	0x08003528
 80032cc:	0800352c 	.word	0x0800352c

080032d0 <memset>:
 80032d0:	4402      	add	r2, r0
 80032d2:	4603      	mov	r3, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <abort>:
 80032e0:	b508      	push	{r3, lr}
 80032e2:	2006      	movs	r0, #6
 80032e4:	f000 f836 	bl	8003354 <raise>
 80032e8:	2001      	movs	r0, #1
 80032ea:	f000 f85f 	bl	80033ac <_exit>

080032ee <memcpy>:
 80032ee:	b510      	push	{r4, lr}
 80032f0:	1e43      	subs	r3, r0, #1
 80032f2:	440a      	add	r2, r1
 80032f4:	4291      	cmp	r1, r2
 80032f6:	d100      	bne.n	80032fa <memcpy+0xc>
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003302:	e7f7      	b.n	80032f4 <memcpy+0x6>

08003304 <_raise_r>:
 8003304:	291f      	cmp	r1, #31
 8003306:	b538      	push	{r3, r4, r5, lr}
 8003308:	4604      	mov	r4, r0
 800330a:	460d      	mov	r5, r1
 800330c:	d904      	bls.n	8003318 <_raise_r+0x14>
 800330e:	2316      	movs	r3, #22
 8003310:	6003      	str	r3, [r0, #0]
 8003312:	f04f 30ff 	mov.w	r0, #4294967295
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800331a:	b112      	cbz	r2, 8003322 <_raise_r+0x1e>
 800331c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003320:	b94b      	cbnz	r3, 8003336 <_raise_r+0x32>
 8003322:	4620      	mov	r0, r4
 8003324:	f000 f830 	bl	8003388 <_getpid_r>
 8003328:	462a      	mov	r2, r5
 800332a:	4601      	mov	r1, r0
 800332c:	4620      	mov	r0, r4
 800332e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003332:	f000 b817 	b.w	8003364 <_kill_r>
 8003336:	2b01      	cmp	r3, #1
 8003338:	d00a      	beq.n	8003350 <_raise_r+0x4c>
 800333a:	1c59      	adds	r1, r3, #1
 800333c:	d103      	bne.n	8003346 <_raise_r+0x42>
 800333e:	2316      	movs	r3, #22
 8003340:	6003      	str	r3, [r0, #0]
 8003342:	2001      	movs	r0, #1
 8003344:	bd38      	pop	{r3, r4, r5, pc}
 8003346:	2400      	movs	r4, #0
 8003348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800334c:	4628      	mov	r0, r5
 800334e:	4798      	blx	r3
 8003350:	2000      	movs	r0, #0
 8003352:	bd38      	pop	{r3, r4, r5, pc}

08003354 <raise>:
 8003354:	4b02      	ldr	r3, [pc, #8]	; (8003360 <raise+0xc>)
 8003356:	4601      	mov	r1, r0
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f7ff bfd3 	b.w	8003304 <_raise_r>
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c

08003364 <_kill_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4c07      	ldr	r4, [pc, #28]	; (8003384 <_kill_r+0x20>)
 8003368:	2300      	movs	r3, #0
 800336a:	4605      	mov	r5, r0
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	f000 f813 	bl	800339c <_kill>
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	d102      	bne.n	8003380 <_kill_r+0x1c>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	b103      	cbz	r3, 8003380 <_kill_r+0x1c>
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	bd38      	pop	{r3, r4, r5, pc}
 8003382:	bf00      	nop
 8003384:	200003ec 	.word	0x200003ec

08003388 <_getpid_r>:
 8003388:	f000 b800 	b.w	800338c <_getpid>

0800338c <_getpid>:
 800338c:	4b02      	ldr	r3, [pc, #8]	; (8003398 <_getpid+0xc>)
 800338e:	2258      	movs	r2, #88	; 0x58
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f04f 30ff 	mov.w	r0, #4294967295
 8003396:	4770      	bx	lr
 8003398:	200003ec 	.word	0x200003ec

0800339c <_kill>:
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <_kill+0xc>)
 800339e:	2258      	movs	r2, #88	; 0x58
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f04f 30ff 	mov.w	r0, #4294967295
 80033a6:	4770      	bx	lr
 80033a8:	200003ec 	.word	0x200003ec

080033ac <_exit>:
 80033ac:	e7fe      	b.n	80033ac <_exit>
	...

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
